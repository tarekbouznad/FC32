
Angle correction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  08013d40  08013d40  00023d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014440  08014440  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08014440  08014440  00024440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014448  08014448  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014448  08014448  00024448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801444c  0801444c  0002444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08014450  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe8  20000378  080147c8  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002360  080147c8  00032360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021389  00000000  00000000  000303eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f65  00000000  00000000  00051774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  000566e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001557  00000000  00000000  000582a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c68b  00000000  00000000  000597f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f41  00000000  00000000  00085e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc446  00000000  00000000  000abdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b5c  00000000  00000000  001a820c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001b0d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d28 	.word	0x08013d28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08013d28 	.word	0x08013d28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_DMA_Init+0x38>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <MX_DMA_Init+0x38>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6493      	str	r3, [r2, #72]	; 0x48
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_DMA_Init+0x38>)
 8001004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	203c      	movs	r0, #60	; 0x3c
 8001014:	f002 ff6b 	bl	8003eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001018:	203c      	movs	r0, #60	; 0x3c
 800101a:	f002 ff84 	bl	8003f26 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b55      	ldr	r3, [pc, #340]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a54      	ldr	r2, [pc, #336]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b52      	ldr	r3, [pc, #328]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <MX_GPIO_Init+0x16c>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b4c      	ldr	r3, [pc, #304]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a48      	ldr	r2, [pc, #288]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b46      	ldr	r3, [pc, #280]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b43      	ldr	r3, [pc, #268]	; (8001198 <MX_GPIO_Init+0x16c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a42      	ldr	r2, [pc, #264]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b40      	ldr	r3, [pc, #256]	; (8001198 <MX_GPIO_Init+0x16c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a3c      	ldr	r2, [pc, #240]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b37      	ldr	r3, [pc, #220]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <MX_GPIO_Init+0x16c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2104      	movs	r1, #4
 80010d6:	4831      	ldr	r0, [pc, #196]	; (800119c <MX_GPIO_Init+0x170>)
 80010d8:	f003 fae2 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	482f      	ldr	r0, [pc, #188]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010e4:	f003 fadc 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	482d      	ldr	r0, [pc, #180]	; (80011a4 <MX_GPIO_Init+0x178>)
 80010f0:	f003 fad6 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fa:	482a      	ldr	r0, [pc, #168]	; (80011a4 <MX_GPIO_Init+0x178>)
 80010fc:	f003 fad0 	bl	80046a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8001100:	2304      	movs	r3, #4
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	2301      	movs	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <MX_GPIO_Init+0x170>)
 8001118:	f003 f918 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001136:	f003 f909 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800113a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_GPIO_Init+0x178>)
 8001154:	f003 f8fa 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800115e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_GPIO_Init+0x178>)
 8001170:	f003 f8ec 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001174:	2301      	movs	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001178:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_GPIO_Init+0x17c>)
 800118a:	f003 f8df 	bl	800434c <HAL_GPIO_Init>

}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	48000400 	.word	0x48000400
 80011a0:	48001000 	.word	0x48001000
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00

080011ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C1_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C1_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e8:	f003 fa72 	bl	80046d0 <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f001 fbed 	bl	80029d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C1_Init+0x74>)
 80011fa:	f003 ffeb 	bl	80051d4 <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001204:	f001 fbe4 	bl	80029d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C1_Init+0x74>)
 800120c:	f004 f82d 	bl	800526a <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f001 fbdb 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000394 	.word	0x20000394
 8001224:	40005400 	.word	0x40005400
 8001228:	10909cec 	.word	0x10909cec

0800122c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0ac      	sub	sp, #176	; 0xb0
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2288      	movs	r2, #136	; 0x88
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00d fd9a 	bl	800ed86 <memset>
  if(i2cHandle->Instance==I2C1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <HAL_I2C_MspInit+0xb0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d13a      	bne.n	80012d2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800125c:	2340      	movs	r3, #64	; 0x40
 800125e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001260:	2300      	movs	r3, #0
 8001262:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f006 f875 	bl	8007358 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001274:	f001 fbac 	bl	80029d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_I2C_MspInit+0xb4>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <HAL_I2C_MspInit+0xb4>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_I2C_MspInit+0xb4>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001290:	23c0      	movs	r3, #192	; 0xc0
 8001292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	2312      	movs	r3, #18
 8001298:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a8:	2304      	movs	r3, #4
 80012aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b2:	4619      	mov	r1, r3
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_I2C_MspInit+0xb8>)
 80012b6:	f003 f849 	bl	800434c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_I2C_MspInit+0xb4>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_I2C_MspInit+0xb4>)
 80012c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c4:	6593      	str	r3, [r2, #88]	; 0x58
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_I2C_MspInit+0xb4>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012d2:	bf00      	nop
 80012d4:	37b0      	adds	r7, #176	; 0xb0
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400

080012e8 <ibus_init>:
static uint8_t fail_safe_flag = 0;


/* Main Functions */
void ibus_init()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 80012ec:	2220      	movs	r2, #32
 80012ee:	4903      	ldr	r1, [pc, #12]	; (80012fc <ibus_init+0x14>)
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <ibus_init+0x18>)
 80012f2:	f007 fe09 	bl	8008f08 <HAL_UART_Receive_DMA>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200003e8 	.word	0x200003e8
 8001300:	200004ac 	.word	0x200004ac

08001304 <ibus_read>:

bool ibus_read(uint16_t* ibus_data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid())
 800130c:	f000 f81a 	bl	8001344 <ibus_is_valid>
 8001310:	4603      	mov	r3, r0
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <ibus_read+0x1c>
		return false;
 800131c:	2300      	movs	r3, #0
 800131e:	e00d      	b.n	800133c <ibus_read+0x38>

	if(!ibus_checksum())
 8001320:	f000 f828 	bl	8001374 <ibus_checksum>
 8001324:	4603      	mov	r3, r0
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <ibus_read+0x30>
		return false;
 8001330:	2300      	movs	r3, #0
 8001332:	e003      	b.n	800133c <ibus_read+0x38>

	ibus_update(ibus_data);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f84d 	bl	80013d4 <ibus_update>
	return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <ibus_is_valid>:


/* Sub Functions */
bool ibus_is_valid()
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <ibus_is_valid+0x2c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b20      	cmp	r3, #32
 800134e:	d105      	bne.n	800135c <ibus_is_valid+0x18>
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <ibus_is_valid+0x2c>)
 8001352:	785b      	ldrb	r3, [r3, #1]
 8001354:	2b40      	cmp	r3, #64	; 0x40
 8001356:	d101      	bne.n	800135c <ibus_is_valid+0x18>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <ibus_is_valid+0x1a>
 800135c:	2300      	movs	r3, #0
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200003e8 	.word	0x200003e8

08001374 <ibus_checksum>:

bool ibus_checksum()
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 800137a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137e:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	e00a      	b.n	800139c <ibus_checksum+0x28>
	{
		checksum_cal -= uart_rx_buffer[i];
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <ibus_checksum+0x5c>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	89fa      	ldrh	r2, [r7, #14]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b1d      	cmp	r3, #29
 80013a0:	ddf1      	ble.n	8001386 <ibus_checksum+0x12>
	}

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <ibus_checksum+0x5c>)
 80013a4:	7fdb      	ldrb	r3, [r3, #31]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <ibus_checksum+0x5c>)
 80013ac:	7f9b      	ldrb	r3, [r3, #30]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	200003e8 	.word	0x200003e8

080013d4 <ibus_update>:

void ibus_update(uint16_t* ibus_data)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	2302      	movs	r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	e018      	b.n	8001418 <ibus_update+0x44>
	{
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8 | uart_rx_buffer[bf_index];
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <ibus_update+0x58>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	490e      	ldr	r1, [pc, #56]	; (800142c <ibus_update+0x58>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	440b      	add	r3, r1
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b219      	sxth	r1, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	b28a      	uxth	r2, r1
 800140a:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3302      	adds	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b05      	cmp	r3, #5
 800141c:	dde3      	ble.n	80013e6 <ibus_update+0x12>
	}
}
 800141e:	bf00      	nop
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	200003e8 	.word	0x200003e8

08001430 <ibus_soft_failsafe>:

/**
 * @note FS-A8S don't have fail safe feature, So make software fail-safe.
 */
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max)
{	
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag++;
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <ibus_soft_failsafe+0x70>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <ibus_soft_failsafe+0x70>)
 8001446:	701a      	strb	r2, [r3, #0]

	if(fail_safe_max > fail_safe_flag)
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <ibus_soft_failsafe+0x70>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	429a      	cmp	r2, r3
 8001450:	d820      	bhi.n	8001494 <ibus_soft_failsafe+0x64>
		return;

	// Clear ibus data
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e008      	b.n	800146a <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	2200      	movs	r2, #0
 8001462:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b05      	cmp	r3, #5
 800146e:	ddf3      	ble.n	8001458 <ibus_soft_failsafe+0x28>

	// Clear ibus buffer
	for(int j = 0; j < IBUS_LENGTH; j++)
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	e007      	b.n	8001486 <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <ibus_soft_failsafe+0x74>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4413      	add	r3, r2
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < IBUS_LENGTH; j++)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3301      	adds	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b1f      	cmp	r3, #31
 800148a:	ddf4      	ble.n	8001476 <ibus_soft_failsafe+0x46>

	fail_safe_flag = 0;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <ibus_soft_failsafe+0x70>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	return;
 8001492:	e000      	b.n	8001496 <ibus_soft_failsafe+0x66>
		return;
 8001494:	bf00      	nop
}
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20000408 	.word	0x20000408
 80014a4:	200003e8 	.word	0x200003e8

080014a8 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <ibus_reset_failsafe+0x14>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20000408 	.word	0x20000408

080014c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if (huart == IBUS_UART)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_UART_RxCpltCallback+0x20>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d102      	bne.n	80014d6 <HAL_UART_RxCpltCallback+0x16>
		ibus_reset_failsafe(huart);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe9 	bl	80014a8 <ibus_reset_failsafe>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200004ac 	.word	0x200004ac

080014e4 <calculate_pid.2>:

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
	void calculate_pid(void) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4663      	mov	r3, ip
 80014ec:	f8c7 c004 	str.w	ip, [r7, #4]
		//Roll calculations
		pid_error_temp = gyro_roll_input - pid_roll_setpoint;
 80014f0:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 80014f4:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		pid_i_mem_roll += pid_i_gain_roll * pid_error_temp;
 8001500:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
 8001504:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8001508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150c:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110

		//Limiting the I term
		if (pid_i_mem_roll > 100)
 8001518:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 800151c:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80017c0 <calculate_pid.2+0x2dc>
 8001520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	dd03      	ble.n	8001532 <calculate_pid.2+0x4e>
			pid_i_mem_roll = 100;
 800152a:	4aa6      	ldr	r2, [pc, #664]	; (80017c4 <calculate_pid.2+0x2e0>)
 800152c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001530:	e00b      	b.n	800154a <calculate_pid.2+0x66>
		else if (pid_i_mem_roll < 100 * -1)
 8001532:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 8001536:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80017c8 <calculate_pid.2+0x2e4>
 800153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d502      	bpl.n	800154a <calculate_pid.2+0x66>
			pid_i_mem_roll = 100 * -1;
 8001544:	4aa1      	ldr	r2, [pc, #644]	; (80017cc <calculate_pid.2+0x2e8>)
 8001546:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

		pid_output_roll = pid_p_gain_roll * pid_error_temp + pid_i_mem_roll + pid_d_gain_roll * (pid_error_temp - pid_last_roll_d_error);
 800154a:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 800154e:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8001552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001556:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 800155a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155e:	edd3 6a46 	vldr	s13, [r3, #280]	; 0x118
 8001562:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001566:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800156a:	edd3 6a41 	vldr	s13, [r3, #260]	; 0x104
 800156e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100

		//Limiting the output
		if (pid_output_roll > pid_max_roll)
 800157a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800157e:	ee07 2a90 	vmov	s15, r2
 8001582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001586:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 800158a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	dd08      	ble.n	80015a6 <calculate_pid.2+0xc2>
			pid_output_roll = pid_max_roll;
 8001594:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001598:	ee07 2a90 	vmov	s15, r2
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
 80015a4:	e016      	b.n	80015d4 <calculate_pid.2+0xf0>
		else if (pid_output_roll < pid_max_roll * -1)
 80015a6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80015aa:	4252      	negs	r2, r2
 80015ac:	ee07 2a90 	vmov	s15, r2
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80015b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	d508      	bpl.n	80015d4 <calculate_pid.2+0xf0>
			pid_output_roll = pid_max_roll * -1;
 80015c2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80015c6:	4252      	negs	r2, r2
 80015c8:	ee07 2a90 	vmov	s15, r2
 80015cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d0:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100

		pid_last_roll_d_error = pid_error_temp;
 80015d4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80015d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		//Pitch calculations
		pid_error_temp = gyro_pitch_input - pid_pitch_setpoint;
 80015dc:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80015e0:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		pid_i_mem_pitch += pid_i_gain_pitch * pid_error_temp;
 80015ec:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80015f0:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 80015fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001600:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec

		//Limiting the I term
		if (pid_i_mem_pitch > 100)
 8001604:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8001608:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80017c0 <calculate_pid.2+0x2dc>
 800160c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	dd03      	ble.n	800161e <calculate_pid.2+0x13a>
			pid_i_mem_pitch = 100;
 8001616:	4a6b      	ldr	r2, [pc, #428]	; (80017c4 <calculate_pid.2+0x2e0>)
 8001618:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800161c:	e00b      	b.n	8001636 <calculate_pid.2+0x152>
		else if (pid_i_mem_pitch < 100 * -1)
 800161e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8001622:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80017c8 <calculate_pid.2+0x2e4>
 8001626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	d502      	bpl.n	8001636 <calculate_pid.2+0x152>
			pid_i_mem_pitch = 100 * -1;
 8001630:	4a66      	ldr	r2, [pc, #408]	; (80017cc <calculate_pid.2+0x2e8>)
 8001632:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		pid_output_pitch = pid_p_gain_pitch * pid_error_temp + pid_i_mem_pitch + pid_d_gain_pitch * (pid_error_temp - pid_last_pitch_d_error);
 8001636:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 800163a:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164a:	edd3 6a46 	vldr	s13, [r3, #280]	; 0x118
 800164e:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8001652:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001656:	edd3 6a38 	vldr	s13, [r3, #224]	; 0xe0
 800165a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

		//Limiting the output
		if (pid_output_pitch > pid_max_pitch)
 8001666:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800166a:	ee07 2a90 	vmov	s15, r2
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8001676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	dd08      	ble.n	8001692 <calculate_pid.2+0x1ae>
			pid_output_pitch = pid_max_pitch;
 8001680:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001684:	ee07 2a90 	vmov	s15, r2
 8001688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168c:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 8001690:	e016      	b.n	80016c0 <calculate_pid.2+0x1dc>
		else if (pid_output_pitch < pid_max_pitch * -1)
 8001692:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001696:	4252      	negs	r2, r2
 8001698:	ee07 2a90 	vmov	s15, r2
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80016a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d508      	bpl.n	80016c0 <calculate_pid.2+0x1dc>
			pid_output_pitch = pid_max_pitch * -1;
 80016ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80016b2:	4252      	negs	r2, r2
 80016b4:	ee07 2a90 	vmov	s15, r2
 80016b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016bc:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

		pid_last_pitch_d_error = pid_error_temp;
 80016c0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80016c4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		//Yaw calculations
		pid_error_temp = gyro_yaw_input - pid_yaw_setpoint;
 80016c8:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 80016cc:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80016d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d4:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		pid_i_mem_yaw += pid_i_gain_yaw * pid_error_temp;
 80016d8:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 80016dc:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 80016e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e4:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80016e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ec:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8


		if (pid_i_mem_yaw > 100)
 80016f0:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80016f4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80017c0 <calculate_pid.2+0x2dc>
 80016f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	dd03      	ble.n	800170a <calculate_pid.2+0x226>
			pid_i_mem_yaw = 100;
 8001702:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <calculate_pid.2+0x2e0>)
 8001704:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8001708:	e00b      	b.n	8001722 <calculate_pid.2+0x23e>
		else if (pid_i_mem_yaw < 100 * -1)
 800170a:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800170e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80017c8 <calculate_pid.2+0x2e4>
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	d502      	bpl.n	8001722 <calculate_pid.2+0x23e>
			pid_i_mem_yaw = 100 * -1;
 800171c:	4a2b      	ldr	r2, [pc, #172]	; (80017cc <calculate_pid.2+0x2e8>)
 800171e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

		pid_output_yaw = pid_p_gain_yaw * pid_error_temp + pid_i_mem_yaw + pid_d_gain_yaw * (pid_error_temp - pid_last_yaw_d_error);
 8001722:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8001726:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 800172a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172e:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8001732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001736:	edd3 6a46 	vldr	s13, [r3, #280]	; 0x118
 800173a:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800173e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001742:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
 8001746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

		//Limiting the output
		if (pid_output_yaw > pid_max_yaw)
 8001752:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001756:	ee07 2a90 	vmov	s15, r2
 800175a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175e:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8001762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	dd08      	ble.n	800177e <calculate_pid.2+0x29a>
			pid_output_yaw = pid_max_yaw;
 800176c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001770:	ee07 2a90 	vmov	s15, r2
 8001774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001778:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 800177c:	e016      	b.n	80017ac <calculate_pid.2+0x2c8>
		else if (pid_output_yaw < pid_max_yaw * -1)
 800177e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001782:	4252      	negs	r2, r2
 8001784:	ee07 2a90 	vmov	s15, r2
 8001788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178c:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8001790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001798:	d508      	bpl.n	80017ac <calculate_pid.2+0x2c8>
			pid_output_yaw = pid_max_yaw * -1;
 800179a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800179e:	4252      	negs	r2, r2
 80017a0:	ee07 2a90 	vmov	s15, r2
 80017a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a8:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

		pid_last_yaw_d_error = pid_error_temp;
 80017ac:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80017b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	42c80000 	.word	0x42c80000
 80017c4:	42c80000 	.word	0x42c80000
 80017c8:	c2c80000 	.word	0xc2c80000
 80017cc:	c2c80000 	.word	0xc2c80000

080017d0 <main>:
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b0f6      	sub	sp, #472	; 0x1d8
 80017d4:	af00      	add	r7, sp, #0
int main(void)
 80017d6:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80017da:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017de:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80017e2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	float pid_p_gain_roll = 1.3; // P-gain for roll PID controller
 80017e6:	4aca      	ldr	r2, [pc, #808]	; (8001b10 <main+0x340>)
 80017e8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017ec:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80017f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	float pid_i_gain_roll = 0.04; // I-gain for roll PID controller
 80017f4:	4ac7      	ldr	r2, [pc, #796]	; (8001b14 <main+0x344>)
 80017f6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017fa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80017fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	float pid_d_gain_roll = 18.0; // D-gain for roll PID controller
 8001802:	4ac5      	ldr	r2, [pc, #788]	; (8001b18 <main+0x348>)
 8001804:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001808:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800180c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	int pid_max_roll = 400; // Maximum output of the roll PID controller (+/-)
 8001810:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001814:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001818:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800181c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	float pid_p_gain_pitch = pid_p_gain_roll;
 8001820:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001824:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001828:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800182c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001830:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001834:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	float pid_i_gain_pitch = pid_i_gain_roll;
 8001838:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800183c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001840:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001844:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001848:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800184c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	float pid_d_gain_pitch = pid_d_gain_roll;
 8001850:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001854:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001858:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800185c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001860:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001864:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	int pid_max_pitch = pid_max_roll;
 8001868:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800186c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001870:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001874:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001878:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800187c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	float pid_p_gain_yaw = 4.0; // P-gain for yaw PID controller
 8001880:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001884:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001888:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800188c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	float pid_i_gain_yaw = 0.02; // I-gain for yaw PID controller
 8001890:	4aa2      	ldr	r2, [pc, #648]	; (8001b1c <main+0x34c>)
 8001892:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001896:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800189a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	float pid_d_gain_yaw = 0.0; // D-gain for yaw PID controller
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018a6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80018aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	int pid_max_yaw = 400; // Maximum output of the yaw PID controller (+/-)
 80018ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018b6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80018ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t loopExecutionTime = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
  HAL_Init();
 80018c4:	f002 f998 	bl	8003bf8 <HAL_Init>
			}
		}
	}

	//Variable Initialization
		ibus_data[0]=0;
 80018c8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80018d0:	2200      	movs	r2, #0
 80018d2:	801a      	strh	r2, [r3, #0]
		ibus_data[1]=0;
 80018d4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80018dc:	2200      	movs	r2, #0
 80018de:	805a      	strh	r2, [r3, #2]
		ibus_data[2]=0;
 80018e0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80018e8:	2200      	movs	r2, #0
 80018ea:	809a      	strh	r2, [r3, #4]
		ibus_data[3]=0;
 80018ec:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80018f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80018f4:	2200      	movs	r2, #0
 80018f6:	80da      	strh	r2, [r3, #6]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f8:	f001 f808 	bl	800290c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fc:	f7ff fb96 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 8001900:	f7ff fb76 	bl	8000ff0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001904:	f7ff fc52 	bl	80011ac <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001908:	f002 f84e 	bl	80039a8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800190c:	f00b fc44 	bl	800d198 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001910:	f001 feac 	bl	800366c <MX_TIM2_Init>
  MX_UART4_Init();
 8001914:	f002 f818 	bl	8003948 <MX_UART4_Init>
  MX_TIM3_Init();
 8001918:	f001 ff44 	bl	80037a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_Init();
 800191c:	f002 f96c 	bl	8003bf8 <HAL_Init>
	ibus_init();
 8001920:	f7ff fce2 	bl	80012e8 <ibus_init>
	HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2104      	movs	r1, #4
 8001928:	487d      	ldr	r0, [pc, #500]	; (8001b20 <main+0x350>)
 800192a:	f002 feb9 	bl	80046a0 <HAL_GPIO_WritePin>
	int size = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	error = MPU6050_Init(&hi2c1);
 8001934:	487b      	ldr	r0, [pc, #492]	; (8001b24 <main+0x354>)
 8001936:	f001 f850 	bl	80029da <MPU6050_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001942:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001946:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	while (error != 0) {
 800194a:	e024      	b.n	8001996 <main+0x1c6>
		sprintf(buf, "GYRO NOT INIT\n");
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001954:	4974      	ldr	r1, [pc, #464]	; (8001b28 <main+0x358>)
 8001956:	4618      	mov	r0, r3
 8001958:	f00d f9b2 	bl	800ecc0 <siprintf>
		size = strlen(buf);
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fc83 	bl	8000270 <strlen>
 800196a:	4603      	mov	r3, r0
 800196c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		CDC_Transmit_FS((uint8_t*) buf, size);
 8001970:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001974:	b29a      	uxth	r2, r3
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	f203 1327 	addw	r3, r3, #295	; 0x127
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f00b fcc7 	bl	800d314 <CDC_Transmit_FS>
		error_signal();
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	469c      	mov	ip, r3
 800198c:	f000 ff66 	bl	800285c <error_signal.0>
		HAL_Delay(4);
 8001990:	2004      	movs	r0, #4
 8001992:	f002 f9ad 	bl	8003cf0 <HAL_Delay>
	while (error != 0) {
 8001996:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800199a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800199e:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1d2      	bne.n	800194c <main+0x17c>
	}

	sprintf(buf, "GYRO Inititialized\n");
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	f203 1327 	addw	r3, r3, #295	; 0x127
 80019ae:	495f      	ldr	r1, [pc, #380]	; (8001b2c <main+0x35c>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f00d f985 	bl	800ecc0 <siprintf>
	size = strlen(buf);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	f203 1327 	addw	r3, r3, #295	; 0x127
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc56 	bl	8000270 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	CDC_Transmit_FS((uint8_t*) buf, size);
 80019ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	f203 1327 	addw	r3, r3, #295	; 0x127
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f00b fc9a 	bl	800d314 <CDC_Transmit_FS>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019e0:	2100      	movs	r1, #0
 80019e2:	4853      	ldr	r0, [pc, #332]	; (8001b30 <main+0x360>)
 80019e4:	f006 faa6 	bl	8007f34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80019e8:	2104      	movs	r1, #4
 80019ea:	4851      	ldr	r0, [pc, #324]	; (8001b30 <main+0x360>)
 80019ec:	f006 faa2 	bl	8007f34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019f0:	2108      	movs	r1, #8
 80019f2:	484f      	ldr	r0, [pc, #316]	; (8001b30 <main+0x360>)
 80019f4:	f006 fa9e 	bl	8007f34 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80019f8:	210c      	movs	r1, #12
 80019fa:	484d      	ldr	r0, [pc, #308]	; (8001b30 <main+0x360>)
 80019fc:	f006 fa9a 	bl	8007f34 <HAL_TIM_PWM_Start>
	TIM2->CCR1 = 800; // PIN
 8001a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 800;
 8001a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a0e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 800;
 8001a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a18:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a1c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 800;
 8001a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
	sprintf(buf, "Calibration...\n");
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001a30:	4940      	ldr	r1, [pc, #256]	; (8001b34 <main+0x364>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00d f944 	bl	800ecc0 <siprintf>
	size = strlen(buf);
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fc15 	bl	8000270 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	CDC_Transmit_FS((uint8_t*) buf, size);
 8001a4c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00b fc59 	bl	800d314 <CDC_Transmit_FS>
	MPU6050_Calibrate(&hi2c1, &GYRO, 0);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	3318      	adds	r3, #24
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482d      	ldr	r0, [pc, #180]	; (8001b24 <main+0x354>)
 8001a6e:	f001 fc1d 	bl	80032ac <MPU6050_Calibrate>
	HAL_Delay(50);
 8001a72:	2032      	movs	r0, #50	; 0x32
 8001a74:	f002 f93c 	bl	8003cf0 <HAL_Delay>
	//Read RC command
	ibus_read(ibus_data);
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fc42 	bl	8001304 <ibus_read>
	ibus_soft_failsafe(ibus_data, 10); // if ibus is not updated, clear ibus data.
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	210a      	movs	r1, #10
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fcd3 	bl	8001430 <ibus_soft_failsafe>
	//Wait until the receiver is active.
	  while (ibus_data[0] < 990 || ibus_data[1] < 990 || ibus_data[2] < 990 || ibus_data[3] < 990)  {
 8001a8a:	e01c      	b.n	8001ac6 <main+0x2f6>
	    error = 3;                                                  //Set the error status to 3.
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001a92:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001a96:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	    error_signal();                                             //Show the error via the red LED.
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	f000 fedc 	bl	800285c <error_signal.0>
	    ibus_read(ibus_data);
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc2c 	bl	8001304 <ibus_read>
	    ibus_soft_failsafe(ibus_data, 10); // if ibus is not updated, clear ibus data.
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	210a      	movs	r1, #10
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fcbd 	bl	8001430 <ibus_soft_failsafe>
		HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2104      	movs	r1, #4
 8001aba:	4819      	ldr	r0, [pc, #100]	; (8001b20 <main+0x350>)
 8001abc:	f002 fdf0 	bl	80046a0 <HAL_GPIO_WritePin>
	    HAL_Delay(4);
 8001ac0:	2004      	movs	r0, #4
 8001ac2:	f002 f915 	bl	8003cf0 <HAL_Delay>
	  while (ibus_data[0] < 990 || ibus_data[1] < 990 || ibus_data[2] < 990 || ibus_data[3] < 990)  {
 8001ac6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001aca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d9d9      	bls.n	8001a8c <main+0x2bc>
 8001ad8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001adc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ae0:	885b      	ldrh	r3, [r3, #2]
 8001ae2:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d9d0      	bls.n	8001a8c <main+0x2bc>
 8001aea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001aee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001af2:	889b      	ldrh	r3, [r3, #4]
 8001af4:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d9c7      	bls.n	8001a8c <main+0x2bc>
 8001afc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b04:	88db      	ldrh	r3, [r3, #6]
 8001b06:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d9be      	bls.n	8001a8c <main+0x2bc>
	  }

	  while (ibus_data[2] < 990 || ibus_data[2] < 990)  {
 8001b0e:	e027      	b.n	8001b60 <main+0x390>
 8001b10:	3fa66666 	.word	0x3fa66666
 8001b14:	3d23d70a 	.word	0x3d23d70a
 8001b18:	41900000 	.word	0x41900000
 8001b1c:	3ca3d70a 	.word	0x3ca3d70a
 8001b20:	48000400 	.word	0x48000400
 8001b24:	20000394 	.word	0x20000394
 8001b28:	08013d40 	.word	0x08013d40
 8001b2c:	08013d50 	.word	0x08013d50
 8001b30:	20000414 	.word	0x20000414
 8001b34:	08013d64 	.word	0x08013d64
	     error = 4;                                                  //Set the error status to 4.
 8001b38:	2204      	movs	r2, #4
 8001b3a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b3e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b42:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	     error_signal();                                             //Show the error via the red LED.
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	469c      	mov	ip, r3
 8001b4c:	f000 fe86 	bl	800285c <error_signal.0>
	     HAL_Delay(4);
 8001b50:	2004      	movs	r0, #4
 8001b52:	f002 f8cd 	bl	8003cf0 <HAL_Delay>
	     HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2104      	movs	r1, #4
 8001b5a:	48e5      	ldr	r0, [pc, #916]	; (8001ef0 <main+0x720>)
 8001b5c:	f002 fda0 	bl	80046a0 <HAL_GPIO_WritePin>
	  while (ibus_data[2] < 990 || ibus_data[2] < 990)  {
 8001b60:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b64:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b68:	889b      	ldrh	r3, [r3, #4]
 8001b6a:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d9e2      	bls.n	8001b38 <main+0x368>
 8001b72:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b7a:	889b      	ldrh	r3, [r3, #4]
 8001b7c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d9d9      	bls.n	8001b38 <main+0x368>
	   }
	   error = 0;                                                    //Reset the error status to 0.
 8001b84:	2200      	movs	r2, #0
 8001b86:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001b8a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b8e:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	   //When everything is done, turn off the led.
	HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2104      	movs	r1, #4
 8001b96:	48d6      	ldr	r0, [pc, #856]	; (8001ef0 <main+0x720>)
 8001b98:	f002 fd82 	bl	80046a0 <HAL_GPIO_WritePin>
	roll_level_adjust=0;
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ba4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pitch_level_adjust=0;
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001bb4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	HAL_Delay(100);
 8001bbc:	2064      	movs	r0, #100	; 0x64
 8001bbe:	f002 f897 	bl	8003cf0 <HAL_Delay>
	sprintf(buf, "Quadcopter Functional\n");
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001bca:	49ca      	ldr	r1, [pc, #808]	; (8001ef4 <main+0x724>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00d f877 	bl	800ecc0 <siprintf>
	size = strlen(buf);
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb48 	bl	8000270 <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	CDC_Transmit_FS((uint8_t*) buf, size);
 8001be6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00b fb8c 	bl	800d314 <CDC_Transmit_FS>
	pid_pitch_setpoint = 0;
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c04:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c08:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	pid_yaw_setpoint = 0;
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c14:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c18:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid_roll_setpoint = 0;
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c24:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c28:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	gyro_roll_input = 0;
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c34:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	gyro_pitch_input = 0;
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c44:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c48:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	gyro_yaw_input = 0;
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c54:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	pid_error_temp = 0;
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c64:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c68:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	pid_i_mem_pitch = 0;
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c74:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c78:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	pid_i_mem_roll = 0;
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c84:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c88:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	pid_i_mem_yaw = 0;
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001c94:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	pid_last_pitch_d_error = 0;
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ca4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001ca8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pid_last_yaw_d_error = 0;
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cb4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pid_last_roll_d_error = 0;
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cc4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001cc8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	pid_i_mem_roll = 0;
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cd4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001cd8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	pid_last_roll_d_error = 0;
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ce4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001ce8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	pid_i_mem_pitch = 0;
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001cf4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001cf8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	pid_last_pitch_d_error = 0;
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d04:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d08:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pid_i_mem_yaw = 0;
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d14:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	pid_last_yaw_d_error = 0;
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d24:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	pid_roll_setpoint = 0;
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d34:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d38:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	pid_yaw_setpoint = 0;
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d44:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid_pitch_setpoint = 0;
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d54:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d58:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	angle_pitch=0;
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d64:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	angle_roll=0;
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d74:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	HAL_TIM_Base_Init(&htim3);
 8001d7c:	485e      	ldr	r0, [pc, #376]	; (8001ef8 <main+0x728>)
 8001d7e:	f005 ffb7 	bl	8007cf0 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim3);              //initiate the loop timer counter
 8001d82:	485d      	ldr	r0, [pc, #372]	; (8001ef8 <main+0x728>)
 8001d84:	f006 f80c 	bl	8007da0 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		TIM3->CNT = 0;
 8001d88:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <main+0x72c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
		time1=TIM3->CNT;
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <main+0x72c>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

		ibus_read(ibus_data);
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fab3 	bl	8001304 <ibus_read>
		ibus_soft_failsafe(ibus_data, 10); // if ibus is not updated, clear ibus data.
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	210a      	movs	r1, #10
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fb44 	bl	8001430 <ibus_soft_failsafe>

		//Let's get the current gyro data and scale it to degrees per second for the pid calculations.
		gyro_signalen();
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	469c      	mov	ip, r3
 8001dae:	f000 fb3f 	bl	8002430 <gyro_signalen.1>


		//The PID set point in degrees per second is determined by the roll receiver input.
		//In the case of deviding by 3 the max roll rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
		pid_roll_setpoint = 0;
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001dba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001dbe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		//We need a little dead band of 16us for better results.
		if(ibus_data[0]<1508 && ibus_data[0]>1492)
 8001dc2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001dc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d811      	bhi.n	8001df8 <main+0x628>
 8001dd4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001dd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	f240 52d4 	movw	r2, #1492	; 0x5d4
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d908      	bls.n	8001df8 <main+0x628>
			pid_roll_setpoint = 0;
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001dee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001df2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8001df6:	e034      	b.n	8001e62 <main+0x692>
		else if (ibus_data[0] > 1508)
 8001df8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001dfc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d911      	bls.n	8001e2e <main+0x65e>
			pid_roll_setpoint = ibus_data[0] - 1508;
 8001e0a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e20:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e24:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e28:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c
 8001e2c:	e019      	b.n	8001e62 <main+0x692>
		else if (ibus_data[0] < 1492)
 8001e2e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d810      	bhi.n	8001e62 <main+0x692>
			pid_roll_setpoint = ibus_data[0] - 1492;
 8001e40:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e44:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e56:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e5a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e5e:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		pid_roll_setpoint -= roll_level_adjust;
 8001e62:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e66:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e6a:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8001e6e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e72:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e76:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e82:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e86:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c
		pid_roll_setpoint /= 3; //Divide the setpoint for the PID roll controller by 3 to get angles in degrees.
 8001e8a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001e8e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e92:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8001e96:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ea2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001ea6:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		//The PID set point in degrees per second is determined by the pitch receiver input.
		//In the case of deviding by 3 the max pitch rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
		pid_pitch_setpoint = 0;
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001eb2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001eb6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		//We need a little dead band of 16us for better results.
		if (ibus_data[1] < 1508 && ibus_data[1] > 1492)
 8001eba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ebe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d819      	bhi.n	8001f00 <main+0x730>
 8001ecc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ed0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ed4:	885b      	ldrh	r3, [r3, #2]
 8001ed6:	f240 52d4 	movw	r2, #1492	; 0x5d4
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d910      	bls.n	8001f00 <main+0x730>
			pid_pitch_setpoint = 0;
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001ee6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001eea:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001eee:	e03c      	b.n	8001f6a <main+0x79a>
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	08013d74 	.word	0x08013d74
 8001ef8:	20000460 	.word	0x20000460
 8001efc:	40000400 	.word	0x40000400
		else if (ibus_data[1] > 1508)
 8001f00:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f04:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d911      	bls.n	8001f36 <main+0x766>
			pid_pitch_setpoint = ibus_data[1] - 1508;
 8001f12:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f28:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f2c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f30:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
 8001f34:	e019      	b.n	8001f6a <main+0x79a>
		else if (ibus_data[1] < 1492)
 8001f36:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f3a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f3e:	885b      	ldrh	r3, [r3, #2]
 8001f40:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d810      	bhi.n	8001f6a <main+0x79a>
			pid_pitch_setpoint = ibus_data[1] - 1492;
 8001f48:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f62:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f66:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4

		pid_pitch_setpoint -= pitch_level_adjust; //Subtract the angle correction from the standardized receiver pitch input value.
 8001f6a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f6e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f72:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 8001f76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f7a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f7e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f86:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f8a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f8e:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		pid_pitch_setpoint /= 3; //Divide the setpoint for the PID pitch controller by 3 to get angles in degrees.
 8001f92:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f96:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f9a:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 8001f9e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001faa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001fae:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4

		//The PID set point in degrees per second is determined by the yaw receiver input.
		//In the case of deviding by 3 the max yaw rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
		pid_yaw_setpoint = 0;
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001fbe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		//We need a little dead band of 16us for better results.
		if (ibus_data[3] > 1050) { //Do not yaw when turning off the motors.
 8001fc2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fca:	88db      	ldrh	r3, [r3, #6]
 8001fcc:	f240 421a 	movw	r2, #1050	; 0x41a
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d94f      	bls.n	8002074 <main+0x8a4>
			if (ibus_data[3] < 1508 && ibus_data[3] > 1492)
 8001fd4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fdc:	88db      	ldrh	r3, [r3, #6]
 8001fde:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d811      	bhi.n	800200a <main+0x83a>
 8001fe6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001fea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001fee:	88db      	ldrh	r3, [r3, #6]
 8001ff0:	f240 52d4 	movw	r2, #1492	; 0x5d4
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d908      	bls.n	800200a <main+0x83a>
				pid_yaw_setpoint = 0;
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002000:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002004:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002008:	e034      	b.n	8002074 <main+0x8a4>
			else if (ibus_data[3] > 1508)
 800200a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800200e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002012:	88db      	ldrh	r3, [r3, #6]
 8002014:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8002018:	4293      	cmp	r3, r2
 800201a:	d911      	bls.n	8002040 <main+0x870>
				pid_yaw_setpoint = ibus_data[3] - 1508;
 800201c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002020:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002024:	88db      	ldrh	r3, [r3, #6]
 8002026:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002032:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002036:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800203a:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 800203e:	e019      	b.n	8002074 <main+0x8a4>
			else if (ibus_data[3] < 1492)
 8002040:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002044:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002048:	88db      	ldrh	r3, [r3, #6]
 800204a:	f240 52d3 	movw	r2, #1491	; 0x5d3
 800204e:	4293      	cmp	r3, r2
 8002050:	d810      	bhi.n	8002074 <main+0x8a4>
				pid_yaw_setpoint = ibus_data[3] - 1492;
 8002052:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002056:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800205a:	88db      	ldrh	r3, [r3, #6]
 800205c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002068:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800206c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002070:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		}

		gyro_roll_input = (gyro_roll_input * 0.7) + (((float) gyro_roll) * 0.3); //Gyro pid input is deg/sec.
 8002074:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002078:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800207c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fa61 	bl	8000548 <__aeabi_f2d>
 8002086:	a3e6      	add	r3, pc, #920	; (adr r3, 8002420 <main+0xc50>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe fab4 	bl	80005f8 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4614      	mov	r4, r2
 8002096:	461d      	mov	r5, r3
 8002098:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800209c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fd9e 	bl	8000be8 <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa4a 	bl	8000548 <__aeabi_f2d>
 80020b4:	a3dc      	add	r3, pc, #880	; (adr r3, 8002428 <main+0xc58>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fa9d 	bl	80005f8 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7fe f8e1 	bl	800028c <__adddf3>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fd89 	bl	8000be8 <__aeabi_d2f>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020dc:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

		gyro_pitch_input = (gyro_pitch_input * 0.7) + (((float) gyro_pitch) * 0.3); //Gyro pid input is deg/sec.
 80020e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80020e8:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa29 	bl	8000548 <__aeabi_f2d>
 80020f6:	a3ca      	add	r3, pc, #808	; (adr r3, 8002420 <main+0xc50>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa7c 	bl	80005f8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800210c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002110:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fd66 	bl	8000be8 <__aeabi_d2f>
 800211c:	4603      	mov	r3, r0
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa12 	bl	8000548 <__aeabi_f2d>
 8002124:	a3c0      	add	r3, pc, #768	; (adr r3, 8002428 <main+0xc58>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f7fe fa65 	bl	80005f8 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f8a9 	bl	800028c <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd51 	bl	8000be8 <__aeabi_d2f>
 8002146:	4602      	mov	r2, r0
 8002148:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800214c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002150:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

		gyro_yaw_input = (gyro_yaw_input * 0.7) + (((float) gyro_yaw) * 0.3); //Gyro pid input is deg/sec.
 8002154:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002158:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800215c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f9f1 	bl	8000548 <__aeabi_f2d>
 8002166:	a3ae      	add	r3, pc, #696	; (adr r3, 8002420 <main+0xc50>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe fa44 	bl	80005f8 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4614      	mov	r4, r2
 8002176:	461d      	mov	r5, r3
 8002178:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800217c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fd2e 	bl	8000be8 <__aeabi_d2f>
 800218c:	4603      	mov	r3, r0
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9da 	bl	8000548 <__aeabi_f2d>
 8002194:	a3a4      	add	r3, pc, #656	; (adr r3, 8002428 <main+0xc58>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe fa2d 	bl	80005f8 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe f871 	bl	800028c <__adddf3>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fd19 	bl	8000be8 <__aeabi_d2f>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021bc:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80021c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

		calculate_pid();
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	469c      	mov	ip, r3
 80021ca:	f7ff f98b 	bl	80014e4 <calculate_pid.2>
		throttle = ibus_data[2];
 80021ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021d6:	889b      	ldrh	r3, [r3, #4]
 80021d8:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
		if (throttle > 1800)
 80021dc:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 80021e0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80021e4:	dd03      	ble.n	80021ee <main+0xa1e>
			throttle = 1800;
 80021e6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80021ea:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
		 *
		 * Each motor output is considered as a servomotor. As a result, value range is about 1000µs to 2000µs
		 */


		esc_1 = throttle + pid_output_pitch + pid_output_roll + pid_output_yaw; //Calculate the pulse for esc 1 (front-right - CCW).
 80021ee:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021fe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002202:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800220e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002212:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800221e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002222:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222e:	ee17 3a90 	vmov	r3, s15
 8002232:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
		esc_2 = throttle + pid_output_pitch - pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 2 (rear-right - CW).
 8002236:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002242:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002246:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800224a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800224e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002252:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002256:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800225a:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 800225e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002262:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002266:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800226a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800226e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002276:	ee17 3a90 	vmov	r3, s15
 800227a:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
		esc_3 = throttle - pid_output_pitch - pid_output_roll + pid_output_yaw; //Calculate the pulse for esc 3 (rear-left - CCW).
 800227e:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800228a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800228e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002292:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800229a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800229e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022a2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80022a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022ae:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022b2:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80022b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022be:	ee17 3a90 	vmov	r3, s15
 80022c2:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
		esc_4 = throttle - pid_output_pitch + pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 4 (front-left - CW).
 80022c6:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022d6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022da:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022e6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022ea:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80022ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022f6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022fa:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80022fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002306:	ee17 3a90 	vmov	r3, s15
 800230a:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0

		if (esc_1 < 1100)
 800230e:	f9b7 31d6 	ldrsh.w	r3, [r7, #470]	; 0x1d6
 8002312:	f240 424b 	movw	r2, #1099	; 0x44b
 8002316:	4293      	cmp	r3, r2
 8002318:	dc03      	bgt.n	8002322 <main+0xb52>
			esc_1 = 1100;                             //Keep the motors running.
 800231a:	f240 434c 	movw	r3, #1100	; 0x44c
 800231e:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
		if (esc_2 < 1100)
 8002322:	f9b7 31d4 	ldrsh.w	r3, [r7, #468]	; 0x1d4
 8002326:	f240 424b 	movw	r2, #1099	; 0x44b
 800232a:	4293      	cmp	r3, r2
 800232c:	dc03      	bgt.n	8002336 <main+0xb66>
			esc_2 = 1100;                             //Keep the motors running.
 800232e:	f240 434c 	movw	r3, #1100	; 0x44c
 8002332:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
		if (esc_3 < 1100)
 8002336:	f9b7 31d2 	ldrsh.w	r3, [r7, #466]	; 0x1d2
 800233a:	f240 424b 	movw	r2, #1099	; 0x44b
 800233e:	4293      	cmp	r3, r2
 8002340:	dc03      	bgt.n	800234a <main+0xb7a>
			esc_3 = 1100;                             //Keep the motors running.
 8002342:	f240 434c 	movw	r3, #1100	; 0x44c
 8002346:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
		if (esc_4 < 1100)
 800234a:	f9b7 31d0 	ldrsh.w	r3, [r7, #464]	; 0x1d0
 800234e:	f240 424b 	movw	r2, #1099	; 0x44b
 8002352:	4293      	cmp	r3, r2
 8002354:	dc03      	bgt.n	800235e <main+0xb8e>
			esc_4 = 1100;                             //Keep the motors running.
 8002356:	f240 434c 	movw	r3, #1100	; 0x44c
 800235a:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0

		if (esc_1 > 2000)
 800235e:	f9b7 31d6 	ldrsh.w	r3, [r7, #470]	; 0x1d6
 8002362:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002366:	dd03      	ble.n	8002370 <main+0xba0>
			esc_1 = 2000;                     //Limit the esc-1 pulse to 2000us.
 8002368:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800236c:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
		if (esc_2 > 2000)
 8002370:	f9b7 31d4 	ldrsh.w	r3, [r7, #468]	; 0x1d4
 8002374:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002378:	dd03      	ble.n	8002382 <main+0xbb2>
			esc_2 = 2000;                     //Limit the esc-2 pulse to 2000us.
 800237a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800237e:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
		if (esc_3 > 2000)
 8002382:	f9b7 31d2 	ldrsh.w	r3, [r7, #466]	; 0x1d2
 8002386:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800238a:	dd03      	ble.n	8002394 <main+0xbc4>
			esc_3 = 2000;                     //Limit the esc-3 pulse to 2000us.
 800238c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002390:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
		if (esc_4 > 2000)
 8002394:	f9b7 31d0 	ldrsh.w	r3, [r7, #464]	; 0x1d0
 8002398:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800239c:	dd03      	ble.n	80023a6 <main+0xbd6>
			esc_4 = 2000;                     //Limit the esc-4 pulse to 2000us.
 800239e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023a2:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0

		TIM2->CCR1 = esc_1; //Set the throttle receiver input pulse to the ESC 1 output pulse.
 80023a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023aa:	f9b7 31d6 	ldrsh.w	r3, [r7, #470]	; 0x1d6
 80023ae:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = esc_2; //Set the throttle receiver input pulse to the ESC 2 output pulse.
 80023b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b4:	f9b7 31d4 	ldrsh.w	r3, [r7, #468]	; 0x1d4
 80023b8:	6393      	str	r3, [r2, #56]	; 0x38
		TIM2->CCR3 = esc_3; //Set the throttle receiver input pulse to the ESC 3 output pulse.
 80023ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023be:	f9b7 31d2 	ldrsh.w	r3, [r7, #466]	; 0x1d2
 80023c2:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM2->CCR4 = esc_4; //Set the throttle receiver input pulse to the ESC 4 output pulse.
 80023c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c8:	f9b7 31d0 	ldrsh.w	r3, [r7, #464]	; 0x1d0
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40


		HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2104      	movs	r1, #4
 80023d2:	4811      	ldr	r0, [pc, #68]	; (8002418 <main+0xc48>)
 80023d4:	f002 f964 	bl	80046a0 <HAL_GPIO_WritePin>

		timex=TIM3->CNT-time1;       //how much time did it take the code to come here
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <main+0xc4c>)
 80023da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		while(TIM3->CNT-time1<=4000);
 80023e6:	bf00      	nop
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <main+0xc4c>)
 80023ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80023f6:	d9f7      	bls.n	80023e8 <main+0xc18>
		HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2104      	movs	r1, #4
 80023fc:	4806      	ldr	r0, [pc, #24]	; (8002418 <main+0xc48>)
 80023fe:	f002 f94f 	bl	80046a0 <HAL_GPIO_WritePin>
		time2=(TIM3->CNT-time1);
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <main+0xc4c>)
 8002404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002406:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		TIM3->CNT = 0;
 8002410:	e4ba      	b.n	8001d88 <main+0x5b8>
 8002412:	bf00      	nop
 8002414:	f3af 8000 	nop.w
 8002418:	48000400 	.word	0x48000400
 800241c:	40000400 	.word	0x40000400
 8002420:	66666666 	.word	0x66666666
 8002424:	3fe66666 	.word	0x3fe66666
 8002428:	33333333 	.word	0x33333333
 800242c:	3fd33333 	.word	0x3fd33333

08002430 <gyro_signalen.1>:
	void gyro_signalen() {
 8002430:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	4664      	mov	r4, ip
 800243a:	f8c7 c004 	str.w	ip, [r7, #4]
	    MPU6050_Read_All(&hi2c1, &GYRO);
 800243e:	f104 0318 	add.w	r3, r4, #24
 8002442:	4619      	mov	r1, r3
 8002444:	48da      	ldr	r0, [pc, #872]	; (80027b0 <gyro_signalen.1+0x380>)
 8002446:	f000 fb87 	bl	8002b58 <MPU6050_Read_All>
	    gyro_roll = (GYRO.Gx - GYRO.Gx_cal);
 800244a:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 800244e:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 8002452:	f7fd ff19 	bl	8000288 <__aeabi_dsub>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	e9c4 2304 	strd	r2, r3, [r4, #16]
	    gyro_pitch = (GYRO.Gy - GYRO.Gy_cal);
 800245e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002462:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8002466:	f7fd ff0f 	bl	8000288 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	    gyro_yaw = (GYRO.Gz - GYRO.Gz_cal);
 8002472:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8002476:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 800247a:	f7fd ff05 	bl	8000288 <__aeabi_dsub>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	e9c4 2300 	strd	r2, r3, [r4]
	    acc_x = GYRO.Ax;
 8002486:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fbab 	bl	8000be8 <__aeabi_d2f>
 8002492:	4603      	mov	r3, r0
 8002494:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	    acc_y = GYRO.Ay;
 8002498:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fba2 	bl	8000be8 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	    acc_z = GYRO.Az;
 80024aa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fb99 	bl	8000be8 <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	    angle_pitch += (float)gyro_pitch / 250;  // Calculate traveled pitch angle
 80024bc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb90 	bl	8000be8 <__aeabi_d2f>
 80024c8:	ee06 0a90 	vmov	s13, r0
 80024cc:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 80027b4 <gyro_signalen.1+0x384>
 80024d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d4:	ed94 7a29 	vldr	s14, [r4, #164]	; 0xa4
 80024d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024dc:	edc4 7a29 	vstr	s15, [r4, #164]	; 0xa4
	    angle_roll += (float)gyro_roll / 250;    // Calculate traveled roll angle
 80024e0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fb7e 	bl	8000be8 <__aeabi_d2f>
 80024ec:	ee06 0a90 	vmov	s13, r0
 80024f0:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80027b4 <gyro_signalen.1+0x384>
 80024f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f8:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
 80024fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002500:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
	    angle_pitch -= angle_roll * sin((float)gyro_yaw * 0.0000697778);  // Transfer roll angle to pitch angle if yawed
 8002504:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f81d 	bl	8000548 <__aeabi_f2d>
 800250e:	4680      	mov	r8, r0
 8002510:	4689      	mov	r9, r1
 8002512:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f816 	bl	8000548 <__aeabi_f2d>
 800251c:	4682      	mov	sl, r0
 800251e:	468b      	mov	fp, r1
 8002520:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f7fe fb5e 	bl	8000be8 <__aeabi_d2f>
 800252c:	4603      	mov	r3, r0
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f80a 	bl	8000548 <__aeabi_f2d>
 8002534:	a396      	add	r3, pc, #600	; (adr r3, 8002790 <gyro_signalen.1+0x360>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe f85d 	bl	80005f8 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	ec43 2b17 	vmov	d7, r2, r3
 8002546:	eeb0 0a47 	vmov.f32	s0, s14
 800254a:	eef0 0a67 	vmov.f32	s1, s15
 800254e:	f010 f8c3 	bl	80126d8 <sin>
 8002552:	ec53 2b10 	vmov	r2, r3, d0
 8002556:	4650      	mov	r0, sl
 8002558:	4659      	mov	r1, fp
 800255a:	f7fe f84d 	bl	80005f8 <__aeabi_dmul>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4640      	mov	r0, r8
 8002564:	4649      	mov	r1, r9
 8002566:	f7fd fe8f 	bl	8000288 <__aeabi_dsub>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb39 	bl	8000be8 <__aeabi_d2f>
 8002576:	4603      	mov	r3, r0
 8002578:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	    angle_roll += angle_pitch * sin((float)gyro_yaw * 0.0000697778);  // Transfer pitch angle to roll angle if yawed
 800257c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ffe1 	bl	8000548 <__aeabi_f2d>
 8002586:	4680      	mov	r8, r0
 8002588:	4689      	mov	r9, r1
 800258a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ffda 	bl	8000548 <__aeabi_f2d>
 8002594:	4682      	mov	sl, r0
 8002596:	468b      	mov	fp, r1
 8002598:	e9d4 2300 	ldrd	r2, r3, [r4]
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fb22 	bl	8000be8 <__aeabi_d2f>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ffce 	bl	8000548 <__aeabi_f2d>
 80025ac:	a378      	add	r3, pc, #480	; (adr r3, 8002790 <gyro_signalen.1+0x360>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f7fe f821 	bl	80005f8 <__aeabi_dmul>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b17 	vmov	d7, r2, r3
 80025be:	eeb0 0a47 	vmov.f32	s0, s14
 80025c2:	eef0 0a67 	vmov.f32	s1, s15
 80025c6:	f010 f887 	bl	80126d8 <sin>
 80025ca:	ec53 2b10 	vmov	r2, r3, d0
 80025ce:	4650      	mov	r0, sl
 80025d0:	4659      	mov	r1, fp
 80025d2:	f7fe f811 	bl	80005f8 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4640      	mov	r0, r8
 80025dc:	4649      	mov	r1, r9
 80025de:	f7fd fe55 	bl	800028c <__adddf3>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe fafd 	bl	8000be8 <__aeabi_d2f>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	    acc_total_vector = sqrt((acc_x * acc_x) + (acc_y * acc_y) + (acc_z * acc_z));  // Calculate total accelerometer vector
 80025f4:	ed94 7a2c 	vldr	s14, [r4, #176]	; 0xb0
 80025f8:	edd4 7a2c 	vldr	s15, [r4, #176]	; 0xb0
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	edd4 6a2b 	vldr	s13, [r4, #172]	; 0xac
 8002604:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002610:	edd4 6a2a 	vldr	s13, [r4, #168]	; 0xa8
 8002614:	edd4 7a2a 	vldr	s15, [r4, #168]	; 0xa8
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002620:	ee17 0a90 	vmov	r0, s15
 8002624:	f7fd ff90 	bl	8000548 <__aeabi_f2d>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	ec43 2b10 	vmov	d0, r2, r3
 8002630:	f010 f81a 	bl	8012668 <sqrt>
 8002634:	ec53 2b10 	vmov	r2, r3, d0
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fad4 	bl	8000be8 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	    if (abs(acc_y) < acc_total_vector) {
 8002646:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
 800264a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264e:	ee17 3a90 	vmov	r3, s15
 8002652:	2b00      	cmp	r3, #0
 8002654:	bfb8      	it	lt
 8002656:	425b      	neglt	r3, r3
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002660:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
 8002664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	dd1f      	ble.n	80026ae <gyro_signalen.1+0x27e>
	        angle_pitch_acc = asin((float)acc_y / acc_total_vector) * 57.295;  // Calculate pitch angle
 800266e:	ed94 7a2b 	vldr	s14, [r4, #172]	; 0xac
 8002672:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8002676:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800267a:	ee16 0a90 	vmov	r0, s13
 800267e:	f7fd ff63 	bl	8000548 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	ec43 2b10 	vmov	d0, r2, r3
 800268a:	f00f ffb9 	bl	8012600 <asin>
 800268e:	ec51 0b10 	vmov	r0, r1, d0
 8002692:	a341      	add	r3, pc, #260	; (adr r3, 8002798 <gyro_signalen.1+0x368>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f7fd ffae 	bl	80005f8 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f7fe faa0 	bl	8000be8 <__aeabi_d2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	    if (abs(acc_x) < acc_total_vector) {
 80026ae:	edd4 7a2c 	vldr	s15, [r4, #176]	; 0xb0
 80026b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b6:	ee17 3a90 	vmov	r3, s15
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfb8      	it	lt
 80026be:	425b      	neglt	r3, r3
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c8:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
 80026cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	dd1f      	ble.n	8002716 <gyro_signalen.1+0x2e6>
	        angle_roll_acc = asin((float)acc_x / acc_total_vector) * 57.295;   // Calculate roll angle
 80026d6:	ed94 7a2c 	vldr	s14, [r4, #176]	; 0xb0
 80026da:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 80026de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026e2:	ee16 0a90 	vmov	r0, s13
 80026e6:	f7fd ff2f 	bl	8000548 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	ec43 2b10 	vmov	d0, r2, r3
 80026f2:	f00f ff85 	bl	8012600 <asin>
 80026f6:	ec51 0b10 	vmov	r0, r1, d0
 80026fa:	a327      	add	r3, pc, #156	; (adr r3, 8002798 <gyro_signalen.1+0x368>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fd ff7a 	bl	80005f8 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa6c 	bl	8000be8 <__aeabi_d2f>
 8002710:	4603      	mov	r3, r0
 8002712:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	    angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;  // Correct gyro drift in pitch angle
 8002716:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff14 	bl	8000548 <__aeabi_f2d>
 8002720:	a31f      	add	r3, pc, #124	; (adr r3, 80027a0 <gyro_signalen.1+0x370>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fd ff67 	bl	80005f8 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4690      	mov	r8, r2
 8002730:	4699      	mov	r9, r3
 8002732:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff06 	bl	8000548 <__aeabi_f2d>
 800273c:	a31a      	add	r3, pc, #104	; (adr r3, 80027a8 <gyro_signalen.1+0x378>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f7fd ff59 	bl	80005f8 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4640      	mov	r0, r8
 800274c:	4649      	mov	r1, r9
 800274e:	f7fd fd9d 	bl	800028c <__adddf3>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f7fe fa45 	bl	8000be8 <__aeabi_d2f>
 800275e:	4603      	mov	r3, r0
 8002760:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	    angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;     // Correct gyro drift in roll angle
 8002764:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd feed 	bl	8000548 <__aeabi_f2d>
 800276e:	a30c      	add	r3, pc, #48	; (adr r3, 80027a0 <gyro_signalen.1+0x370>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fd ff40 	bl	80005f8 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4690      	mov	r8, r2
 800277e:	4699      	mov	r9, r3
 8002780:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fedf 	bl	8000548 <__aeabi_f2d>
 800278a:	e015      	b.n	80027b8 <gyro_signalen.1+0x388>
 800278c:	f3af 8000 	nop.w
 8002790:	79d7aee9 	.word	0x79d7aee9
 8002794:	3f124ab5 	.word	0x3f124ab5
 8002798:	8f5c28f6 	.word	0x8f5c28f6
 800279c:	404ca5c2 	.word	0x404ca5c2
 80027a0:	23a29c78 	.word	0x23a29c78
 80027a4:	3feffcb9 	.word	0x3feffcb9
 80027a8:	eb1c432d 	.word	0xeb1c432d
 80027ac:	3f3a36e2 	.word	0x3f3a36e2
 80027b0:	20000394 	.word	0x20000394
 80027b4:	437a0000 	.word	0x437a0000
 80027b8:	a326      	add	r3, pc, #152	; (adr r3, 8002854 <gyro_signalen.1+0x424>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd ff1b 	bl	80005f8 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4640      	mov	r0, r8
 80027c8:	4649      	mov	r1, r9
 80027ca:	f7fd fd5f 	bl	800028c <__adddf3>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe fa07 	bl	8000be8 <__aeabi_d2f>
 80027da:	4603      	mov	r3, r0
 80027dc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	    pitch_level_adjust = angle_pitch * 15;  // Calculate pitch angle correction
 80027e0:	edd4 7a29 	vldr	s15, [r4, #164]	; 0xa4
 80027e4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80027e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ec:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
	    roll_level_adjust = angle_roll * 15;     // Calculate roll angle correction
 80027f0:	edd4 7a28 	vldr	s15, [r4, #160]	; 0xa0
 80027f4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80027f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fc:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	    sprintf(buf, "angle_roll = %d angle_pitch = %d \n", (int)angle_roll, (int)angle_pitch);
 8002800:	f204 1027 	addw	r0, r4, #295	; 0x127
 8002804:	edd4 7a28 	vldr	s15, [r4, #160]	; 0xa0
 8002808:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800280c:	edd4 7a29 	vldr	s15, [r4, #164]	; 0xa4
 8002810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002814:	ee17 3a90 	vmov	r3, s15
 8002818:	ee17 2a10 	vmov	r2, s14
 800281c:	490c      	ldr	r1, [pc, #48]	; (8002850 <gyro_signalen.1+0x420>)
 800281e:	f00c fa4f 	bl	800ecc0 <siprintf>
	    int size = strlen(buf);
 8002822:	f204 1327 	addw	r3, r4, #295	; 0x127
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fd22 	bl	8000270 <strlen>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
	    CDC_Transmit_FS((uint8_t*)buf, size);
 8002830:	f204 1327 	addw	r3, r4, #295	; 0x127
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	b292      	uxth	r2, r2
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f00a fd6a 	bl	800d314 <CDC_Transmit_FS>
	}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 8f90 	ldmia.w	sp!, {r4, r7, r8, r9, sl, fp, pc}
 800284a:	bf00      	nop
 800284c:	f3af 8000 	nop.w
 8002850:	08013d8c 	.word	0x08013d8c
 8002854:	eb1c432d 	.word	0xeb1c432d
 8002858:	3f3a36e2 	.word	0x3f3a36e2

0800285c <error_signal.0>:
	void error_signal(void) {
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4664      	mov	r4, ip
 8002864:	f8c7 c004 	str.w	ip, [r7, #4]
		if (error >= 100)
 8002868:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 800286c:	2b63      	cmp	r3, #99	; 0x63
 800286e:	d905      	bls.n	800287c <error_signal.0+0x20>
			HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);         //When the error is 100 the LED is always on.
 8002870:	2201      	movs	r2, #1
 8002872:	2104      	movs	r1, #4
 8002874:	4824      	ldr	r0, [pc, #144]	; (8002908 <error_signal.0+0xac>)
 8002876:	f001 ff13 	bl	80046a0 <HAL_GPIO_WritePin>
	}
 800287a:	e040      	b.n	80028fe <error_signal.0+0xa2>
		else if (error_timer < HAL_GetTick()) { //If the error_timer value is smaller that the millis() function.
 800287c:	f001 fa2c 	bl	8003cd8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002886:	4293      	cmp	r3, r2
 8002888:	d239      	bcs.n	80028fe <error_signal.0+0xa2>
			error_timer = HAL_GetTick() + 250; //Set the next error_timer interval at 250ms.
 800288a:	f001 fa25 	bl	8003cd8 <HAL_GetTick>
 800288e:	4603      	mov	r3, r0
 8002890:	33fa      	adds	r3, #250	; 0xfa
 8002892:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			if (error > 0 && error_counter > error + 3)
 8002896:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <error_signal.0+0x58>
 800289e:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 80028a2:	461a      	mov	r2, r3
 80028a4:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80028a8:	3303      	adds	r3, #3
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dd02      	ble.n	80028b4 <error_signal.0+0x58>
				error_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 80028ae:	2300      	movs	r3, #0
 80028b0:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
			if (error_counter < error && error_led == 0 && error > 0) { //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 80028b4:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80028b8:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80028bc:	429a      	cmp	r2, r3
 80028be:	d210      	bcs.n	80028e2 <error_signal.0+0x86>
 80028c0:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10c      	bne.n	80028e2 <error_signal.0+0x86>
 80028c8:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <error_signal.0+0x86>
				HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);                                //Turn the LED on.
 80028d0:	2201      	movs	r2, #1
 80028d2:	2104      	movs	r1, #4
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <error_signal.0+0xac>)
 80028d6:	f001 fee3 	bl	80046a0 <HAL_GPIO_WritePin>
				error_led = 1; //Set the LED flag to indicate that the LED is on.
 80028da:	2301      	movs	r3, #1
 80028dc:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	}
 80028e0:	e00d      	b.n	80028fe <error_signal.0+0xa2>
				HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);                                //Turn the LED off.
 80028e2:	2200      	movs	r2, #0
 80028e4:	2104      	movs	r1, #4
 80028e6:	4808      	ldr	r0, [pc, #32]	; (8002908 <error_signal.0+0xac>)
 80028e8:	f001 feda 	bl	80046a0 <HAL_GPIO_WritePin>
				error_counter++; //Increment the error_counter variable by 1 to keep trach of the flashes.
 80028ec:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
				error_led = 0; //Set the LED flag to indicate that the LED is off.
 80028f8:	2300      	movs	r3, #0
 80028fa:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	bf00      	nop
 8002908:	48000400 	.word	0x48000400

0800290c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b096      	sub	sp, #88	; 0x58
 8002910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	2244      	movs	r2, #68	; 0x44
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f00c fa33 	bl	800ed86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800292e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002932:	f003 feab 	bl	800668c <HAL_PWREx_ControlVoltageScaling>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800293c:	f000 f848 	bl	80029d0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002940:	f003 fe86 	bl	8006650 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <SystemClock_Config+0xc0>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a20      	ldr	r2, [pc, #128]	; (80029cc <SystemClock_Config+0xc0>)
 800294c:	f023 0318 	bic.w	r3, r3, #24
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002954:	2314      	movs	r3, #20
 8002956:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002958:	2301      	movs	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002964:	2360      	movs	r3, #96	; 0x60
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002968:	2302      	movs	r3, #2
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800296c:	2301      	movs	r3, #1
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002974:	2328      	movs	r3, #40	; 0x28
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002978:	2307      	movs	r3, #7
 800297a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800297c:	2302      	movs	r3, #2
 800297e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002980:	2302      	movs	r3, #2
 8002982:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fee5 	bl	8006758 <HAL_RCC_OscConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002994:	f000 f81c 	bl	80029d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002998:	230f      	movs	r3, #15
 800299a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299c:	2303      	movs	r3, #3
 800299e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029ac:	463b      	mov	r3, r7
 80029ae:	2104      	movs	r1, #4
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 faad 	bl	8006f10 <HAL_RCC_ClockConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80029bc:	f000 f808 	bl	80029d0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80029c0:	f004 ffb4 	bl	800792c <HAL_RCCEx_EnableMSIPLLMode>
}
 80029c4:	bf00      	nop
 80029c6:	3758      	adds	r7, #88	; 0x58
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000

080029d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d4:	b672      	cpsid	i
}
 80029d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029d8:	e7fe      	b.n	80029d8 <Error_Handler+0x8>

080029da <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80029da:	b580      	push	{r7, lr}
 80029dc:	b088      	sub	sp, #32
 80029de:	af04      	add	r7, sp, #16
 80029e0:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80029e2:	2364      	movs	r3, #100	; 0x64
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	f107 030f 	add.w	r3, r7, #15
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2301      	movs	r3, #1
 80029f2:	2275      	movs	r2, #117	; 0x75
 80029f4:	21d0      	movs	r1, #208	; 0xd0
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f002 f81a 	bl	8004a30 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b68      	cmp	r3, #104	; 0x68
 8002a00:	d13d      	bne.n	8002a7e <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002a06:	2364      	movs	r3, #100	; 0x64
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	f107 030e 	add.w	r3, r7, #14
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2301      	movs	r3, #1
 8002a16:	226b      	movs	r2, #107	; 0x6b
 8002a18:	21d0      	movs	r1, #208	; 0xd0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f001 fef4 	bl	8004808 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002a20:	2307      	movs	r3, #7
 8002a22:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002a24:	2364      	movs	r3, #100	; 0x64
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f107 030e 	add.w	r3, r7, #14
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	2219      	movs	r2, #25
 8002a36:	21d0      	movs	r1, #208	; 0xd0
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f001 fee5 	bl	8004808 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002a42:	2364      	movs	r3, #100	; 0x64
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	2301      	movs	r3, #1
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	f107 030e 	add.w	r3, r7, #14
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2301      	movs	r3, #1
 8002a52:	221c      	movs	r2, #28
 8002a54:	21d0      	movs	r1, #208	; 0xd0
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f001 fed6 	bl	8004808 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002a60:	2364      	movs	r3, #100	; 0x64
 8002a62:	9302      	str	r3, [sp, #8]
 8002a64:	2301      	movs	r3, #1
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	f107 030e 	add.w	r3, r7, #14
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	221b      	movs	r2, #27
 8002a72:	21d0      	movs	r1, #208	; 0xd0
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f001 fec7 	bl	8004808 <HAL_I2C_Mem_Write>
        return 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <MPU6050_Init+0xa6>
    }
    return 1;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}


void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af04      	add	r7, sp, #16
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002a92:	2364      	movs	r3, #100	; 0x64
 8002a94:	9302      	str	r3, [sp, #8]
 8002a96:	2306      	movs	r3, #6
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	2243      	movs	r2, #67	; 0x43
 8002aa4:	21d0      	movs	r1, #208	; 0xd0
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f001 ffc2 	bl	8004a30 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002aac:	7a3b      	ldrb	r3, [r7, #8]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	7a7b      	ldrb	r3, [r7, #9]
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002abe:	7abb      	ldrb	r3, [r7, #10]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	b21b      	sxth	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002ad0:	7b3b      	ldrb	r3, [r7, #12]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	b21a      	sxth	r2, r3
 8002ad6:	7b7b      	ldrb	r3, [r7, #13]
 8002ad8:	b21b      	sxth	r3, r3
 8002ada:	4313      	orrs	r3, r2
 8002adc:	b21a      	sxth	r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd1b 	bl	8000524 <__aeabi_i2d>
 8002aee:	a318      	add	r3, pc, #96	; (adr r3, 8002b50 <MPU6050_Read_Gyro+0xc8>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd feaa 	bl	800084c <__aeabi_ddiv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fd0b 	bl	8000524 <__aeabi_i2d>
 8002b0e:	a310      	add	r3, pc, #64	; (adr r3, 8002b50 <MPU6050_Read_Gyro+0xc8>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f7fd fe9a 	bl	800084c <__aeabi_ddiv>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fcfb 	bl	8000524 <__aeabi_i2d>
 8002b2e:	a308      	add	r3, pc, #32	; (adr r3, 8002b50 <MPU6050_Read_Gyro+0xc8>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fe8a 	bl	800084c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	f3af 8000 	nop.w
 8002b50:	00000000 	.word	0x00000000
 8002b54:	40606000 	.word	0x40606000

08002b58 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b5c:	b092      	sub	sp, #72	; 0x48
 8002b5e:	af04      	add	r7, sp, #16
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002b64:	2364      	movs	r3, #100	; 0x64
 8002b66:	9302      	str	r3, [sp, #8]
 8002b68:	230e      	movs	r3, #14
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2301      	movs	r3, #1
 8002b74:	223b      	movs	r2, #59	; 0x3b
 8002b76:	21d0      	movs	r1, #208	; 0xd0
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f001 ff59 	bl	8004a30 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002b7e:	7b3b      	ldrb	r3, [r7, #12]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	b21a      	sxth	r2, r3
 8002b84:	7b7b      	ldrb	r3, [r7, #13]
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002b90:	7bbb      	ldrb	r3, [r7, #14]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002ba2:	7c3b      	ldrb	r3, [r7, #16]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	7c7b      	ldrb	r3, [r7, #17]
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002bb4:	7cbb      	ldrb	r3, [r7, #18]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002bc2:	7d3b      	ldrb	r3, [r7, #20]
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	b21a      	sxth	r2, r3
 8002bc8:	7d7b      	ldrb	r3, [r7, #21]
 8002bca:	b21b      	sxth	r3, r3
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002bd4:	7dbb      	ldrb	r3, [r7, #22]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	b21b      	sxth	r3, r3
 8002bde:	4313      	orrs	r3, r2
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002be6:	7e3b      	ldrb	r3, [r7, #24]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	7e7b      	ldrb	r3, [r7, #25]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc90 	bl	8000524 <__aeabi_i2d>
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	4bbb      	ldr	r3, [pc, #748]	; (8002ef8 <MPU6050_Read_All+0x3a0>)
 8002c0a:	f7fd fe1f 	bl	800084c <__aeabi_ddiv>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fc80 	bl	8000524 <__aeabi_i2d>
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	4bb3      	ldr	r3, [pc, #716]	; (8002ef8 <MPU6050_Read_All+0x3a0>)
 8002c2a:	f7fd fe0f 	bl	800084c <__aeabi_ddiv>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc70 	bl	8000524 <__aeabi_i2d>
 8002c44:	a3a6      	add	r3, pc, #664	; (adr r3, 8002ee0 <MPU6050_Read_All+0x388>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fdff 	bl	800084c <__aeabi_ddiv>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002c58:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c64:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8002efc <MPU6050_Read_All+0x3a4>
 8002c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6c:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002f00 <MPU6050_Read_All+0x3a8>
 8002c70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc4f 	bl	8000524 <__aeabi_i2d>
 8002c86:	a398      	add	r3, pc, #608	; (adr r3, 8002ee8 <MPU6050_Read_All+0x390>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd fdde 	bl	800084c <__aeabi_ddiv>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc3f 	bl	8000524 <__aeabi_i2d>
 8002ca6:	a390      	add	r3, pc, #576	; (adr r3, 8002ee8 <MPU6050_Read_All+0x390>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fdce 	bl	800084c <__aeabi_ddiv>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc2f 	bl	8000524 <__aeabi_i2d>
 8002cc6:	a388      	add	r3, pc, #544	; (adr r3, 8002ee8 <MPU6050_Read_All+0x390>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fdbe 	bl	800084c <__aeabi_ddiv>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	6839      	ldr	r1, [r7, #0]
 8002cd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002cda:	f000 fffd 	bl	8003cd8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <MPU6050_Read_All+0x3ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fc0c 	bl	8000504 <__aeabi_ui2d>
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	4b85      	ldr	r3, [pc, #532]	; (8002f08 <MPU6050_Read_All+0x3b0>)
 8002cf2:	f7fd fdab 	bl	800084c <__aeabi_ddiv>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    timer = HAL_GetTick();
 8002cfe:	f000 ffeb 	bl	8003cd8 <HAL_GetTick>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a7f      	ldr	r2, [pc, #508]	; (8002f04 <MPU6050_Read_All+0x3ac>)
 8002d06:	6013      	str	r3, [r2, #0]
    float acc_total_vector = sqrt((DataStruct->Ax * DataStruct->Ax) + (DataStruct->Ay * DataStruct->Ay) + (DataStruct->Az * DataStruct->Az)); // Calculate the total accelerometer vector.
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d14:	f7fd fc70 	bl	80005f8 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4692      	mov	sl, r2
 8002d1e:	469b      	mov	fp, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d2c:	f7fd fc64 	bl	80005f8 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4650      	mov	r0, sl
 8002d36:	4659      	mov	r1, fp
 8002d38:	f7fd faa8 	bl	800028c <__adddf3>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4692      	mov	sl, r2
 8002d42:	469b      	mov	fp, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d50:	f7fd fc52 	bl	80005f8 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4650      	mov	r0, sl
 8002d5a:	4659      	mov	r1, fp
 8002d5c:	f7fd fa96 	bl	800028c <__adddf3>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	ec43 2b17 	vmov	d7, r2, r3
 8002d68:	eeb0 0a47 	vmov.f32	s0, s14
 8002d6c:	eef0 0a67 	vmov.f32	s1, s15
 8002d70:	f00f fc7a 	bl	8012668 <sqrt>
 8002d74:	ec53 2b10 	vmov	r2, r3, d0
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd ff34 	bl	8000be8 <__aeabi_d2f>
 8002d80:	4603      	mov	r3, r0
 8002d82:	61fb      	str	r3, [r7, #28]
    float angle_pitch_acc = 0.0;
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
    float angle_roll_acc = 0.0;
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30

    if (fabsf(DataStruct->Ay) < acc_total_vector) { // Prevent the asin function from producing a NaN.
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff25 	bl	8000be8 <__aeabi_d2f>
 8002d9e:	ee07 0a90 	vmov	s15, r0
 8002da2:	eef0 7ae7 	vabs.f32	s15, s15
 8002da6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	dd24      	ble.n	8002dfe <MPU6050_Read_All+0x2a6>
        angle_pitch_acc = asin(DataStruct->Ay / acc_total_vector) * RAD_TO_DEG; // Calculate the pitch angle.
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8002dba:	69f8      	ldr	r0, [r7, #28]
 8002dbc:	f7fd fbc4 	bl	8000548 <__aeabi_f2d>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4650      	mov	r0, sl
 8002dc6:	4659      	mov	r1, fp
 8002dc8:	f7fd fd40 	bl	800084c <__aeabi_ddiv>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	ec43 2b17 	vmov	d7, r2, r3
 8002dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002dd8:	eef0 0a67 	vmov.f32	s1, s15
 8002ddc:	f00f fc10 	bl	8012600 <asin>
 8002de0:	ec51 0b10 	vmov	r0, r1, d0
 8002de4:	a342      	add	r3, pc, #264	; (adr r3, 8002ef0 <MPU6050_Read_All+0x398>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fc05 	bl	80005f8 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd fef7 	bl	8000be8 <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (fabsf(DataStruct->Ax) < acc_total_vector) { // Prevent the asin function from producing a NaN.
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7fd feee 	bl	8000be8 <__aeabi_d2f>
 8002e0c:	ee07 0a90 	vmov	s15, r0
 8002e10:	eef0 7ae7 	vabs.f32	s15, s15
 8002e14:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e20:	dd24      	ble.n	8002e6c <MPU6050_Read_All+0x314>
        angle_roll_acc = asin(DataStruct->Ax / acc_total_vector) * RAD_TO_DEG; // Calculate the roll angle.
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8002e28:	69f8      	ldr	r0, [r7, #28]
 8002e2a:	f7fd fb8d 	bl	8000548 <__aeabi_f2d>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4650      	mov	r0, sl
 8002e34:	4659      	mov	r1, fp
 8002e36:	f7fd fd09 	bl	800084c <__aeabi_ddiv>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	ec43 2b17 	vmov	d7, r2, r3
 8002e42:	eeb0 0a47 	vmov.f32	s0, s14
 8002e46:	eef0 0a67 	vmov.f32	s1, s15
 8002e4a:	f00f fbd9 	bl	8012600 <asin>
 8002e4e:	ec51 0b10 	vmov	r0, r1, d0
 8002e52:	a327      	add	r3, pc, #156	; (adr r3, 8002ef0 <MPU6050_Read_All+0x398>)
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f7fd fbce 	bl	80005f8 <__aeabi_dmul>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	f7fd fec0 	bl	8000be8 <__aeabi_d2f>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	633b      	str	r3, [r7, #48]	; 0x30
    }



    if ((angle_pitch_acc < -90 && DataStruct->KalmanAngleY > 90) || (angle_pitch_acc > 90 && DataStruct->KalmanAngleY < -90)) {
 8002e6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e70:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f0c <MPU6050_Read_All+0x3b4>
 8002e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d50a      	bpl.n	8002e94 <MPU6050_Read_All+0x33c>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <MPU6050_Read_All+0x3b8>)
 8002e8a:	f7fd fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d113      	bne.n	8002ebc <MPU6050_Read_All+0x364>
 8002e94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e98:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002f14 <MPU6050_Read_All+0x3bc>
 8002e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	dd3c      	ble.n	8002f20 <MPU6050_Read_All+0x3c8>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <MPU6050_Read_All+0x3c0>)
 8002eb2:	f7fd fe13 	bl	8000adc <__aeabi_dcmplt>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d031      	beq.n	8002f20 <MPU6050_Read_All+0x3c8>
        KalmanY.angle = angle_pitch_acc;
 8002ebc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ebe:	f7fd fb43 	bl	8000548 <__aeabi_f2d>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4915      	ldr	r1, [pc, #84]	; (8002f1c <MPU6050_Read_All+0x3c4>)
 8002ec8:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = angle_pitch_acc;
 8002ecc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ece:	f7fd fb3b 	bl	8000548 <__aeabi_f2d>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002edc:	e043      	b.n	8002f66 <MPU6050_Read_All+0x40e>
 8002ede:	bf00      	nop
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40cc2900 	.word	0x40cc2900
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40606000 	.word	0x40606000
 8002ef0:	1a63c1f8 	.word	0x1a63c1f8
 8002ef4:	404ca5dc 	.word	0x404ca5dc
 8002ef8:	40d00000 	.word	0x40d00000
 8002efc:	43aa0000 	.word	0x43aa0000
 8002f00:	42121eb8 	.word	0x42121eb8
 8002f04:	2000040c 	.word	0x2000040c
 8002f08:	408f4000 	.word	0x408f4000
 8002f0c:	c2b40000 	.word	0xc2b40000
 8002f10:	40568000 	.word	0x40568000
 8002f14:	42b40000 	.word	0x42b40000
 8002f18:	c0568000 	.word	0xc0568000
 8002f1c:	20000048 	.word	0x20000048
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, angle_pitch_acc, (DataStruct->Gy-DataStruct->Gy_cal), dt);
 8002f20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f22:	f7fd fb11 	bl	8000548 <__aeabi_f2d>
 8002f26:	4682      	mov	sl, r0
 8002f28:	468b      	mov	fp, r1
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002f36:	f7fd f9a7 	bl	8000288 <__aeabi_dsub>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	ec43 2b17 	vmov	d7, r2, r3
 8002f42:	ed97 2b08 	vldr	d2, [r7, #32]
 8002f46:	eeb0 1a47 	vmov.f32	s2, s14
 8002f4a:	eef0 1a67 	vmov.f32	s3, s15
 8002f4e:	ec4b ab10 	vmov	d0, sl, fp
 8002f52:	4825      	ldr	r0, [pc, #148]	; (8002fe8 <MPU6050_Read_All+0x490>)
 8002f54:	f000 f84e 	bl	8002ff4 <Kalman_getAngle>
 8002f58:	eeb0 7a40 	vmov.f32	s14, s0
 8002f5c:	eef0 7a60 	vmov.f32	s15, s1
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
    }


    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f6c:	4690      	mov	r8, r2
 8002f6e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <MPU6050_Read_All+0x494>)
 8002f78:	4640      	mov	r0, r8
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	f7fd fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <MPU6050_Read_All+0x440>
        DataStruct->Gx = -DataStruct->Gx;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f8c:	4614      	mov	r4, r2
 8002f8e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28


    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX,  angle_roll_acc, (DataStruct->Gx-DataStruct->Gx_cal), dt);
 8002f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f9a:	f7fd fad5 	bl	8000548 <__aeabi_f2d>
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	460d      	mov	r5, r1
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002fae:	f7fd f96b 	bl	8000288 <__aeabi_dsub>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	ec43 2b17 	vmov	d7, r2, r3
 8002fba:	ed97 2b08 	vldr	d2, [r7, #32]
 8002fbe:	eeb0 1a47 	vmov.f32	s2, s14
 8002fc2:	eef0 1a67 	vmov.f32	s3, s15
 8002fc6:	ec45 4b10 	vmov	d0, r4, r5
 8002fca:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <MPU6050_Read_All+0x498>)
 8002fcc:	f000 f812 	bl	8002ff4 <Kalman_getAngle>
 8002fd0:	eeb0 7a40 	vmov.f32	s14, s0
 8002fd4:	eef0 7a60 	vmov.f32	s15, s1
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

}
 8002fde:	bf00      	nop
 8002fe0:	3738      	adds	r7, #56	; 0x38
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe8:	20000048 	.word	0x20000048
 8002fec:	40568000 	.word	0x40568000
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002ff4:	b5b0      	push	{r4, r5, r7, lr}
 8002ff6:	b096      	sub	sp, #88	; 0x58
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	61f8      	str	r0, [r7, #28]
 8002ffc:	ed87 0b04 	vstr	d0, [r7, #16]
 8003000:	ed87 1b02 	vstr	d1, [r7, #8]
 8003004:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800300e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003012:	f7fd f939 	bl	8000288 <__aeabi_dsub>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800302c:	f7fd fae4 	bl	80005f8 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd f928 	bl	800028c <__adddf3>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	69f9      	ldr	r1, [r7, #28]
 8003042:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003056:	f7fd facf 	bl	80005f8 <__aeabi_dmul>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003068:	f7fd f90e 	bl	8000288 <__aeabi_dsub>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800307a:	f7fd f905 	bl	8000288 <__aeabi_dsub>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f7fd f8fe 	bl	800028c <__adddf3>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800309c:	f7fd faac 	bl	80005f8 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd f8f0 	bl	800028c <__adddf3>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	69f9      	ldr	r1, [r7, #28]
 80030b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80030c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c6:	f7fd fa97 	bl	80005f8 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4620      	mov	r0, r4
 80030d0:	4629      	mov	r1, r5
 80030d2:	f7fd f8d9 	bl	8000288 <__aeabi_dsub>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	69f9      	ldr	r1, [r7, #28]
 80030dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80030ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030f0:	f7fd fa82 	bl	80005f8 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4620      	mov	r0, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7fd f8c4 	bl	8000288 <__aeabi_dsub>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	69f9      	ldr	r1, [r7, #28]
 8003106:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311a:	f7fd fa6d 	bl	80005f8 <__aeabi_dmul>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4620      	mov	r0, r4
 8003124:	4629      	mov	r1, r5
 8003126:	f7fd f8b1 	bl	800028c <__adddf3>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	69f9      	ldr	r1, [r7, #28]
 8003130:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003140:	f7fd f8a4 	bl	800028c <__adddf3>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003152:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003156:	f7fd fb79 	bl	800084c <__aeabi_ddiv>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800316c:	f7fd fb6e 	bl	800084c <__aeabi_ddiv>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800317e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003182:	f7fd f881 	bl	8000288 <__aeabi_dsub>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003194:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003198:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800319c:	f7fd fa2c 	bl	80005f8 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4620      	mov	r0, r4
 80031a6:	4629      	mov	r1, r5
 80031a8:	f7fd f870 	bl	800028c <__adddf3>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	69f9      	ldr	r1, [r7, #28]
 80031b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80031bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031c4:	f7fd fa18 	bl	80005f8 <__aeabi_dmul>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4620      	mov	r0, r4
 80031ce:	4629      	mov	r1, r5
 80031d0:	f7fd f85c 	bl	800028c <__adddf3>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	69f9      	ldr	r1, [r7, #28]
 80031da:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80031e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80031ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80031f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003200:	f7fd f9fa 	bl	80005f8 <__aeabi_dmul>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4620      	mov	r0, r4
 800320a:	4629      	mov	r1, r5
 800320c:	f7fd f83c 	bl	8000288 <__aeabi_dsub>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	69f9      	ldr	r1, [r7, #28]
 8003216:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003220:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003224:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003228:	f7fd f9e6 	bl	80005f8 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fd f828 	bl	8000288 <__aeabi_dsub>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	69f9      	ldr	r1, [r7, #28]
 800323e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003248:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800324c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003250:	f7fd f9d2 	bl	80005f8 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4620      	mov	r0, r4
 800325a:	4629      	mov	r1, r5
 800325c:	f7fd f814 	bl	8000288 <__aeabi_dsub>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	69f9      	ldr	r1, [r7, #28]
 8003266:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003270:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003274:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003278:	f7fd f9be 	bl	80005f8 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4620      	mov	r0, r4
 8003282:	4629      	mov	r1, r5
 8003284:	f7fd f800 	bl	8000288 <__aeabi_dsub>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	69f9      	ldr	r1, [r7, #28]
 800328e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003298:	ec43 2b17 	vmov	d7, r2, r3
};
 800329c:	eeb0 0a47 	vmov.f32	s0, s14
 80032a0:	eef0 0a67 	vmov.f32	s1, s15
 80032a4:	3758      	adds	r7, #88	; 0x58
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080032ac <MPU6050_Calibrate>:



void MPU6050_Calibrate(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct,uint8_t gyro_manual){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	71fb      	strb	r3, [r7, #7]
	int cal_int = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
	if (gyro_manual)
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d018      	beq.n	80032f6 <MPU6050_Calibrate+0x4a>
		{
			cal_int = 2000;                                          //If manual calibration is used set cal_int to 2000 to skip the calibration.
 80032c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80032c8:	617b      	str	r3, [r7, #20]
			DataStruct->Gx_cal = 0;                                                            //Divide the roll total by 2000.
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			DataStruct->Gy_cal = 0;                                                           //Divide the pitch total by 2000.
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	        DataStruct->Gz_cal = 0;
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	        DataStruct->Gx_cal /= 2000;                                                            //Divide the roll total by 2000.
	        DataStruct->Gy_cal /= 2000;                                                           //Divide the pitch total by 2000.
	        DataStruct->Gz_cal /= 2000;                                                             //Divide the yaw total by 2000.
	      }
	  }
}
 80032f4:	e079      	b.n	80033ea <MPU6050_Calibrate+0x13e>
	    cal_int = 0;                                                                      //If manual calibration is not used.
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
	    DataStruct->Gx_cal = 0; //Set the manual pitch calibration variable to 0.
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	    DataStruct->Gy_cal = 0; //Set the manual roll calibration variable to 0.
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	    DataStruct->Gz_cal = 0; //Set the manual yaw calibration variable to 0.
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	    if (cal_int != 2000) {
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800332a:	d05e      	beq.n	80033ea <MPU6050_Calibrate+0x13e>
	        for (cal_int = 0; cal_int < 2000 ; cal_int ++) {                                  //Take 2000 readings for calibration.
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e030      	b.n	8003394 <MPU6050_Calibrate+0xe8>
	          MPU6050_Read_Gyro(I2Cx, DataStruct);                                                               //Read the gyro output.
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff fba7 	bl	8002a88 <MPU6050_Read_Gyro>
	          DataStruct->Gx_cal +=DataStruct->Gx;                                                     //Ad roll value to gyro_roll_cal.
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003346:	f7fc ffa1 	bl	800028c <__adddf3>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	          DataStruct->Gy_cal += DataStruct->Gy;                                                   //Ad pitch value to gyro_pitch_cal.
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003360:	f7fc ff94 	bl	800028c <__adddf3>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	          DataStruct->Gz_cal += DataStruct->Gz;                                                       //Ad yaw value to gyro_yaw_cal.
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800337a:	f7fc ff87 	bl	800028c <__adddf3>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	          HAL_Delay(4);                                                                       //Small delay to simulate a 250Hz loop during calibration.
 8003388:	2004      	movs	r0, #4
 800338a:	f000 fcb1 	bl	8003cf0 <HAL_Delay>
	        for (cal_int = 0; cal_int < 2000 ; cal_int ++) {                                  //Take 2000 readings for calibration.
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3301      	adds	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800339a:	dbca      	blt.n	8003332 <MPU6050_Calibrate+0x86>
	        DataStruct->Gx_cal /= 2000;                                                            //Divide the roll total by 2000.
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <MPU6050_Calibrate+0x148>)
 80033a8:	f7fd fa50 	bl	800084c <__aeabi_ddiv>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	        DataStruct->Gy_cal /= 2000;                                                           //Divide the pitch total by 2000.
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <MPU6050_Calibrate+0x148>)
 80033c2:	f7fd fa43 	bl	800084c <__aeabi_ddiv>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	        DataStruct->Gz_cal /= 2000;                                                             //Divide the yaw total by 2000.
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MPU6050_Calibrate+0x148>)
 80033dc:	f7fd fa36 	bl	800084c <__aeabi_ddiv>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	409f4000 	.word	0x409f4000

080033f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_MspInit+0x44>)
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_MspInit+0x44>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6613      	str	r3, [r2, #96]	; 0x60
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_MspInit+0x44>)
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_MspInit+0x44>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <HAL_MspInit+0x44>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6593      	str	r3, [r2, #88]	; 0x58
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_MspInit+0x44>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000

08003440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003444:	e7fe      	b.n	8003444 <NMI_Handler+0x4>

08003446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344a:	e7fe      	b.n	800344a <HardFault_Handler+0x4>

0800344c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <MemManage_Handler+0x4>

08003452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003456:	e7fe      	b.n	8003456 <BusFault_Handler+0x4>

08003458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800345c:	e7fe      	b.n	800345c <UsageFault_Handler+0x4>

0800345e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800348c:	f000 fc10 	bl	8003cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}

08003494 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <DMA2_Channel5_IRQHandler+0x10>)
 800349a:	f000 fe77 	bl	800418c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200005bc 	.word	0x200005bc

080034a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80034ac:	4802      	ldr	r0, [pc, #8]	; (80034b8 <OTG_FS_IRQHandler+0x10>)
 80034ae:	f002 f87b 	bl	80055a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20001ae8 	.word	0x20001ae8

080034bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return 1;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_kill>:

int _kill(int pid, int sig)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034d6:	f00b fca9 	bl	800ee2c <__errno>
 80034da:	4603      	mov	r3, r0
 80034dc:	2216      	movs	r2, #22
 80034de:	601a      	str	r2, [r3, #0]
  return -1;
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_exit>:

void _exit (int status)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ffe7 	bl	80034cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80034fe:	e7fe      	b.n	80034fe <_exit+0x12>

08003500 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e00a      	b.n	8003528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003512:	f3af 8000 	nop.w
 8003516:	4601      	mov	r1, r0
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	60ba      	str	r2, [r7, #8]
 800351e:	b2ca      	uxtb	r2, r1
 8003520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	3301      	adds	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	dbf0      	blt.n	8003512 <_read+0x12>
  }

  return len;
 8003530:	687b      	ldr	r3, [r7, #4]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e009      	b.n	8003560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	60ba      	str	r2, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	dbf1      	blt.n	800354c <_write+0x12>
  }
  return len;
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <_close>:

int _close(int file)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800359a:	605a      	str	r2, [r3, #4]
  return 0;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <_isatty>:

int _isatty(int file)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035b2:	2301      	movs	r3, #1
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <_sbrk+0x5c>)
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <_sbrk+0x60>)
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <_sbrk+0x64>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <_sbrk+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <_sbrk+0x64>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d207      	bcs.n	800361c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800360c:	f00b fc0e 	bl	800ee2c <__errno>
 8003610:	4603      	mov	r3, r0
 8003612:	220c      	movs	r2, #12
 8003614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e009      	b.n	8003630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <_sbrk+0x64>)
 800362c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20018000 	.word	0x20018000
 800363c:	00000400 	.word	0x00000400
 8003640:	20000410 	.word	0x20000410
 8003644:	20002360 	.word	0x20002360

08003648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <SystemInit+0x20>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	4a05      	ldr	r2, [pc, #20]	; (8003668 <SystemInit+0x20>)
 8003654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08e      	sub	sp, #56	; 0x38
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800368c:	463b      	mov	r3, r7
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	615a      	str	r2, [r3, #20]
 800369c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800369e:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036a8:	2250      	movs	r2, #80	; 0x50
 80036aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80036b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ba:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036c0:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036c6:	4836      	ldr	r0, [pc, #216]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036c8:	f004 fb12 	bl	8007cf0 <HAL_TIM_Base_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80036d2:	f7ff f97d 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e0:	4619      	mov	r1, r3
 80036e2:	482f      	ldr	r0, [pc, #188]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036e4:	f004 fe40 	bl	8008368 <HAL_TIM_ConfigClockSource>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80036ee:	f7ff f96f 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036f2:	482b      	ldr	r0, [pc, #172]	; (80037a0 <MX_TIM2_Init+0x134>)
 80036f4:	f004 fbbc 	bl	8007e70 <HAL_TIM_PWM_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80036fe:	f7ff f967 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4619      	mov	r1, r3
 8003710:	4823      	ldr	r0, [pc, #140]	; (80037a0 <MX_TIM2_Init+0x134>)
 8003712:	f005 fb23 	bl	8008d5c <HAL_TIMEx_MasterConfigSynchronization>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800371c:	f7ff f958 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003720:	2360      	movs	r3, #96	; 0x60
 8003722:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003730:	463b      	mov	r3, r7
 8003732:	2200      	movs	r2, #0
 8003734:	4619      	mov	r1, r3
 8003736:	481a      	ldr	r0, [pc, #104]	; (80037a0 <MX_TIM2_Init+0x134>)
 8003738:	f004 fd02 	bl	8008140 <HAL_TIM_PWM_ConfigChannel>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003742:	f7ff f945 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003746:	463b      	mov	r3, r7
 8003748:	2204      	movs	r2, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4814      	ldr	r0, [pc, #80]	; (80037a0 <MX_TIM2_Init+0x134>)
 800374e:	f004 fcf7 	bl	8008140 <HAL_TIM_PWM_ConfigChannel>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003758:	f7ff f93a 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 800375c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003760:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003762:	463b      	mov	r3, r7
 8003764:	2208      	movs	r2, #8
 8003766:	4619      	mov	r1, r3
 8003768:	480d      	ldr	r0, [pc, #52]	; (80037a0 <MX_TIM2_Init+0x134>)
 800376a:	f004 fce9 	bl	8008140 <HAL_TIM_PWM_ConfigChannel>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
 8003774:	f7ff f92c 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800377c:	463b      	mov	r3, r7
 800377e:	220c      	movs	r2, #12
 8003780:	4619      	mov	r1, r3
 8003782:	4807      	ldr	r0, [pc, #28]	; (80037a0 <MX_TIM2_Init+0x134>)
 8003784:	f004 fcdc 	bl	8008140 <HAL_TIM_PWM_ConfigChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 800378e:	f7ff f91f 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003792:	4803      	ldr	r0, [pc, #12]	; (80037a0 <MX_TIM2_Init+0x134>)
 8003794:	f000 f886 	bl	80038a4 <HAL_TIM_MspPostInit>

}
 8003798:	bf00      	nop
 800379a:	3738      	adds	r7, #56	; 0x38
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000414 	.word	0x20000414

080037a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <MX_TIM3_Init+0x94>)
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <MX_TIM3_Init+0x98>)
 80037c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <MX_TIM3_Init+0x94>)
 80037ca:	2250      	movs	r2, #80	; 0x50
 80037cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <MX_TIM3_Init+0x94>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000;
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <MX_TIM3_Init+0x94>)
 80037d6:	f241 7270 	movw	r2, #6000	; 0x1770
 80037da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037dc:	4b16      	ldr	r3, [pc, #88]	; (8003838 <MX_TIM3_Init+0x94>)
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e2:	4b15      	ldr	r3, [pc, #84]	; (8003838 <MX_TIM3_Init+0x94>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037e8:	4813      	ldr	r0, [pc, #76]	; (8003838 <MX_TIM3_Init+0x94>)
 80037ea:	f004 fa81 	bl	8007cf0 <HAL_TIM_Base_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80037f4:	f7ff f8ec 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037fe:	f107 0310 	add.w	r3, r7, #16
 8003802:	4619      	mov	r1, r3
 8003804:	480c      	ldr	r0, [pc, #48]	; (8003838 <MX_TIM3_Init+0x94>)
 8003806:	f004 fdaf 	bl	8008368 <HAL_TIM_ConfigClockSource>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003810:	f7ff f8de 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4805      	ldr	r0, [pc, #20]	; (8003838 <MX_TIM3_Init+0x94>)
 8003822:	f005 fa9b 	bl	8008d5c <HAL_TIMEx_MasterConfigSynchronization>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800382c:	f7ff f8d0 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000460 	.word	0x20000460
 800383c:	40000400 	.word	0x40000400

08003840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d10c      	bne.n	800386c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_TIM_Base_MspInit+0x5c>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	4a11      	ldr	r2, [pc, #68]	; (800389c <HAL_TIM_Base_MspInit+0x5c>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6593      	str	r3, [r2, #88]	; 0x58
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_TIM_Base_MspInit+0x5c>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800386a:	e010      	b.n	800388e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_TIM_Base_MspInit+0x60>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10b      	bne.n	800388e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_TIM_Base_MspInit+0x5c>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <HAL_TIM_Base_MspInit+0x5c>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_TIM_Base_MspInit+0x5c>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	40000400 	.word	0x40000400

080038a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d138      	bne.n	8003938 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c6:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <HAL_TIM_MspPostInit+0x9c>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_TIM_MspPostInit+0x9c>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038d2:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_TIM_MspPostInit+0x9c>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_TIM_MspPostInit+0x9c>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <HAL_TIM_MspPostInit+0x9c>)
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_TIM_MspPostInit+0x9c>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80038f6:	232c      	movs	r3, #44	; 0x2c
 80038f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003906:	2301      	movs	r3, #1
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003914:	f000 fd1a 	bl	800434c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003918:	2308      	movs	r3, #8
 800391a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391c:	2302      	movs	r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003924:	2300      	movs	r3, #0
 8003926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003928:	2301      	movs	r3, #1
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	4619      	mov	r1, r3
 8003932:	4804      	ldr	r0, [pc, #16]	; (8003944 <HAL_TIM_MspPostInit+0xa0>)
 8003934:	f000 fd0a 	bl	800434c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003938:	bf00      	nop
 800393a:	3728      	adds	r7, #40	; 0x28
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	48000400 	.word	0x48000400

08003948 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <MX_UART4_Init+0x58>)
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <MX_UART4_Init+0x5c>)
 8003950:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <MX_UART4_Init+0x58>)
 8003954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003958:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <MX_UART4_Init+0x58>)
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <MX_UART4_Init+0x58>)
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <MX_UART4_Init+0x58>)
 8003968:	2200      	movs	r2, #0
 800396a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <MX_UART4_Init+0x58>)
 800396e:	220c      	movs	r2, #12
 8003970:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <MX_UART4_Init+0x58>)
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <MX_UART4_Init+0x58>)
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <MX_UART4_Init+0x58>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <MX_UART4_Init+0x58>)
 8003986:	2200      	movs	r2, #0
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800398a:	4805      	ldr	r0, [pc, #20]	; (80039a0 <MX_UART4_Init+0x58>)
 800398c:	f005 fa6e 	bl	8008e6c <HAL_UART_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003996:	f7ff f81b 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200004ac 	.word	0x200004ac
 80039a4:	40004c00 	.word	0x40004c00

080039a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039ae:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <MX_USART2_UART_Init+0x5c>)
 80039b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039ce:	220c      	movs	r2, #12
 80039d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ea:	4805      	ldr	r0, [pc, #20]	; (8003a00 <MX_USART2_UART_Init+0x58>)
 80039ec:	f005 fa3e 	bl	8008e6c <HAL_UART_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039f6:	f7fe ffeb 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000534 	.word	0x20000534
 8003a04:	40004400 	.word	0x40004400

08003a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b0ae      	sub	sp, #184	; 0xb8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	2288      	movs	r2, #136	; 0x88
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f00b f9ac 	bl	800ed86 <memset>
  if(uartHandle->Instance==UART4)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	; (8003b8c <HAL_UART_MspInit+0x184>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d165      	bne.n	8003b04 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003a38:	2308      	movs	r3, #8
 8003a3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a40:	f107 031c 	add.w	r3, r7, #28
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 fc87 	bl	8007358 <HAL_RCCEx_PeriphCLKConfig>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a50:	f7fe ffbe 	bl	80029d0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a54:	4b4e      	ldr	r3, [pc, #312]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6c:	4b48      	ldr	r3, [pc, #288]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a70:	4a47      	ldr	r2, [pc, #284]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a78:	4b45      	ldr	r3, [pc, #276]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a84:	2303      	movs	r3, #3
 8003a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a96:	2303      	movs	r3, #3
 8003a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aac:	f000 fc4e 	bl	800434c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8003ab0:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003ab2:	4a39      	ldr	r2, [pc, #228]	; (8003b98 <HAL_UART_MspInit+0x190>)
 8003ab4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003ab8:	2202      	movs	r2, #2
 8003aba:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ac2:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ac8:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ace:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ad4:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003adc:	2220      	movs	r2, #32
 8003ade:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003ae6:	482b      	ldr	r0, [pc, #172]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003ae8:	f000 fa38 	bl	8003f5c <HAL_DMA_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8003af2:	f7fe ff6d 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003afa:	675a      	str	r2, [r3, #116]	; 0x74
 8003afc:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <HAL_UART_MspInit+0x18c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b02:	e03f      	b.n	8003b84 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==USART2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <HAL_UART_MspInit+0x194>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d13a      	bne.n	8003b84 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 fc1c 	bl	8007358 <HAL_RCCEx_PeriphCLKConfig>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_UART_MspInit+0x122>
      Error_Handler();
 8003b26:	f7fe ff53 	bl	80029d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	6593      	str	r3, [r2, #88]	; 0x58
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003b48:	f043 0308 	orr.w	r3, r3, #8
 8003b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_UART_MspInit+0x188>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b5a:	2360      	movs	r3, #96	; 0x60
 8003b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b72:	2307      	movs	r3, #7
 8003b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4808      	ldr	r0, [pc, #32]	; (8003ba0 <HAL_UART_MspInit+0x198>)
 8003b80:	f000 fbe4 	bl	800434c <HAL_GPIO_Init>
}
 8003b84:	bf00      	nop
 8003b86:	37b8      	adds	r7, #184	; 0xb8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40004c00 	.word	0x40004c00
 8003b90:	40021000 	.word	0x40021000
 8003b94:	200005bc 	.word	0x200005bc
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40004400 	.word	0x40004400
 8003ba0:	48000c00 	.word	0x48000c00

08003ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ba8:	f7ff fd4e 	bl	8003648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bac:	480c      	ldr	r0, [pc, #48]	; (8003be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <LoopForever+0xe>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb4:	e002      	b.n	8003bbc <LoopCopyDataInit>

08003bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bba:	3304      	adds	r3, #4

08003bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc0:	d3f9      	bcc.n	8003bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bc4:	4c0a      	ldr	r4, [pc, #40]	; (8003bf0 <LoopForever+0x16>)
  movs r3, #0
 8003bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc8:	e001      	b.n	8003bce <LoopFillZerobss>

08003bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bcc:	3204      	adds	r2, #4

08003bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd0:	d3fb      	bcc.n	8003bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bd2:	f00b f931 	bl	800ee38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bd6:	f7fd fdfb 	bl	80017d0 <main>

08003bda <LoopForever>:

LoopForever:
    b LoopForever
 8003bda:	e7fe      	b.n	8003bda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003bdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be4:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8003be8:	08014450 	.word	0x08014450
  ldr r2, =_sbss
 8003bec:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8003bf0:	20002360 	.word	0x20002360

08003bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bf4:	e7fe      	b.n	8003bf4 <ADC1_2_IRQHandler>
	...

08003bf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_Init+0x3c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <HAL_Init+0x3c>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0e:	2003      	movs	r0, #3
 8003c10:	f000 f962 	bl	8003ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c14:	2000      	movs	r0, #0
 8003c16:	f000 f80f 	bl	8003c38 <HAL_InitTick>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	71fb      	strb	r3, [r7, #7]
 8003c24:	e001      	b.n	8003c2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c26:	f7ff fbe7 	bl	80033f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40022000 	.word	0x40022000

08003c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c44:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <HAL_InitTick+0x6c>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d023      	beq.n	8003c94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <HAL_InitTick+0x70>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <HAL_InitTick+0x6c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f96d 	bl	8003f42 <HAL_SYSTICK_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10f      	bne.n	8003c8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b0f      	cmp	r3, #15
 8003c72:	d809      	bhi.n	8003c88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c74:	2200      	movs	r2, #0
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	f000 f937 	bl	8003eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <HAL_InitTick+0x74>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e007      	b.n	8003c98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e004      	b.n	8003c98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	e001      	b.n	8003c98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000098 	.word	0x20000098
 8003ca8:	20000090 	.word	0x20000090
 8003cac:	20000094 	.word	0x20000094

08003cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_IncTick+0x20>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_IncTick+0x24>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <HAL_IncTick+0x24>)
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000098 	.word	0x20000098
 8003cd4:	20000604 	.word	0x20000604

08003cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return uwTick;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_GetTick+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000604 	.word	0x20000604

08003cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff ffee 	bl	8003cd8 <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d005      	beq.n	8003d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_Delay+0x44>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d16:	bf00      	nop
 8003d18:	f7ff ffde 	bl	8003cd8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d8f7      	bhi.n	8003d18 <HAL_Delay+0x28>
  {
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000098 	.word	0x20000098

08003d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d54:	4013      	ands	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	60d3      	str	r3, [r2, #12]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <__NVIC_GetPriorityGrouping+0x18>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	f003 0307 	and.w	r3, r3, #7
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db0b      	blt.n	8003dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4907      	ldr	r1, [pc, #28]	; (8003dd4 <__NVIC_EnableIRQ+0x38>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000e100 	.word	0xe000e100

08003dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	6039      	str	r1, [r7, #0]
 8003de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	db0a      	blt.n	8003e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	490c      	ldr	r1, [pc, #48]	; (8003e24 <__NVIC_SetPriority+0x4c>)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	0112      	lsls	r2, r2, #4
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e00:	e00a      	b.n	8003e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4908      	ldr	r1, [pc, #32]	; (8003e28 <__NVIC_SetPriority+0x50>)
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	0112      	lsls	r2, r2, #4
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	440b      	add	r3, r1
 8003e16:	761a      	strb	r2, [r3, #24]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	e000e100 	.word	0xe000e100
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	; 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f1c3 0307 	rsb	r3, r3, #7
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	bf28      	it	cs
 8003e4a:	2304      	movcs	r3, #4
 8003e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d902      	bls.n	8003e5c <NVIC_EncodePriority+0x30>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3b03      	subs	r3, #3
 8003e5a:	e000      	b.n	8003e5e <NVIC_EncodePriority+0x32>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e60:	f04f 32ff 	mov.w	r2, #4294967295
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	401a      	ands	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e74:	f04f 31ff 	mov.w	r1, #4294967295
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	43d9      	mvns	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e84:	4313      	orrs	r3, r2
         );
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	; 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea4:	d301      	bcc.n	8003eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e00f      	b.n	8003eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <SysTick_Config+0x40>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb2:	210f      	movs	r1, #15
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	f7ff ff8e 	bl	8003dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <SysTick_Config+0x40>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec2:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <SysTick_Config+0x40>)
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	e000e010 	.word	0xe000e010

08003ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff29 	bl	8003d38 <__NVIC_SetPriorityGrouping>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f00:	f7ff ff3e 	bl	8003d80 <__NVIC_GetPriorityGrouping>
 8003f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	6978      	ldr	r0, [r7, #20]
 8003f0c:	f7ff ff8e 	bl	8003e2c <NVIC_EncodePriority>
 8003f10:	4602      	mov	r2, r0
 8003f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff5d 	bl	8003dd8 <__NVIC_SetPriority>
}
 8003f1e:	bf00      	nop
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff31 	bl	8003d9c <__NVIC_EnableIRQ>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ffa2 	bl	8003e94 <SysTick_Config>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e098      	b.n	80040a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <HAL_DMA_Init+0x150>)
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d80f      	bhi.n	8003f9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <HAL_DMA_Init+0x154>)
 8003f82:	4413      	add	r3, r2
 8003f84:	4a4b      	ldr	r2, [pc, #300]	; (80040b4 <HAL_DMA_Init+0x158>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	009a      	lsls	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a48      	ldr	r2, [pc, #288]	; (80040b8 <HAL_DMA_Init+0x15c>)
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
 8003f98:	e00e      	b.n	8003fb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b46      	ldr	r3, [pc, #280]	; (80040bc <HAL_DMA_Init+0x160>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a43      	ldr	r2, [pc, #268]	; (80040b4 <HAL_DMA_Init+0x158>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	009a      	lsls	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a42      	ldr	r2, [pc, #264]	; (80040c0 <HAL_DMA_Init+0x164>)
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004012:	d039      	beq.n	8004088 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <HAL_DMA_Init+0x15c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d11a      	bne.n	8004054 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800401e:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <HAL_DMA_Init+0x168>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f003 031c 	and.w	r3, r3, #28
 800402a:	210f      	movs	r1, #15
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	4924      	ldr	r1, [pc, #144]	; (80040c4 <HAL_DMA_Init+0x168>)
 8004034:	4013      	ands	r3, r2
 8004036:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_DMA_Init+0x168>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f003 031c 	and.w	r3, r3, #28
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	491d      	ldr	r1, [pc, #116]	; (80040c4 <HAL_DMA_Init+0x168>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
 8004052:	e019      	b.n	8004088 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004054:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <HAL_DMA_Init+0x16c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	f003 031c 	and.w	r3, r3, #28
 8004060:	210f      	movs	r1, #15
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	4917      	ldr	r1, [pc, #92]	; (80040c8 <HAL_DMA_Init+0x16c>)
 800406a:	4013      	ands	r3, r2
 800406c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800406e:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_DMA_Init+0x16c>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f003 031c 	and.w	r3, r3, #28
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	4911      	ldr	r1, [pc, #68]	; (80040c8 <HAL_DMA_Init+0x16c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40020407 	.word	0x40020407
 80040b0:	bffdfff8 	.word	0xbffdfff8
 80040b4:	cccccccd 	.word	0xcccccccd
 80040b8:	40020000 	.word	0x40020000
 80040bc:	bffdfbf8 	.word	0xbffdfbf8
 80040c0:	40020400 	.word	0x40020400
 80040c4:	400200a8 	.word	0x400200a8
 80040c8:	400204a8 	.word	0x400204a8

080040cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Start_IT+0x20>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e04b      	b.n	8004184 <HAL_DMA_Start_IT+0xb8>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d13a      	bne.n	8004176 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f8e0 	bl	80042ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 020e 	orr.w	r2, r2, #14
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00f      	b.n	8004164 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 020a 	orr.w	r2, r2, #10
 8004162:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e005      	b.n	8004182 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004182:	7dfb      	ldrb	r3, [r7, #23]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f003 031c 	and.w	r3, r3, #28
 80041ac:	2204      	movs	r2, #4
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d026      	beq.n	8004206 <HAL_DMA_IRQHandler+0x7a>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d021      	beq.n	8004206 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	f003 021c 	and.w	r2, r3, #28
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	2104      	movs	r1, #4
 80041ee:	fa01 f202 	lsl.w	r2, r1, r2
 80041f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d071      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004204:	e06c      	b.n	80042e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	f003 031c 	and.w	r3, r3, #28
 800420e:	2202      	movs	r2, #2
 8004210:	409a      	lsls	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d02e      	beq.n	8004278 <HAL_DMA_IRQHandler+0xec>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d029      	beq.n	8004278 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 020a 	bic.w	r2, r2, #10
 8004240:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f003 021c 	and.w	r2, r3, #28
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2102      	movs	r1, #2
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d038      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004276:	e033      	b.n	80042e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427c:	f003 031c 	and.w	r3, r3, #28
 8004280:	2208      	movs	r2, #8
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02a      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x156>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d025      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 020e 	bic.w	r2, r2, #14
 80042a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f003 021c 	and.w	r2, r3, #28
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
 80042b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
}
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f003 021c 	and.w	r2, r3, #28
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f202 	lsl.w	r2, r1, r2
 800430a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b10      	cmp	r3, #16
 800431a:	d108      	bne.n	800432e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800432c:	e007      	b.n	800433e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	60da      	str	r2, [r3, #12]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800435a:	e17f      	b.n	800465c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	fa01 f303 	lsl.w	r3, r1, r3
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 8171 	beq.w	8004656 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d005      	beq.n	800438c <HAL_GPIO_Init+0x40>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d130      	bne.n	80043ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043c2:	2201      	movs	r2, #1
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4013      	ands	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f003 0201 	and.w	r2, r3, #1
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d118      	bne.n	800442c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004400:	2201      	movs	r2, #1
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	08db      	lsrs	r3, r3, #3
 8004416:	f003 0201 	and.w	r2, r3, #1
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b03      	cmp	r3, #3
 8004436:	d017      	beq.n	8004468 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2203      	movs	r2, #3
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d123      	bne.n	80044bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	08da      	lsrs	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3208      	adds	r2, #8
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220f      	movs	r2, #15
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	08da      	lsrs	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3208      	adds	r2, #8
 80044b6:	6939      	ldr	r1, [r7, #16]
 80044b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0203 	and.w	r2, r3, #3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80ac 	beq.w	8004656 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fe:	4b5f      	ldr	r3, [pc, #380]	; (800467c <HAL_GPIO_Init+0x330>)
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	4a5e      	ldr	r2, [pc, #376]	; (800467c <HAL_GPIO_Init+0x330>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6613      	str	r3, [r2, #96]	; 0x60
 800450a:	4b5c      	ldr	r3, [pc, #368]	; (800467c <HAL_GPIO_Init+0x330>)
 800450c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004516:	4a5a      	ldr	r2, [pc, #360]	; (8004680 <HAL_GPIO_Init+0x334>)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004522:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	220f      	movs	r2, #15
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004540:	d025      	beq.n	800458e <HAL_GPIO_Init+0x242>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4f      	ldr	r2, [pc, #316]	; (8004684 <HAL_GPIO_Init+0x338>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01f      	beq.n	800458a <HAL_GPIO_Init+0x23e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4e      	ldr	r2, [pc, #312]	; (8004688 <HAL_GPIO_Init+0x33c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d019      	beq.n	8004586 <HAL_GPIO_Init+0x23a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4d      	ldr	r2, [pc, #308]	; (800468c <HAL_GPIO_Init+0x340>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_GPIO_Init+0x236>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4c      	ldr	r2, [pc, #304]	; (8004690 <HAL_GPIO_Init+0x344>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00d      	beq.n	800457e <HAL_GPIO_Init+0x232>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4b      	ldr	r2, [pc, #300]	; (8004694 <HAL_GPIO_Init+0x348>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <HAL_GPIO_Init+0x22e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a4a      	ldr	r2, [pc, #296]	; (8004698 <HAL_GPIO_Init+0x34c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_GPIO_Init+0x22a>
 8004572:	2306      	movs	r3, #6
 8004574:	e00c      	b.n	8004590 <HAL_GPIO_Init+0x244>
 8004576:	2307      	movs	r3, #7
 8004578:	e00a      	b.n	8004590 <HAL_GPIO_Init+0x244>
 800457a:	2305      	movs	r3, #5
 800457c:	e008      	b.n	8004590 <HAL_GPIO_Init+0x244>
 800457e:	2304      	movs	r3, #4
 8004580:	e006      	b.n	8004590 <HAL_GPIO_Init+0x244>
 8004582:	2303      	movs	r3, #3
 8004584:	e004      	b.n	8004590 <HAL_GPIO_Init+0x244>
 8004586:	2302      	movs	r3, #2
 8004588:	e002      	b.n	8004590 <HAL_GPIO_Init+0x244>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_GPIO_Init+0x244>
 800458e:	2300      	movs	r3, #0
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	f002 0203 	and.w	r2, r2, #3
 8004596:	0092      	lsls	r2, r2, #2
 8004598:	4093      	lsls	r3, r2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045a0:	4937      	ldr	r1, [pc, #220]	; (8004680 <HAL_GPIO_Init+0x334>)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	3302      	adds	r3, #2
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ae:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_GPIO_Init+0x350>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045d2:	4a32      	ldr	r2, [pc, #200]	; (800469c <HAL_GPIO_Init+0x350>)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045d8:	4b30      	ldr	r3, [pc, #192]	; (800469c <HAL_GPIO_Init+0x350>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045fc:	4a27      	ldr	r2, [pc, #156]	; (800469c <HAL_GPIO_Init+0x350>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <HAL_GPIO_Init+0x350>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004626:	4a1d      	ldr	r2, [pc, #116]	; (800469c <HAL_GPIO_Init+0x350>)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_GPIO_Init+0x350>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	43db      	mvns	r3, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004650:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_GPIO_Init+0x350>)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	3301      	adds	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa22 f303 	lsr.w	r3, r2, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	f47f ae78 	bne.w	800435c <HAL_GPIO_Init+0x10>
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	40010000 	.word	0x40010000
 8004684:	48000400 	.word	0x48000400
 8004688:	48000800 	.word	0x48000800
 800468c:	48000c00 	.word	0x48000c00
 8004690:	48001000 	.word	0x48001000
 8004694:	48001400 	.word	0x48001400
 8004698:	48001800 	.word	0x48001800
 800469c:	40010400 	.word	0x40010400

080046a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	807b      	strh	r3, [r7, #2]
 80046ac:	4613      	mov	r3, r2
 80046ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046b0:	787b      	ldrb	r3, [r7, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046b6:	887a      	ldrh	r2, [r7, #2]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046bc:	e002      	b.n	80046c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e08d      	b.n	80047fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fd98 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e006      	b.n	8004758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d108      	bne.n	8004772 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	e007      	b.n	8004782 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004780:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69d9      	ldr	r1, [r3, #28]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	461a      	mov	r2, r3
 8004816:	4603      	mov	r3, r0
 8004818:	817b      	strh	r3, [r7, #10]
 800481a:	460b      	mov	r3, r1
 800481c:	813b      	strh	r3, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b20      	cmp	r3, #32
 800482c:	f040 80f9 	bne.w	8004a22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_I2C_Mem_Write+0x34>
 8004836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0ed      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_I2C_Mem_Write+0x4e>
 8004852:	2302      	movs	r3, #2
 8004854:	e0e6      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800485e:	f7ff fa3b 	bl	8003cd8 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2319      	movs	r3, #25
 800486a:	2201      	movs	r2, #1
 800486c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fac3 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0d1      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2221      	movs	r2, #33	; 0x21
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2240      	movs	r2, #64	; 0x40
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048a8:	88f8      	ldrh	r0, [r7, #6]
 80048aa:	893a      	ldrh	r2, [r7, #8]
 80048ac:	8979      	ldrh	r1, [r7, #10]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	4603      	mov	r3, r0
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f9d3 	bl	8004c64 <I2C_RequestMemoryWrite>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0a9      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2bff      	cmp	r3, #255	; 0xff
 80048d8:	d90e      	bls.n	80048f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	22ff      	movs	r2, #255	; 0xff
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	8979      	ldrh	r1, [r7, #10]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fc3d 	bl	8005170 <I2C_TransferConfig>
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	8979      	ldrh	r1, [r7, #10]
 800490a:	2300      	movs	r3, #0
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fc2c 	bl	8005170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fabc 	bl	8004e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e07b      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	781a      	ldrb	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d034      	beq.n	80049d0 <HAL_I2C_Mem_Write+0x1c8>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496a:	2b00      	cmp	r3, #0
 800496c:	d130      	bne.n	80049d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	2200      	movs	r2, #0
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fa3f 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e04d      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2bff      	cmp	r3, #255	; 0xff
 8004990:	d90e      	bls.n	80049b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	b2da      	uxtb	r2, r3
 800499e:	8979      	ldrh	r1, [r7, #10]
 80049a0:	2300      	movs	r3, #0
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fbe1 	bl	8005170 <I2C_TransferConfig>
 80049ae:	e00f      	b.n	80049d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	8979      	ldrh	r1, [r7, #10]
 80049c2:	2300      	movs	r3, #0
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fbd0 	bl	8005170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d19e      	bne.n	8004918 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 faa2 	bl	8004f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e01a      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2220      	movs	r2, #32
 80049f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_I2C_Mem_Write+0x224>)
 8004a02:	400b      	ands	r3, r1
 8004a04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e000      	b.n	8004a24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
  }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	fe00e800 	.word	0xfe00e800

08004a30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	4608      	mov	r0, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	817b      	strh	r3, [r7, #10]
 8004a42:	460b      	mov	r3, r1
 8004a44:	813b      	strh	r3, [r7, #8]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	f040 80fd 	bne.w	8004c52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_I2C_Mem_Read+0x34>
 8004a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0f1      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_Mem_Read+0x4e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e0ea      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a86:	f7ff f927 	bl	8003cd8 <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2319      	movs	r3, #25
 8004a92:	2201      	movs	r2, #1
 8004a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f9af 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0d5      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2222      	movs	r2, #34	; 0x22
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ad0:	88f8      	ldrh	r0, [r7, #6]
 8004ad2:	893a      	ldrh	r2, [r7, #8]
 8004ad4:	8979      	ldrh	r1, [r7, #10]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4603      	mov	r3, r0
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f913 	bl	8004d0c <I2C_RequestMemoryRead>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0ad      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2bff      	cmp	r3, #255	; 0xff
 8004b00:	d90e      	bls.n	8004b20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	22ff      	movs	r2, #255	; 0xff
 8004b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	4b52      	ldr	r3, [pc, #328]	; (8004c5c <HAL_I2C_Mem_Read+0x22c>)
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fb29 	bl	8005170 <I2C_TransferConfig>
 8004b1e:	e00f      	b.n	8004b40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	8979      	ldrh	r1, [r7, #10]
 8004b32:	4b4a      	ldr	r3, [pc, #296]	; (8004c5c <HAL_I2C_Mem_Read+0x22c>)
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fb18 	bl	8005170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	2200      	movs	r2, #0
 8004b48:	2104      	movs	r1, #4
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f956 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07c      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d034      	beq.n	8004c00 <HAL_I2C_Mem_Read+0x1d0>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d130      	bne.n	8004c00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f927 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e04d      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2bff      	cmp	r3, #255	; 0xff
 8004bc0:	d90e      	bls.n	8004be0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fac9 	bl	8005170 <I2C_TransferConfig>
 8004bde:	e00f      	b.n	8004c00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	8979      	ldrh	r1, [r7, #10]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fab8 	bl	8005170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d19a      	bne.n	8004b40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f98a 	bl	8004f28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e01a      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2220      	movs	r2, #32
 8004c24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6859      	ldr	r1, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_I2C_Mem_Read+0x230>)
 8004c32:	400b      	ands	r3, r1
 8004c34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e000      	b.n	8004c54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
  }
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	80002400 	.word	0x80002400
 8004c60:	fe00e800 	.word	0xfe00e800

08004c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	8979      	ldrh	r1, [r7, #10]
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <I2C_RequestMemoryWrite+0xa4>)
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fa6f 	bl	8005170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f8ff 	bl	8004e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e02c      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb6:	e015      	b.n	8004ce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cb8:	893b      	ldrh	r3, [r7, #8]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f8e5 	bl	8004e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e012      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cda:	893b      	ldrh	r3, [r7, #8]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f884 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	80002000 	.word	0x80002000

08004d0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	4608      	mov	r0, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	817b      	strh	r3, [r7, #10]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	813b      	strh	r3, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	8979      	ldrh	r1, [r7, #10]
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <I2C_RequestMemoryRead+0xa4>)
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 fa1c 	bl	8005170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	69b9      	ldr	r1, [r7, #24]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f8ac 	bl	8004e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e02c      	b.n	8004da6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d52:	893b      	ldrh	r3, [r7, #8]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5c:	e015      	b.n	8004d8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d5e:	893b      	ldrh	r3, [r7, #8]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	69b9      	ldr	r1, [r7, #24]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f892 	bl	8004e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e012      	b.n	8004da6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2140      	movs	r1, #64	; 0x40
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f831 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	80002000 	.word	0x80002000

08004db4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d103      	bne.n	8004dd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d007      	beq.n	8004df0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	619a      	str	r2, [r3, #24]
  }
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e0c:	e031      	b.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d02d      	beq.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7fe ff5f 	bl	8003cd8 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d122      	bne.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d113      	bne.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e00f      	b.n	8004e92 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	bf0c      	ite	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	2300      	movne	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d0be      	beq.n	8004e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ea6:	e033      	b.n	8004f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f87f 	bl	8004fb0 <I2C_IsErrorOccurred>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e031      	b.n	8004f20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d025      	beq.n	8004f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec4:	f7fe ff08 	bl	8003cd8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d302      	bcc.n	8004eda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11a      	bne.n	8004f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d013      	beq.n	8004f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e007      	b.n	8004f20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d1c4      	bne.n	8004ea8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f34:	e02f      	b.n	8004f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f838 	bl	8004fb0 <I2C_IsErrorOccurred>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e02d      	b.n	8004fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fe fec5 	bl	8003cd8 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11a      	bne.n	8004f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d013      	beq.n	8004f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e007      	b.n	8004fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d1c8      	bne.n	8004f36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d068      	beq.n	80050ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fe4:	e049      	b.n	800507a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d045      	beq.n	800507a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fe fe73 	bl	8003cd8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_IsErrorOccurred+0x54>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d13a      	bne.n	800507a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005016:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005026:	d121      	bne.n	800506c <I2C_IsErrorOccurred+0xbc>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800502e:	d01d      	beq.n	800506c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	2b20      	cmp	r3, #32
 8005034:	d01a      	beq.n	800506c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005044:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005046:	f7fe fe47 	bl	8003cd8 <HAL_GetTick>
 800504a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800504c:	e00e      	b.n	800506c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800504e:	f7fe fe43 	bl	8003cd8 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b19      	cmp	r3, #25
 800505a:	d907      	bls.n	800506c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f043 0320 	orr.w	r3, r3, #32
 8005062:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800506a:	e006      	b.n	800507a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b20      	cmp	r3, #32
 8005078:	d1e9      	bne.n	800504e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b20      	cmp	r3, #32
 8005086:	d003      	beq.n	8005090 <I2C_IsErrorOccurred+0xe0>
 8005088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0aa      	beq.n	8004fe6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2220      	movs	r2, #32
 800509e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	f043 0304 	orr.w	r3, r3, #4
 80050a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f043 0308 	orr.w	r3, r3, #8
 80050e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	f043 0302 	orr.w	r3, r3, #2
 800510a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005114:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800511c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01c      	beq.n	800515e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fe45 	bl	8004db4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6859      	ldr	r1, [r3, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <I2C_IsErrorOccurred+0x1bc>)
 8005136:	400b      	ands	r3, r1
 8005138:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800515e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005162:	4618      	mov	r0, r3
 8005164:	3728      	adds	r7, #40	; 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	fe00e800 	.word	0xfe00e800

08005170 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	817b      	strh	r3, [r7, #10]
 800517e:	4613      	mov	r3, r2
 8005180:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005188:	7a7b      	ldrb	r3, [r7, #9]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005190:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	4313      	orrs	r3, r2
 800519a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800519e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	0d5b      	lsrs	r3, r3, #21
 80051aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <I2C_TransferConfig+0x60>)
 80051b0:	430b      	orrs	r3, r1
 80051b2:	43db      	mvns	r3, r3
 80051b4:	ea02 0103 	and.w	r1, r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	03ff63ff 	.word	0x03ff63ff

080051d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d138      	bne.n	800525c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e032      	b.n	800525e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2224      	movs	r2, #36	; 0x24
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	e000      	b.n	800525e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b20      	cmp	r3, #32
 800527e:	d139      	bne.n	80052f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800528a:	2302      	movs	r3, #2
 800528c:	e033      	b.n	80052f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2224      	movs	r2, #36	; 0x24
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005304:	b08f      	sub	sp, #60	; 0x3c
 8005306:	af0a      	add	r7, sp, #40	; 0x28
 8005308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e116      	b.n	8005542 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f008 f94a 	bl	800d5c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2203      	movs	r2, #3
 8005338:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f004 fda5 	bl	8009ea2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	687e      	ldr	r6, [r7, #4]
 8005360:	466d      	mov	r5, sp
 8005362:	f106 0410 	add.w	r4, r6, #16
 8005366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800536a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800536e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005372:	e885 0003 	stmia.w	r5, {r0, r1}
 8005376:	1d33      	adds	r3, r6, #4
 8005378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800537a:	6838      	ldr	r0, [r7, #0]
 800537c:	f004 fcb8 	bl	8009cf0 <USB_CoreInit>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e0d7      	b.n	8005542 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f004 fd93 	bl	8009ec4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	e04a      	b.n	800543a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053a4:	7bfa      	ldrb	r2, [r7, #15]
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	333d      	adds	r3, #61	; 0x3d
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	333c      	adds	r3, #60	; 0x3c
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	b298      	uxth	r0, r3
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	3356      	adds	r3, #86	; 0x56
 80053e0:	4602      	mov	r2, r0
 80053e2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053e4:	7bfa      	ldrb	r2, [r7, #15]
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	3340      	adds	r3, #64	; 0x40
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053f8:	7bfa      	ldrb	r2, [r7, #15]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	3344      	adds	r3, #68	; 0x44
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800540c:	7bfa      	ldrb	r2, [r7, #15]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	3348      	adds	r3, #72	; 0x48
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005420:	7bfa      	ldrb	r2, [r7, #15]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	334c      	adds	r3, #76	; 0x4c
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	3301      	adds	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
 800543a:	7bfa      	ldrb	r2, [r7, #15]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d3af      	bcc.n	80053a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]
 8005448:	e044      	b.n	80054d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800544a:	7bfa      	ldrb	r2, [r7, #15]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005460:	7bfa      	ldrb	r2, [r7, #15]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005472:	7bfa      	ldrb	r2, [r7, #15]
 8005474:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005476:	7bfa      	ldrb	r2, [r7, #15]
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800548c:	7bfa      	ldrb	r2, [r7, #15]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054a2:	7bfa      	ldrb	r2, [r7, #15]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054b8:	7bfa      	ldrb	r2, [r7, #15]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	3301      	adds	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
 80054d4:	7bfa      	ldrb	r2, [r7, #15]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d3b5      	bcc.n	800544a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	687e      	ldr	r6, [r7, #4]
 80054e6:	466d      	mov	r5, sp
 80054e8:	f106 0410 	add.w	r4, r6, #16
 80054ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80054fc:	1d33      	adds	r3, r6, #4
 80054fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005500:	6838      	ldr	r0, [r7, #0]
 8005502:	f004 fd2b 	bl	8009f5c <USB_DevInit>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e014      	b.n	8005542 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2b01      	cmp	r3, #1
 800552e:	d102      	bne.n	8005536 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 f869 	bl	8006608 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f005 fcd9 	bl	800aef2 <USB_DevDisconnect>

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800554a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_PCD_Start+0x1c>
 8005562:	2302      	movs	r3, #2
 8005564:	e01c      	b.n	80055a0 <HAL_PCD_Start+0x56>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	2b01      	cmp	r3, #1
 8005574:	d105      	bne.n	8005582 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f004 fc7a 	bl	8009e80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f005 fc8d 	bl	800aeb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b08d      	sub	sp, #52	; 0x34
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 fd4b 	bl	800b05a <USB_GetMode>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f040 847e 	bne.w	8005ec8 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f005 fcaf 	bl	800af34 <USB_ReadInterrupts>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8474 	beq.w	8005ec6 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f005 fc9c 	bl	800af34 <USB_ReadInterrupts>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d107      	bne.n	8005616 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f002 0202 	and.w	r2, r2, #2
 8005614:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f005 fc8a 	bl	800af34 <USB_ReadInterrupts>
 8005620:	4603      	mov	r3, r0
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d161      	bne.n	80056ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0210 	bic.w	r2, r2, #16
 8005638:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	3304      	adds	r3, #4
 8005658:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	0c5b      	lsrs	r3, r3, #17
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	2b02      	cmp	r3, #2
 8005664:	d124      	bne.n	80056b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d035      	beq.n	80056de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800567c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005680:	b29b      	uxth	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	6a38      	ldr	r0, [r7, #32]
 8005686:	f005 fac1 	bl	800ac0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005696:	441a      	add	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056a8:	441a      	add	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	615a      	str	r2, [r3, #20]
 80056ae:	e016      	b.n	80056de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	0c5b      	lsrs	r3, r3, #17
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d110      	bne.n	80056de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056c2:	2208      	movs	r2, #8
 80056c4:	4619      	mov	r1, r3
 80056c6:	6a38      	ldr	r0, [r7, #32]
 80056c8:	f005 faa0 	bl	800ac0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056d8:	441a      	add	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0210 	orr.w	r2, r2, #16
 80056ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f005 fc1e 	bl	800af34 <USB_ReadInterrupts>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005702:	f040 80a7 	bne.w	8005854 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f005 fc23 	bl	800af5a <USB_ReadDevAllOutEpInterrupt>
 8005714:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005716:	e099      	b.n	800584c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 808e 	beq.w	8005840 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f005 fc47 	bl	800afc2 <USB_ReadDevOutEPInterrupt>
 8005734:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	461a      	mov	r2, r3
 800574e:	2301      	movs	r3, #1
 8005750:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fe7d 	bl	8006454 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00c      	beq.n	800577e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005770:	461a      	mov	r2, r3
 8005772:	2308      	movs	r3, #8
 8005774:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 feb9 	bl	80064f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	461a      	mov	r2, r3
 8005796:	2310      	movs	r3, #16
 8005798:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d030      	beq.n	8005806 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d109      	bne.n	80057c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4413      	add	r3, r2
 80057d6:	3304      	adds	r3, #4
 80057d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	78db      	ldrb	r3, [r3, #3]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d108      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f008 f83e 	bl	800d870 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	461a      	mov	r2, r3
 8005802:	2302      	movs	r3, #2
 8005804:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	461a      	mov	r2, r3
 800581e:	2320      	movs	r3, #32
 8005820:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d009      	beq.n	8005840 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	461a      	mov	r2, r3
 800583a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800583e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	3301      	adds	r3, #1
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	f47f af62 	bne.w	8005718 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f005 fb6b 	bl	800af34 <USB_ReadInterrupts>
 800585e:	4603      	mov	r3, r0
 8005860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005868:	f040 80a4 	bne.w	80059b4 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f005 fb8c 	bl	800af8e <USB_ReadDevAllInEpInterrupt>
 8005876:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800587c:	e096      	b.n	80059ac <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 808b 	beq.w	80059a0 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	4611      	mov	r1, r2
 8005894:	4618      	mov	r0, r3
 8005896:	f005 fbb2 	bl	800affe <USB_ReadDevInEPInterrupt>
 800589a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d020      	beq.n	80058e8 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	2201      	movs	r2, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	43db      	mvns	r3, r3
 80058c0:	69f9      	ldr	r1, [r7, #28]
 80058c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c6:	4013      	ands	r3, r2
 80058c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	461a      	mov	r2, r3
 80058d8:	2301      	movs	r3, #1
 80058da:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f007 ff2f 	bl	800d746 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	461a      	mov	r2, r3
 8005900:	2308      	movs	r3, #8
 8005902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	461a      	mov	r2, r3
 800591c:	2310      	movs	r3, #16
 800591e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	461a      	mov	r2, r3
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d023      	beq.n	800598e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005948:	6a38      	ldr	r0, [r7, #32]
 800594a:	f004 fc49 	bl	800a1e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800594e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	3338      	adds	r3, #56	; 0x38
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	3304      	adds	r3, #4
 8005960:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d108      	bne.n	800597c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	b2db      	uxtb	r3, r3
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f007 ff8c 	bl	800d894 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	461a      	mov	r2, r3
 800598a:	2302      	movs	r3, #2
 800598c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fcd2 	bl	8006344 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	3301      	adds	r3, #1
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f47f af65 	bne.w	800587e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f005 fabb 	bl	800af34 <USB_ReadInterrupts>
 80059be:	4603      	mov	r3, r0
 80059c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c8:	d122      	bne.n	8005a10 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d108      	bne.n	80059fa <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059f0:	2100      	movs	r1, #0
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f008 f9c0 	bl	800dd78 <HAL_PCDEx_LPM_Callback>
 80059f8:	e002      	b.n	8005a00 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f007 ff10 	bl	800d820 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f005 fa8d 	bl	800af34 <USB_ReadInterrupts>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a24:	d112      	bne.n	8005a4c <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d102      	bne.n	8005a3c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f007 fecc 	bl	800d7d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f005 fa6f 	bl	800af34 <USB_ReadInterrupts>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a60:	d121      	bne.n	8005aa6 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005a70:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d111      	bne.n	8005aa0 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005a96:	2101      	movs	r1, #1
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f008 f96d 	bl	800dd78 <HAL_PCDEx_LPM_Callback>
 8005a9e:	e002      	b.n	8005aa6 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f007 fe97 	bl	800d7d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f005 fa42 	bl	800af34 <USB_ReadInterrupts>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	f040 80b5 	bne.w	8005c28 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2110      	movs	r1, #16
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f004 fb81 	bl	800a1e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae2:	e046      	b.n	8005b72 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	461a      	mov	r2, r3
 8005af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005af6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	461a      	mov	r2, r3
 8005b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b2a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b6a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	3301      	adds	r3, #1
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d3b3      	bcc.n	8005ae4 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b8e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d016      	beq.n	8005bc6 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba8:	f043 030b 	orr.w	r3, r3, #11
 8005bac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bbe:	f043 030b 	orr.w	r3, r3, #11
 8005bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc4:	e015      	b.n	8005bf2 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bd8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005bdc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bec:	f043 030b 	orr.w	r3, r3, #11
 8005bf0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c00:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c04:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f005 fa52 	bl	800b0bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f005 f981 	bl	800af34 <USB_ReadInterrupts>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d124      	bne.n	8005c88 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f005 fa17 	bl	800b076 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f004 fb44 	bl	800a2da <USB_GetDevSpeed>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681c      	ldr	r4, [r3, #0]
 8005c5e:	f001 fae3 	bl	8007228 <HAL_RCC_GetHCLKFreq>
 8005c62:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f004 f86b 	bl	8009d48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f007 fd8f 	bl	800d796 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f005 f951 	bl	800af34 <USB_ReadInterrupts>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d10a      	bne.n	8005cb2 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f007 fd6c 	bl	800d77a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f002 0208 	and.w	r2, r2, #8
 8005cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f005 f93c 	bl	800af34 <USB_ReadInterrupts>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d122      	bne.n	8005d0c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd6:	e014      	b.n	8005d02 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d105      	bne.n	8005cfc <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 faf3 	bl	80062e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	3301      	adds	r3, #1
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d3e5      	bcc.n	8005cd8 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f005 f90f 	bl	800af34 <USB_ReadInterrupts>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d20:	d13b      	bne.n	8005d9a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d22:	2301      	movs	r3, #1
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
 8005d26:	e02b      	b.n	8005d80 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	3340      	adds	r3, #64	; 0x40
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d115      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da12      	bge.n	8005d7a <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	333f      	adds	r3, #63	; 0x3f
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fab4 	bl	80062e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d3ce      	bcc.n	8005d28 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f005 f8c8 	bl	800af34 <USB_ReadInterrupts>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dae:	d155      	bne.n	8005e5c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005db0:	2301      	movs	r3, #1
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
 8005db4:	e045      	b.n	8005e42 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	4613      	mov	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d12e      	bne.n	8005e3c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005dde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da2b      	bge.n	8005e3c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005df0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d121      	bne.n	8005e3c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e38:	6053      	str	r3, [r2, #4]
            break;
 8005e3a:	e007      	b.n	8005e4c <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	3301      	adds	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d3b4      	bcc.n	8005db6 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f005 f867 	bl	800af34 <USB_ReadInterrupts>
 8005e66:	4603      	mov	r3, r0
 8005e68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e70:	d10a      	bne.n	8005e88 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f007 fd20 	bl	800d8b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f005 f851 	bl	800af34 <USB_ReadInterrupts>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d115      	bne.n	8005ec8 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f007 fd10 	bl	800d8d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
 8005ec4:	e000      	b.n	8005ec8 <HAL_PCD_IRQHandler+0x920>
      return;
 8005ec6:	bf00      	nop
    }
  }
}
 8005ec8:	3734      	adds	r7, #52	; 0x34
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd90      	pop	{r4, r7, pc}

08005ece <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_PCD_SetAddress+0x1a>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e013      	b.n	8005f10 <HAL_PCD_SetAddress+0x42>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f004 ffaf 	bl	800ae64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	70fb      	strb	r3, [r7, #3]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	803b      	strh	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da0f      	bge.n	8005f5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3338      	adds	r3, #56	; 0x38
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	705a      	strb	r2, [r3, #1]
 8005f5c:	e00f      	b.n	8005f7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 020f 	and.w	r2, r3, #15
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	3304      	adds	r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f8a:	883a      	ldrh	r2, [r7, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	78ba      	ldrb	r2, [r7, #2]
 8005f94:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fa8:	78bb      	ldrb	r3, [r7, #2]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d102      	bne.n	8005fb4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_PCD_EP_Open+0xaa>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e00e      	b.n	8005fe0 <HAL_PCD_EP_Open+0xc8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f004 f9a1 	bl	800a318 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005fde:	7afb      	ldrb	r3, [r7, #11]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	da0f      	bge.n	800601c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	3338      	adds	r3, #56	; 0x38
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	3304      	adds	r3, #4
 8006012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	705a      	strb	r2, [r3, #1]
 800601a:	e00f      	b.n	800603c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	f003 020f 	and.w	r2, r3, #15
 8006022:	4613      	mov	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	3304      	adds	r3, #4
 8006034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	b2da      	uxtb	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_PCD_EP_Close+0x6e>
 8006052:	2302      	movs	r3, #2
 8006054:	e00e      	b.n	8006074 <HAL_PCD_EP_Close+0x8c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	4618      	mov	r0, r3
 8006066:	f004 f9df 	bl	800a428 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	460b      	mov	r3, r1
 800608a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800608c:	7afb      	ldrb	r3, [r7, #11]
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	4613      	mov	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	3304      	adds	r3, #4
 80060a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2200      	movs	r2, #0
 80060bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060be:	7afb      	ldrb	r3, [r7, #11]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6979      	ldr	r1, [r7, #20]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f004 fa85 	bl	800a5e0 <USB_EPStartXfer>

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	f003 020f 	and.w	r2, r3, #15
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8006102:	681b      	ldr	r3, [r3, #0]
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	460b      	mov	r3, r1
 800611e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006120:	7afb      	ldrb	r3, [r7, #11]
 8006122:	f003 020f 	and.w	r2, r3, #15
 8006126:	4613      	mov	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	3338      	adds	r3, #56	; 0x38
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2200      	movs	r2, #0
 8006148:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2201      	movs	r2, #1
 800614e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	b2da      	uxtb	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6979      	ldr	r1, [r7, #20]
 8006162:	4618      	mov	r0, r3
 8006164:	f004 fa3c 	bl	800a5e0 <USB_EPStartXfer>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f003 020f 	and.w	r2, r3, #15
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	429a      	cmp	r2, r3
 800618a:	d901      	bls.n	8006190 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e04e      	b.n	800622e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da0f      	bge.n	80061b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 020f 	and.w	r2, r3, #15
 800619e:	4613      	mov	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	3338      	adds	r3, #56	; 0x38
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	3304      	adds	r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	705a      	strb	r2, [r3, #1]
 80061b6:	e00d      	b.n	80061d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4613      	mov	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_PCD_EP_SetStall+0x82>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e01c      	b.n	800622e <HAL_PCD_EP_SetStall+0xbc>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68f9      	ldr	r1, [r7, #12]
 8006202:	4618      	mov	r0, r3
 8006204:	f004 fd5a 	bl	800acbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	2b00      	cmp	r3, #0
 8006210:	d108      	bne.n	8006224 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f004 ff4c 	bl	800b0bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	f003 020f 	and.w	r2, r3, #15
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d901      	bls.n	8006254 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e042      	b.n	80062da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006258:	2b00      	cmp	r3, #0
 800625a:	da0f      	bge.n	800627c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	f003 020f 	and.w	r2, r3, #15
 8006262:	4613      	mov	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	3338      	adds	r3, #56	; 0x38
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4413      	add	r3, r2
 8006270:	3304      	adds	r3, #4
 8006272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	705a      	strb	r2, [r3, #1]
 800627a:	e00f      	b.n	800629c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	4613      	mov	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	3304      	adds	r3, #4
 8006294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_PCD_EP_ClrStall+0x86>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e00e      	b.n	80062da <HAL_PCD_EP_ClrStall+0xa4>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68f9      	ldr	r1, [r7, #12]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f004 fd64 	bl	800ad98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80062ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da0c      	bge.n	8006310 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	3338      	adds	r3, #56	; 0x38
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	3304      	adds	r3, #4
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e00c      	b.n	800632a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	f003 020f 	and.w	r2, r3, #15
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4413      	add	r3, r2
 8006326:	3304      	adds	r3, #4
 8006328:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	4618      	mov	r0, r3
 8006332:	f004 fb87 	bl	800aa44 <USB_EPStopXfer>
 8006336:	4603      	mov	r3, r0
 8006338:	72fb      	strb	r3, [r7, #11]

  return ret;
 800633a:	7afb      	ldrb	r3, [r7, #11]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	3338      	adds	r3, #56	; 0x38
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4413      	add	r3, r2
 8006368:	3304      	adds	r3, #4
 800636a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	695a      	ldr	r2, [r3, #20]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d901      	bls.n	800637c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e067      	b.n	800644c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	429a      	cmp	r2, r3
 8006390:	d902      	bls.n	8006398 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3303      	adds	r3, #3
 800639c:	089b      	lsrs	r3, r3, #2
 800639e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063a0:	e026      	b.n	80063f0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d902      	bls.n	80063be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3303      	adds	r3, #3
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68d9      	ldr	r1, [r3, #12]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	6978      	ldr	r0, [r7, #20]
 80063d4:	f004 fbe0 	bl	800ab98 <USB_WritePacket>

    ep->xfer_buff  += len;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	441a      	add	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	441a      	add	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	429a      	cmp	r2, r3
 8006404:	d809      	bhi.n	800641a <PCD_WriteEmptyTxFifo+0xd6>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	695a      	ldr	r2, [r3, #20]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800640e:	429a      	cmp	r2, r3
 8006410:	d203      	bcs.n	800641a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1c3      	bne.n	80063a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	429a      	cmp	r2, r3
 8006424:	d811      	bhi.n	800644a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	2201      	movs	r2, #1
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	43db      	mvns	r3, r3
 8006440:	6939      	ldr	r1, [r7, #16]
 8006442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006446:	4013      	ands	r3, r2
 8006448:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	333c      	adds	r3, #60	; 0x3c
 800646c:	3304      	adds	r3, #4
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a19      	ldr	r2, [pc, #100]	; (80064ec <PCD_EP_OutXfrComplete_int+0x98>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d124      	bne.n	80064d4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	461a      	mov	r2, r3
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	6093      	str	r3, [r2, #8]
 80064a8:	e01a      	b.n	80064e0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	2320      	movs	r3, #32
 80064c4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f007 f91f 	bl	800d710 <HAL_PCD_DataOutStageCallback>
 80064d2:	e005      	b.n	80064e0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f007 f918 	bl	800d710 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	4f54310a 	.word	0x4f54310a

080064f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	333c      	adds	r3, #60	; 0x3c
 8006508:	3304      	adds	r3, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a0c      	ldr	r2, [pc, #48]	; (8006554 <PCD_EP_OutSetupPacket_int+0x64>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d90e      	bls.n	8006544 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653c:	461a      	mov	r2, r3
 800653e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006542:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f007 f8d1 	bl	800d6ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	4f54300a 	.word	0x4f54300a

08006558 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
 8006564:	4613      	mov	r3, r2
 8006566:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006576:	883b      	ldrh	r3, [r7, #0]
 8006578:	0419      	lsls	r1, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	430a      	orrs	r2, r1
 8006582:	629a      	str	r2, [r3, #40]	; 0x28
 8006584:	e028      	b.n	80065d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	0c1b      	lsrs	r3, r3, #16
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4413      	add	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]
 8006598:	e00d      	b.n	80065b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	3340      	adds	r3, #64	; 0x40
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	4413      	add	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	3301      	adds	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
 80065b6:	7bfa      	ldrb	r2, [r7, #15]
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	429a      	cmp	r2, r3
 80065be:	d3ec      	bcc.n	800659a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065c0:	883b      	ldrh	r3, [r7, #0]
 80065c2:	0418      	lsls	r0, r3, #16
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4302      	orrs	r2, r0
 80065d0:	3340      	adds	r3, #64	; 0x40
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	887a      	ldrh	r2, [r7, #2]
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663a:	f043 0303 	orr.w	r3, r3, #3
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a04      	ldr	r2, [pc, #16]	; (800666c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800665a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665e:	6013      	str	r3, [r2, #0]
}
 8006660:	bf00      	nop
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40007000 	.word	0x40007000

08006670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <HAL_PWREx_GetVoltageRange+0x18>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800667c:	4618      	mov	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40007000 	.word	0x40007000

0800668c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669a:	d130      	bne.n	80066fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800669c:	4b23      	ldr	r3, [pc, #140]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a8:	d038      	beq.n	800671c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066aa:	4b20      	ldr	r3, [pc, #128]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066b2:	4a1e      	ldr	r2, [pc, #120]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066ba:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2232      	movs	r2, #50	; 0x32
 80066c0:	fb02 f303 	mul.w	r3, r2, r3
 80066c4:	4a1b      	ldr	r2, [pc, #108]	; (8006734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0c9b      	lsrs	r3, r3, #18
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066d0:	e002      	b.n	80066d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066d8:	4b14      	ldr	r3, [pc, #80]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e4:	d102      	bne.n	80066ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f2      	bne.n	80066d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f8:	d110      	bne.n	800671c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e00f      	b.n	800671e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d007      	beq.n	800671c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800670c:	4b07      	ldr	r3, [pc, #28]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006714:	4a05      	ldr	r2, [pc, #20]	; (800672c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800671a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40007000 	.word	0x40007000
 8006730:	20000090 	.word	0x20000090
 8006734:	431bde83 	.word	0x431bde83

08006738 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_PWREx_EnableVddUSB+0x1c>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	4a04      	ldr	r2, [pc, #16]	; (8006754 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006746:	6053      	str	r3, [r2, #4]
}
 8006748:	bf00      	nop
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40007000 	.word	0x40007000

08006758 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e3ca      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800676a:	4b97      	ldr	r3, [pc, #604]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006774:	4b94      	ldr	r3, [pc, #592]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80e4 	beq.w	8006954 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_RCC_OscConfig+0x4a>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b0c      	cmp	r3, #12
 8006796:	f040 808b 	bne.w	80068b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 8087 	bne.w	80068b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067a2:	4b89      	ldr	r3, [pc, #548]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_RCC_OscConfig+0x62>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e3a2      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	4b82      	ldr	r3, [pc, #520]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <HAL_RCC_OscConfig+0x7c>
 80067ca:	4b7f      	ldr	r3, [pc, #508]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067d2:	e005      	b.n	80067e0 <HAL_RCC_OscConfig+0x88>
 80067d4:	4b7c      	ldr	r3, [pc, #496]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80067d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d223      	bcs.n	800682c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fd55 	bl	8007298 <RCC_SetFlashLatencyFromMSIRange>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e383      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067f8:	4b73      	ldr	r3, [pc, #460]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a72      	ldr	r2, [pc, #456]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80067fe:	f043 0308 	orr.w	r3, r3, #8
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4b70      	ldr	r3, [pc, #448]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	496d      	ldr	r1, [pc, #436]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006812:	4313      	orrs	r3, r2
 8006814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006816:	4b6c      	ldr	r3, [pc, #432]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	4968      	ldr	r1, [pc, #416]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006826:	4313      	orrs	r3, r2
 8006828:	604b      	str	r3, [r1, #4]
 800682a:	e025      	b.n	8006878 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800682c:	4b66      	ldr	r3, [pc, #408]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a65      	ldr	r2, [pc, #404]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006832:	f043 0308 	orr.w	r3, r3, #8
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	4b63      	ldr	r3, [pc, #396]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	4960      	ldr	r1, [pc, #384]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006846:	4313      	orrs	r3, r2
 8006848:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800684a:	4b5f      	ldr	r3, [pc, #380]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	495b      	ldr	r1, [pc, #364]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 800685a:	4313      	orrs	r3, r2
 800685c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fd15 	bl	8007298 <RCC_SetFlashLatencyFromMSIRange>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e343      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006878:	f000 fc4a 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 800687c:	4602      	mov	r2, r0
 800687e:	4b52      	ldr	r3, [pc, #328]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	091b      	lsrs	r3, r3, #4
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	4950      	ldr	r1, [pc, #320]	; (80069cc <HAL_RCC_OscConfig+0x274>)
 800688a:	5ccb      	ldrb	r3, [r1, r3]
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
 8006894:	4a4e      	ldr	r2, [pc, #312]	; (80069d0 <HAL_RCC_OscConfig+0x278>)
 8006896:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006898:	4b4e      	ldr	r3, [pc, #312]	; (80069d4 <HAL_RCC_OscConfig+0x27c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f7fd f9cb 	bl	8003c38 <HAL_InitTick>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d052      	beq.n	8006952 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	e327      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d032      	beq.n	800691e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068b8:	4b43      	ldr	r3, [pc, #268]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a42      	ldr	r2, [pc, #264]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068c4:	f7fd fa08 	bl	8003cd8 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068cc:	f7fd fa04 	bl	8003cd8 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e310      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068de:	4b3a      	ldr	r3, [pc, #232]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f0      	beq.n	80068cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068ea:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a36      	ldr	r2, [pc, #216]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80068f0:	f043 0308 	orr.w	r3, r3, #8
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b34      	ldr	r3, [pc, #208]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4931      	ldr	r1, [pc, #196]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006908:	4b2f      	ldr	r3, [pc, #188]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	492c      	ldr	r1, [pc, #176]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]
 800691c:	e01a      	b.n	8006954 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800691e:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a29      	ldr	r2, [pc, #164]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800692a:	f7fd f9d5 	bl	8003cd8 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006932:	f7fd f9d1 	bl	8003cd8 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e2dd      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006944:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f0      	bne.n	8006932 <HAL_RCC_OscConfig+0x1da>
 8006950:	e000      	b.n	8006954 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006952:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d074      	beq.n	8006a4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b08      	cmp	r3, #8
 8006964:	d005      	beq.n	8006972 <HAL_RCC_OscConfig+0x21a>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	d10e      	bne.n	800698a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b03      	cmp	r3, #3
 8006970:	d10b      	bne.n	800698a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d064      	beq.n	8006a48 <HAL_RCC_OscConfig+0x2f0>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d160      	bne.n	8006a48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e2ba      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006992:	d106      	bne.n	80069a2 <HAL_RCC_OscConfig+0x24a>
 8006994:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a0b      	ldr	r2, [pc, #44]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 800699a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e026      	b.n	80069f0 <HAL_RCC_OscConfig+0x298>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069aa:	d115      	bne.n	80069d8 <HAL_RCC_OscConfig+0x280>
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a05      	ldr	r2, [pc, #20]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80069b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a02      	ldr	r2, [pc, #8]	; (80069c8 <HAL_RCC_OscConfig+0x270>)
 80069be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e014      	b.n	80069f0 <HAL_RCC_OscConfig+0x298>
 80069c6:	bf00      	nop
 80069c8:	40021000 	.word	0x40021000
 80069cc:	08013df8 	.word	0x08013df8
 80069d0:	20000090 	.word	0x20000090
 80069d4:	20000094 	.word	0x20000094
 80069d8:	4ba0      	ldr	r3, [pc, #640]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a9f      	ldr	r2, [pc, #636]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 80069de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	4b9d      	ldr	r3, [pc, #628]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a9c      	ldr	r2, [pc, #624]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 80069ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fd f96e 	bl	8003cd8 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a00:	f7fd f96a 	bl	8003cd8 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b64      	cmp	r3, #100	; 0x64
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e276      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a12:	4b92      	ldr	r3, [pc, #584]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x2a8>
 8006a1e:	e014      	b.n	8006a4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fd f95a 	bl	8003cd8 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a28:	f7fd f956 	bl	8003cd8 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b64      	cmp	r3, #100	; 0x64
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e262      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a3a:	4b88      	ldr	r3, [pc, #544]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x2d0>
 8006a46:	e000      	b.n	8006a4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d060      	beq.n	8006b18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d005      	beq.n	8006a68 <HAL_RCC_OscConfig+0x310>
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d119      	bne.n	8006a96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d116      	bne.n	8006a96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a68:	4b7c      	ldr	r3, [pc, #496]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_RCC_OscConfig+0x328>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e23f      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a80:	4b76      	ldr	r3, [pc, #472]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	061b      	lsls	r3, r3, #24
 8006a8e:	4973      	ldr	r1, [pc, #460]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a94:	e040      	b.n	8006b18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d023      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a9e:	4b6f      	ldr	r3, [pc, #444]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a6e      	ldr	r2, [pc, #440]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aaa:	f7fd f915 	bl	8003cd8 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab2:	f7fd f911 	bl	8003cd8 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e21d      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ac4:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f0      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad0:	4b62      	ldr	r3, [pc, #392]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	061b      	lsls	r3, r3, #24
 8006ade:	495f      	ldr	r1, [pc, #380]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	604b      	str	r3, [r1, #4]
 8006ae4:	e018      	b.n	8006b18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae6:	4b5d      	ldr	r3, [pc, #372]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a5c      	ldr	r2, [pc, #368]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af2:	f7fd f8f1 	bl	8003cd8 <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006afa:	f7fd f8ed 	bl	8003cd8 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e1f9      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b0c:	4b53      	ldr	r3, [pc, #332]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f0      	bne.n	8006afa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d03c      	beq.n	8006b9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01c      	beq.n	8006b66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b2c:	4b4b      	ldr	r3, [pc, #300]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b32:	4a4a      	ldr	r2, [pc, #296]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3c:	f7fd f8cc 	bl	8003cd8 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b44:	f7fd f8c8 	bl	8003cd8 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e1d4      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b56:	4b41      	ldr	r3, [pc, #260]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0ef      	beq.n	8006b44 <HAL_RCC_OscConfig+0x3ec>
 8006b64:	e01b      	b.n	8006b9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b66:	4b3d      	ldr	r3, [pc, #244]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b6c:	4a3b      	ldr	r2, [pc, #236]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b76:	f7fd f8af 	bl	8003cd8 <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b7e:	f7fd f8ab 	bl	8003cd8 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e1b7      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b90:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1ef      	bne.n	8006b7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 80a6 	beq.w	8006cf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bac:	2300      	movs	r3, #0
 8006bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10d      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bbc:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	4a26      	ldr	r2, [pc, #152]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8006bc8:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd8:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <HAL_RCC_OscConfig+0x508>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d118      	bne.n	8006c16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006be4:	4b1e      	ldr	r3, [pc, #120]	; (8006c60 <HAL_RCC_OscConfig+0x508>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a1d      	ldr	r2, [pc, #116]	; (8006c60 <HAL_RCC_OscConfig+0x508>)
 8006bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bf0:	f7fd f872 	bl	8003cd8 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf8:	f7fd f86e 	bl	8003cd8 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e17a      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c0a:	4b15      	ldr	r3, [pc, #84]	; (8006c60 <HAL_RCC_OscConfig+0x508>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d108      	bne.n	8006c30 <HAL_RCC_OscConfig+0x4d8>
 8006c1e:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	4a0d      	ldr	r2, [pc, #52]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c2e:	e029      	b.n	8006c84 <HAL_RCC_OscConfig+0x52c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	d115      	bne.n	8006c64 <HAL_RCC_OscConfig+0x50c>
 8006c38:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3e:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	4a03      	ldr	r2, [pc, #12]	; (8006c5c <HAL_RCC_OscConfig+0x504>)
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c58:	e014      	b.n	8006c84 <HAL_RCC_OscConfig+0x52c>
 8006c5a:	bf00      	nop
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40007000 	.word	0x40007000
 8006c64:	4b9c      	ldr	r3, [pc, #624]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	4a9b      	ldr	r2, [pc, #620]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c74:	4b98      	ldr	r3, [pc, #608]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7a:	4a97      	ldr	r2, [pc, #604]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d016      	beq.n	8006cba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8c:	f7fd f824 	bl	8003cd8 <HAL_GetTick>
 8006c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c94:	f7fd f820 	bl	8003cd8 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e12a      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006caa:	4b8b      	ldr	r3, [pc, #556]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0ed      	beq.n	8006c94 <HAL_RCC_OscConfig+0x53c>
 8006cb8:	e015      	b.n	8006ce6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cba:	f7fd f80d 	bl	8003cd8 <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cc2:	f7fd f809 	bl	8003cd8 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e113      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cd8:	4b7f      	ldr	r3, [pc, #508]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1ed      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cec:	4b7a      	ldr	r3, [pc, #488]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf0:	4a79      	ldr	r2, [pc, #484]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80fe 	beq.w	8006efe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	f040 80d0 	bne.w	8006eac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d0c:	4b72      	ldr	r3, [pc, #456]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f003 0203 	and.w	r2, r3, #3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d130      	bne.n	8006d82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d127      	bne.n	8006d82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d11f      	bne.n	8006d82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d4c:	2a07      	cmp	r2, #7
 8006d4e:	bf14      	ite	ne
 8006d50:	2201      	movne	r2, #1
 8006d52:	2200      	moveq	r2, #0
 8006d54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d113      	bne.n	8006d82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	3b01      	subs	r3, #1
 8006d68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d109      	bne.n	8006d82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d06e      	beq.n	8006e60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b0c      	cmp	r3, #12
 8006d86:	d069      	beq.n	8006e5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006d88:	4b53      	ldr	r3, [pc, #332]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006d94:	4b50      	ldr	r3, [pc, #320]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0ad      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006da4:	4b4c      	ldr	r3, [pc, #304]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a4b      	ldr	r2, [pc, #300]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006db0:	f7fc ff92 	bl	8003cd8 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fc ff8e 	bl	8003cd8 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e09a      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dca:	4b43      	ldr	r3, [pc, #268]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dd6:	4b40      	ldr	r3, [pc, #256]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	4b40      	ldr	r3, [pc, #256]	; (8006edc <HAL_RCC_OscConfig+0x784>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006de6:	3a01      	subs	r2, #1
 8006de8:	0112      	lsls	r2, r2, #4
 8006dea:	4311      	orrs	r1, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006df0:	0212      	lsls	r2, r2, #8
 8006df2:	4311      	orrs	r1, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006df8:	0852      	lsrs	r2, r2, #1
 8006dfa:	3a01      	subs	r2, #1
 8006dfc:	0552      	lsls	r2, r2, #21
 8006dfe:	4311      	orrs	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e04:	0852      	lsrs	r2, r2, #1
 8006e06:	3a01      	subs	r2, #1
 8006e08:	0652      	lsls	r2, r2, #25
 8006e0a:	4311      	orrs	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e10:	0912      	lsrs	r2, r2, #4
 8006e12:	0452      	lsls	r2, r2, #17
 8006e14:	430a      	orrs	r2, r1
 8006e16:	4930      	ldr	r1, [pc, #192]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e1c:	4b2e      	ldr	r3, [pc, #184]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a2d      	ldr	r2, [pc, #180]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4a2a      	ldr	r2, [pc, #168]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e34:	f7fc ff50 	bl	8003cd8 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3c:	f7fc ff4c 	bl	8003cd8 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e058      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e4e:	4b22      	ldr	r3, [pc, #136]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e5a:	e050      	b.n	8006efe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e04f      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d148      	bne.n	8006efe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e78:	4b17      	ldr	r3, [pc, #92]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e84:	f7fc ff28 	bl	8003cd8 <HAL_GetTick>
 8006e88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e8c:	f7fc ff24 	bl	8003cd8 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e030      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x734>
 8006eaa:	e028      	b.n	8006efe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b0c      	cmp	r3, #12
 8006eb0:	d023      	beq.n	8006efa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <HAL_RCC_OscConfig+0x780>)
 8006eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fc ff0b 	bl	8003cd8 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec4:	e00c      	b.n	8006ee0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7fc ff07 	bl	8003cd8 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d905      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e013      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee0:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <HAL_RCC_OscConfig+0x7b0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1ec      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <HAL_RCC_OscConfig+0x7b0>)
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	4905      	ldr	r1, [pc, #20]	; (8006f08 <HAL_RCC_OscConfig+0x7b0>)
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_RCC_OscConfig+0x7b4>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	60cb      	str	r3, [r1, #12]
 8006ef8:	e001      	b.n	8006efe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	feeefffc 	.word	0xfeeefffc

08006f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0e7      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f24:	4b75      	ldr	r3, [pc, #468]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d910      	bls.n	8006f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f32:	4b72      	ldr	r3, [pc, #456]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 0207 	bic.w	r2, r3, #7
 8006f3a:	4970      	ldr	r1, [pc, #448]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f42:	4b6e      	ldr	r3, [pc, #440]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0cf      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	4b66      	ldr	r3, [pc, #408]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d908      	bls.n	8006f82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f70:	4b63      	ldr	r3, [pc, #396]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	4960      	ldr	r1, [pc, #384]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d04c      	beq.n	8007028 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f96:	4b5a      	ldr	r3, [pc, #360]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d121      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e0a6      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d107      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fae:	4b54      	ldr	r3, [pc, #336]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d115      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e09a      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fc6:	4b4e      	ldr	r3, [pc, #312]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e08e      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fd6:	4b4a      	ldr	r3, [pc, #296]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e086      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fe6:	4b46      	ldr	r3, [pc, #280]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f023 0203 	bic.w	r2, r3, #3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4943      	ldr	r1, [pc, #268]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff8:	f7fc fe6e 	bl	8003cd8 <HAL_GetTick>
 8006ffc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffe:	e00a      	b.n	8007016 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007000:	f7fc fe6a 	bl	8003cd8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e06e      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007016:	4b3a      	ldr	r3, [pc, #232]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 020c 	and.w	r2, r3, #12
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	429a      	cmp	r2, r3
 8007026:	d1eb      	bne.n	8007000 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d010      	beq.n	8007056 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	4b31      	ldr	r3, [pc, #196]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007040:	429a      	cmp	r2, r3
 8007042:	d208      	bcs.n	8007056 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007044:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	492b      	ldr	r1, [pc, #172]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8007052:	4313      	orrs	r3, r2
 8007054:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007056:	4b29      	ldr	r3, [pc, #164]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d210      	bcs.n	8007086 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f023 0207 	bic.w	r2, r3, #7
 800706c:	4923      	ldr	r1, [pc, #140]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007074:	4b21      	ldr	r3, [pc, #132]	; (80070fc <HAL_RCC_ClockConfig+0x1ec>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d001      	beq.n	8007086 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e036      	b.n	80070f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007092:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	4918      	ldr	r1, [pc, #96]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b0:	4b13      	ldr	r3, [pc, #76]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	4910      	ldr	r1, [pc, #64]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070c4:	f000 f824 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <HAL_RCC_ClockConfig+0x1f0>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	091b      	lsrs	r3, r3, #4
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	490b      	ldr	r1, [pc, #44]	; (8007104 <HAL_RCC_ClockConfig+0x1f4>)
 80070d6:	5ccb      	ldrb	r3, [r1, r3]
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	4a09      	ldr	r2, [pc, #36]	; (8007108 <HAL_RCC_ClockConfig+0x1f8>)
 80070e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80070e4:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1fc>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fc fda5 	bl	8003c38 <HAL_InitTick>
 80070ee:	4603      	mov	r3, r0
 80070f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80070f2:	7afb      	ldrb	r3, [r7, #11]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40022000 	.word	0x40022000
 8007100:	40021000 	.word	0x40021000
 8007104:	08013df8 	.word	0x08013df8
 8007108:	20000090 	.word	0x20000090
 800710c:	20000094 	.word	0x20000094

08007110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	; 0x24
 8007114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	2300      	movs	r3, #0
 800711c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800711e:	4b3e      	ldr	r3, [pc, #248]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 030c 	and.w	r3, r3, #12
 8007126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007128:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x34>
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d121      	bne.n	8007182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d11e      	bne.n	8007182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007144:	4b34      	ldr	r3, [pc, #208]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d107      	bne.n	8007160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007150:	4b31      	ldr	r3, [pc, #196]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 8007152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	61fb      	str	r3, [r7, #28]
 800715e:	e005      	b.n	800716c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007160:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800716c:	4a2b      	ldr	r2, [pc, #172]	; (800721c <HAL_RCC_GetSysClockFreq+0x10c>)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10d      	bne.n	8007198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007180:	e00a      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d102      	bne.n	800718e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007188:	4b25      	ldr	r3, [pc, #148]	; (8007220 <HAL_RCC_GetSysClockFreq+0x110>)
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	e004      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d101      	bne.n	8007198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007194:	4b23      	ldr	r3, [pc, #140]	; (8007224 <HAL_RCC_GetSysClockFreq+0x114>)
 8007196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d134      	bne.n	8007208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800719e:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d003      	beq.n	80071b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d003      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0xac>
 80071b4:	e005      	b.n	80071c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80071b6:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <HAL_RCC_GetSysClockFreq+0x110>)
 80071b8:	617b      	str	r3, [r7, #20]
      break;
 80071ba:	e005      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80071bc:	4b19      	ldr	r3, [pc, #100]	; (8007224 <HAL_RCC_GetSysClockFreq+0x114>)
 80071be:	617b      	str	r3, [r7, #20]
      break;
 80071c0:	e002      	b.n	80071c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	617b      	str	r3, [r7, #20]
      break;
 80071c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071c8:	4b13      	ldr	r3, [pc, #76]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	091b      	lsrs	r3, r3, #4
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	3301      	adds	r3, #1
 80071d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	fb03 f202 	mul.w	r2, r3, r2
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071ee:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	0e5b      	lsrs	r3, r3, #25
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	3301      	adds	r3, #1
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	fbb2 f3f3 	udiv	r3, r2, r3
 8007206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007208:	69bb      	ldr	r3, [r7, #24]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3724      	adds	r7, #36	; 0x24
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000
 800721c:	08013e10 	.word	0x08013e10
 8007220:	00f42400 	.word	0x00f42400
 8007224:	007a1200 	.word	0x007a1200

08007228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800722c:	4b03      	ldr	r3, [pc, #12]	; (800723c <HAL_RCC_GetHCLKFreq+0x14>)
 800722e:	681b      	ldr	r3, [r3, #0]
}
 8007230:	4618      	mov	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20000090 	.word	0x20000090

08007240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007244:	f7ff fff0 	bl	8007228 <HAL_RCC_GetHCLKFreq>
 8007248:	4602      	mov	r2, r0
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	4904      	ldr	r1, [pc, #16]	; (8007268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007256:	5ccb      	ldrb	r3, [r1, r3]
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40021000 	.word	0x40021000
 8007268:	08013e08 	.word	0x08013e08

0800726c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007270:	f7ff ffda 	bl	8007228 <HAL_RCC_GetHCLKFreq>
 8007274:	4602      	mov	r2, r0
 8007276:	4b06      	ldr	r3, [pc, #24]	; (8007290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	0adb      	lsrs	r3, r3, #11
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4904      	ldr	r1, [pc, #16]	; (8007294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007282:	5ccb      	ldrb	r3, [r1, r3]
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800728c:	4618      	mov	r0, r3
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40021000 	.word	0x40021000
 8007294:	08013e08 	.word	0x08013e08

08007298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80072a4:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80072b0:	f7ff f9de 	bl	8006670 <HAL_PWREx_GetVoltageRange>
 80072b4:	6178      	str	r0, [r7, #20]
 80072b6:	e014      	b.n	80072e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072bc:	4a24      	ldr	r2, [pc, #144]	; (8007350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c2:	6593      	str	r3, [r2, #88]	; 0x58
 80072c4:	4b22      	ldr	r3, [pc, #136]	; (8007350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80072d0:	f7ff f9ce 	bl	8006670 <HAL_PWREx_GetVoltageRange>
 80072d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80072d6:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e8:	d10b      	bne.n	8007302 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b80      	cmp	r3, #128	; 0x80
 80072ee:	d919      	bls.n	8007324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2ba0      	cmp	r3, #160	; 0xa0
 80072f4:	d902      	bls.n	80072fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80072f6:	2302      	movs	r3, #2
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	e013      	b.n	8007324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80072fc:	2301      	movs	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	e010      	b.n	8007324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b80      	cmp	r3, #128	; 0x80
 8007306:	d902      	bls.n	800730e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007308:	2303      	movs	r3, #3
 800730a:	613b      	str	r3, [r7, #16]
 800730c:	e00a      	b.n	8007324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b80      	cmp	r3, #128	; 0x80
 8007312:	d102      	bne.n	800731a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007314:	2302      	movs	r3, #2
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	e004      	b.n	8007324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b70      	cmp	r3, #112	; 0x70
 800731e:	d101      	bne.n	8007324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007320:	2301      	movs	r3, #1
 8007322:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f023 0207 	bic.w	r2, r3, #7
 800732c:	4909      	ldr	r1, [pc, #36]	; (8007354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	d001      	beq.n	8007346 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40021000 	.word	0x40021000
 8007354:	40022000 	.word	0x40022000

08007358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007360:	2300      	movs	r3, #0
 8007362:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007364:	2300      	movs	r3, #0
 8007366:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007370:	2b00      	cmp	r3, #0
 8007372:	d041      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007378:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800737c:	d02a      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800737e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007382:	d824      	bhi.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007388:	d008      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800738a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800738e:	d81e      	bhi.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007398:	d010      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800739a:	e018      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800739c:	4b86      	ldr	r3, [pc, #536]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	4a85      	ldr	r2, [pc, #532]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073a8:	e015      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3304      	adds	r3, #4
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 facb 	bl	800794c <RCCEx_PLLSAI1_Config>
 80073b6:	4603      	mov	r3, r0
 80073b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073ba:	e00c      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3320      	adds	r3, #32
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fbb6 	bl	8007b34 <RCCEx_PLLSAI2_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073cc:	e003      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	74fb      	strb	r3, [r7, #19]
      break;
 80073d2:	e000      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80073d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d6:	7cfb      	ldrb	r3, [r7, #19]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10b      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073dc:	4b76      	ldr	r3, [pc, #472]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ea:	4973      	ldr	r1, [pc, #460]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80073f2:	e001      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d041      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007408:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800740c:	d02a      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800740e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007412:	d824      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007418:	d008      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800741a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800741e:	d81e      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007428:	d010      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800742a:	e018      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800742c:	4b62      	ldr	r3, [pc, #392]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	4a61      	ldr	r2, [pc, #388]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007436:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007438:	e015      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3304      	adds	r3, #4
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fa83 	bl	800794c <RCCEx_PLLSAI1_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800744a:	e00c      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3320      	adds	r3, #32
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fb6e 	bl	8007b34 <RCCEx_PLLSAI2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800745c:	e003      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	74fb      	strb	r3, [r7, #19]
      break;
 8007462:	e000      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007466:	7cfb      	ldrb	r3, [r7, #19]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800746c:	4b52      	ldr	r3, [pc, #328]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800746e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007472:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800747a:	494f      	ldr	r1, [pc, #316]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800747c:	4313      	orrs	r3, r2
 800747e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007482:	e001      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007484:	7cfb      	ldrb	r3, [r7, #19]
 8007486:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80a0 	beq.w	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007496:	2300      	movs	r3, #0
 8007498:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800749a:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80074aa:	2300      	movs	r3, #0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00d      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074b0:	4b41      	ldr	r3, [pc, #260]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b4:	4a40      	ldr	r2, [pc, #256]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ba:	6593      	str	r3, [r2, #88]	; 0x58
 80074bc:	4b3e      	ldr	r3, [pc, #248]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c4:	60bb      	str	r3, [r7, #8]
 80074c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c8:	2301      	movs	r3, #1
 80074ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074cc:	4b3b      	ldr	r3, [pc, #236]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a3a      	ldr	r2, [pc, #232]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074d8:	f7fc fbfe 	bl	8003cd8 <HAL_GetTick>
 80074dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80074de:	e009      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e0:	f7fc fbfa 	bl	8003cd8 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d902      	bls.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	74fb      	strb	r3, [r7, #19]
        break;
 80074f2:	e005      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80074f4:	4b31      	ldr	r3, [pc, #196]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0ef      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007500:	7cfb      	ldrb	r3, [r7, #19]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d15c      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007506:	4b2c      	ldr	r3, [pc, #176]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007510:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01f      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	429a      	cmp	r2, r3
 8007522:	d019      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007524:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800752e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007530:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	4a20      	ldr	r2, [pc, #128]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800753c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007540:	4b1d      	ldr	r3, [pc, #116]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007546:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007550:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d016      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007562:	f7fc fbb9 	bl	8003cd8 <HAL_GetTick>
 8007566:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007568:	e00b      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800756a:	f7fc fbb5 	bl	8003cd8 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	f241 3288 	movw	r2, #5000	; 0x1388
 8007578:	4293      	cmp	r3, r2
 800757a:	d902      	bls.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	74fb      	strb	r3, [r7, #19]
            break;
 8007580:	e006      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0ec      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007590:	7cfb      	ldrb	r3, [r7, #19]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10c      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007596:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a6:	4904      	ldr	r1, [pc, #16]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80075ae:	e009      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075b0:	7cfb      	ldrb	r3, [r7, #19]
 80075b2:	74bb      	strb	r3, [r7, #18]
 80075b4:	e006      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80075b6:	bf00      	nop
 80075b8:	40021000 	.word	0x40021000
 80075bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c0:	7cfb      	ldrb	r3, [r7, #19]
 80075c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075c4:	7c7b      	ldrb	r3, [r7, #17]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d105      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ca:	4b9e      	ldr	r3, [pc, #632]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ce:	4a9d      	ldr	r2, [pc, #628]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075e2:	4b98      	ldr	r3, [pc, #608]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e8:	f023 0203 	bic.w	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	4994      	ldr	r1, [pc, #592]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007604:	4b8f      	ldr	r3, [pc, #572]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760a:	f023 020c 	bic.w	r2, r3, #12
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	498c      	ldr	r1, [pc, #560]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007626:	4b87      	ldr	r3, [pc, #540]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	4983      	ldr	r1, [pc, #524]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007648:	4b7e      	ldr	r3, [pc, #504]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	497b      	ldr	r1, [pc, #492]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800766a:	4b76      	ldr	r3, [pc, #472]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007678:	4972      	ldr	r1, [pc, #456]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800768c:	4b6d      	ldr	r3, [pc, #436]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	496a      	ldr	r1, [pc, #424]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ae:	4b65      	ldr	r3, [pc, #404]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076bc:	4961      	ldr	r1, [pc, #388]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076d0:	4b5c      	ldr	r3, [pc, #368]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076de:	4959      	ldr	r1, [pc, #356]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076f2:	4b54      	ldr	r3, [pc, #336]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	4950      	ldr	r1, [pc, #320]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007714:	4b4b      	ldr	r3, [pc, #300]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007722:	4948      	ldr	r1, [pc, #288]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007736:	4b43      	ldr	r3, [pc, #268]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007744:	493f      	ldr	r1, [pc, #252]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d028      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007758:	4b3a      	ldr	r3, [pc, #232]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007766:	4937      	ldr	r1, [pc, #220]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007776:	d106      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007778:	4b32      	ldr	r3, [pc, #200]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4a31      	ldr	r2, [pc, #196]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800777e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007782:	60d3      	str	r3, [r2, #12]
 8007784:	e011      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800778e:	d10c      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3304      	adds	r3, #4
 8007794:	2101      	movs	r1, #1
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f8d8 	bl	800794c <RCCEx_PLLSAI1_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80077a0:	7cfb      	ldrb	r3, [r7, #19]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80077a6:	7cfb      	ldrb	r3, [r7, #19]
 80077a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d028      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077b6:	4b23      	ldr	r3, [pc, #140]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c4:	491f      	ldr	r1, [pc, #124]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077d4:	d106      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077d6:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	4a1a      	ldr	r2, [pc, #104]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e0:	60d3      	str	r3, [r2, #12]
 80077e2:	e011      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077ec:	d10c      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3304      	adds	r3, #4
 80077f2:	2101      	movs	r1, #1
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 f8a9 	bl	800794c <RCCEx_PLLSAI1_Config>
 80077fa:	4603      	mov	r3, r0
 80077fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007804:	7cfb      	ldrb	r3, [r7, #19]
 8007806:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d02b      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007822:	4908      	ldr	r1, [pc, #32]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007824:	4313      	orrs	r3, r2
 8007826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800782e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007832:	d109      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	4a02      	ldr	r2, [pc, #8]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800783a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783e:	60d3      	str	r3, [r2, #12]
 8007840:	e014      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007842:	bf00      	nop
 8007844:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007850:	d10c      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3304      	adds	r3, #4
 8007856:	2101      	movs	r1, #1
 8007858:	4618      	mov	r0, r3
 800785a:	f000 f877 	bl	800794c <RCCEx_PLLSAI1_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007862:	7cfb      	ldrb	r3, [r7, #19]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007868:	7cfb      	ldrb	r3, [r7, #19]
 800786a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d02f      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007878:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007886:	4928      	ldr	r1, [pc, #160]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007888:	4313      	orrs	r3, r2
 800788a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007896:	d10d      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3304      	adds	r3, #4
 800789c:	2102      	movs	r1, #2
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f854 	bl	800794c <RCCEx_PLLSAI1_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078a8:	7cfb      	ldrb	r3, [r7, #19]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d014      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80078ae:	7cfb      	ldrb	r3, [r7, #19]
 80078b0:	74bb      	strb	r3, [r7, #18]
 80078b2:	e011      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3320      	adds	r3, #32
 80078c2:	2102      	movs	r1, #2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f935 	bl	8007b34 <RCCEx_PLLSAI2_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078ce:	7cfb      	ldrb	r3, [r7, #19]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80078d4:	7cfb      	ldrb	r3, [r7, #19]
 80078d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078e4:	4b10      	ldr	r3, [pc, #64]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f2:	490d      	ldr	r1, [pc, #52]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007906:	4b08      	ldr	r3, [pc, #32]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007916:	4904      	ldr	r1, [pc, #16]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007918:	4313      	orrs	r3, r2
 800791a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800791e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40021000 	.word	0x40021000

0800792c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a04      	ldr	r2, [pc, #16]	; (8007948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007936:	f043 0304 	orr.w	r3, r3, #4
 800793a:	6013      	str	r3, [r2, #0]
}
 800793c:	bf00      	nop
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40021000 	.word	0x40021000

0800794c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800795a:	4b75      	ldr	r3, [pc, #468]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d018      	beq.n	8007998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007966:	4b72      	ldr	r3, [pc, #456]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0203 	and.w	r2, r3, #3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d10d      	bne.n	8007992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
       ||
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800797e:	4b6c      	ldr	r3, [pc, #432]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	091b      	lsrs	r3, r3, #4
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
       ||
 800798e:	429a      	cmp	r2, r3
 8007990:	d047      	beq.n	8007a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	73fb      	strb	r3, [r7, #15]
 8007996:	e044      	b.n	8007a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b03      	cmp	r3, #3
 800799e:	d018      	beq.n	80079d2 <RCCEx_PLLSAI1_Config+0x86>
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d825      	bhi.n	80079f0 <RCCEx_PLLSAI1_Config+0xa4>
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d002      	beq.n	80079ae <RCCEx_PLLSAI1_Config+0x62>
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d009      	beq.n	80079c0 <RCCEx_PLLSAI1_Config+0x74>
 80079ac:	e020      	b.n	80079f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80079ae:	4b60      	ldr	r3, [pc, #384]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d11d      	bne.n	80079f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079be:	e01a      	b.n	80079f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80079c0:	4b5b      	ldr	r3, [pc, #364]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d116      	bne.n	80079fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079d0:	e013      	b.n	80079fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80079d2:	4b57      	ldr	r3, [pc, #348]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10f      	bne.n	80079fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80079de:	4b54      	ldr	r3, [pc, #336]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079ee:	e006      	b.n	80079fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
      break;
 80079f4:	e004      	b.n	8007a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079f6:	bf00      	nop
 80079f8:	e002      	b.n	8007a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10d      	bne.n	8007a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a06:	4b4a      	ldr	r3, [pc, #296]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6819      	ldr	r1, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	4944      	ldr	r1, [pc, #272]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d17d      	bne.n	8007b24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007a28:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a40      	ldr	r2, [pc, #256]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a34:	f7fc f950 	bl	8003cd8 <HAL_GetTick>
 8007a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a3a:	e009      	b.n	8007a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a3c:	f7fc f94c 	bl	8003cd8 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d902      	bls.n	8007a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a4e:	e005      	b.n	8007a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a50:	4b37      	ldr	r3, [pc, #220]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1ef      	bne.n	8007a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d160      	bne.n	8007b24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d111      	bne.n	8007a8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a68:	4b31      	ldr	r3, [pc, #196]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6892      	ldr	r2, [r2, #8]
 8007a78:	0211      	lsls	r1, r2, #8
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68d2      	ldr	r2, [r2, #12]
 8007a7e:	0912      	lsrs	r2, r2, #4
 8007a80:	0452      	lsls	r2, r2, #17
 8007a82:	430a      	orrs	r2, r1
 8007a84:	492a      	ldr	r1, [pc, #168]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	610b      	str	r3, [r1, #16]
 8007a8a:	e027      	b.n	8007adc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d112      	bne.n	8007ab8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a92:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007a9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6892      	ldr	r2, [r2, #8]
 8007aa2:	0211      	lsls	r1, r2, #8
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6912      	ldr	r2, [r2, #16]
 8007aa8:	0852      	lsrs	r2, r2, #1
 8007aaa:	3a01      	subs	r2, #1
 8007aac:	0552      	lsls	r2, r2, #21
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	491f      	ldr	r1, [pc, #124]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	610b      	str	r3, [r1, #16]
 8007ab6:	e011      	b.n	8007adc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ab8:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6892      	ldr	r2, [r2, #8]
 8007ac8:	0211      	lsls	r1, r2, #8
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6952      	ldr	r2, [r2, #20]
 8007ace:	0852      	lsrs	r2, r2, #1
 8007ad0:	3a01      	subs	r2, #1
 8007ad2:	0652      	lsls	r2, r2, #25
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	4916      	ldr	r1, [pc, #88]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007adc:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae8:	f7fc f8f6 	bl	8003cd8 <HAL_GetTick>
 8007aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007aee:	e009      	b.n	8007b04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007af0:	f7fc f8f2 	bl	8003cd8 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d902      	bls.n	8007b04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	73fb      	strb	r3, [r7, #15]
          break;
 8007b02:	e005      	b.n	8007b10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0ef      	beq.n	8007af0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007b16:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	4904      	ldr	r1, [pc, #16]	; (8007b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40021000 	.word	0x40021000

08007b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b42:	4b6a      	ldr	r3, [pc, #424]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d018      	beq.n	8007b80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007b4e:	4b67      	ldr	r3, [pc, #412]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f003 0203 	and.w	r2, r3, #3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d10d      	bne.n	8007b7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
       ||
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007b66:	4b61      	ldr	r3, [pc, #388]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	091b      	lsrs	r3, r3, #4
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
       ||
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d047      	beq.n	8007c0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
 8007b7e:	e044      	b.n	8007c0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d018      	beq.n	8007bba <RCCEx_PLLSAI2_Config+0x86>
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d825      	bhi.n	8007bd8 <RCCEx_PLLSAI2_Config+0xa4>
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d002      	beq.n	8007b96 <RCCEx_PLLSAI2_Config+0x62>
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d009      	beq.n	8007ba8 <RCCEx_PLLSAI2_Config+0x74>
 8007b94:	e020      	b.n	8007bd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b96:	4b55      	ldr	r3, [pc, #340]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d11d      	bne.n	8007bde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ba6:	e01a      	b.n	8007bde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ba8:	4b50      	ldr	r3, [pc, #320]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d116      	bne.n	8007be2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bb8:	e013      	b.n	8007be2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bba:	4b4c      	ldr	r3, [pc, #304]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10f      	bne.n	8007be6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bc6:	4b49      	ldr	r3, [pc, #292]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bd6:	e006      	b.n	8007be6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
      break;
 8007bdc:	e004      	b.n	8007be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007bde:	bf00      	nop
 8007be0:	e002      	b.n	8007be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007be2:	bf00      	nop
 8007be4:	e000      	b.n	8007be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007bee:	4b3f      	ldr	r3, [pc, #252]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	430b      	orrs	r3, r1
 8007c04:	4939      	ldr	r1, [pc, #228]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d167      	bne.n	8007ce0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007c10:	4b36      	ldr	r3, [pc, #216]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a35      	ldr	r2, [pc, #212]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1c:	f7fc f85c 	bl	8003cd8 <HAL_GetTick>
 8007c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c22:	e009      	b.n	8007c38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007c24:	f7fc f858 	bl	8003cd8 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d902      	bls.n	8007c38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	73fb      	strb	r3, [r7, #15]
        break;
 8007c36:	e005      	b.n	8007c44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c38:	4b2c      	ldr	r3, [pc, #176]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1ef      	bne.n	8007c24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d14a      	bne.n	8007ce0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d111      	bne.n	8007c74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c50:	4b26      	ldr	r3, [pc, #152]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6892      	ldr	r2, [r2, #8]
 8007c60:	0211      	lsls	r1, r2, #8
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68d2      	ldr	r2, [r2, #12]
 8007c66:	0912      	lsrs	r2, r2, #4
 8007c68:	0452      	lsls	r2, r2, #17
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	491f      	ldr	r1, [pc, #124]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	614b      	str	r3, [r1, #20]
 8007c72:	e011      	b.n	8007c98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c74:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6892      	ldr	r2, [r2, #8]
 8007c84:	0211      	lsls	r1, r2, #8
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6912      	ldr	r2, [r2, #16]
 8007c8a:	0852      	lsrs	r2, r2, #1
 8007c8c:	3a01      	subs	r2, #1
 8007c8e:	0652      	lsls	r2, r2, #25
 8007c90:	430a      	orrs	r2, r1
 8007c92:	4916      	ldr	r1, [pc, #88]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007c98:	4b14      	ldr	r3, [pc, #80]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a13      	ldr	r2, [pc, #76]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca4:	f7fc f818 	bl	8003cd8 <HAL_GetTick>
 8007ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007caa:	e009      	b.n	8007cc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cac:	f7fc f814 	bl	8003cd8 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d902      	bls.n	8007cc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8007cbe:	e005      	b.n	8007ccc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007cc0:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0ef      	beq.n	8007cac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007cd2:	4b06      	ldr	r3, [pc, #24]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cd4:	695a      	ldr	r2, [r3, #20]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	4904      	ldr	r1, [pc, #16]	; (8007cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40021000 	.word	0x40021000

08007cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e049      	b.n	8007d96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fb fd92 	bl	8003840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	f000 fbe4 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d001      	beq.n	8007db8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e047      	b.n	8007e48 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a23      	ldr	r2, [pc, #140]	; (8007e54 <HAL_TIM_Base_Start+0xb4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d01d      	beq.n	8007e06 <HAL_TIM_Base_Start+0x66>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd2:	d018      	beq.n	8007e06 <HAL_TIM_Base_Start+0x66>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <HAL_TIM_Base_Start+0xb8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d013      	beq.n	8007e06 <HAL_TIM_Base_Start+0x66>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <HAL_TIM_Base_Start+0xbc>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d00e      	beq.n	8007e06 <HAL_TIM_Base_Start+0x66>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1c      	ldr	r2, [pc, #112]	; (8007e60 <HAL_TIM_Base_Start+0xc0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d009      	beq.n	8007e06 <HAL_TIM_Base_Start+0x66>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <HAL_TIM_Base_Start+0xc4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d004      	beq.n	8007e06 <HAL_TIM_Base_Start+0x66>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a19      	ldr	r2, [pc, #100]	; (8007e68 <HAL_TIM_Base_Start+0xc8>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d115      	bne.n	8007e32 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <HAL_TIM_Base_Start+0xcc>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b06      	cmp	r3, #6
 8007e16:	d015      	beq.n	8007e44 <HAL_TIM_Base_Start+0xa4>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1e:	d011      	beq.n	8007e44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e30:	e008      	b.n	8007e44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0201 	orr.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	e000      	b.n	8007e46 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40000400 	.word	0x40000400
 8007e5c:	40000800 	.word	0x40000800
 8007e60:	40000c00 	.word	0x40000c00
 8007e64:	40013400 	.word	0x40013400
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	00010007 	.word	0x00010007

08007e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e049      	b.n	8007f16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f841 	bl	8007f1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f000 fb24 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d109      	bne.n	8007f58 <HAL_TIM_PWM_Start+0x24>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	bf14      	ite	ne
 8007f50:	2301      	movne	r3, #1
 8007f52:	2300      	moveq	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e03c      	b.n	8007fd2 <HAL_TIM_PWM_Start+0x9e>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d109      	bne.n	8007f72 <HAL_TIM_PWM_Start+0x3e>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	bf14      	ite	ne
 8007f6a:	2301      	movne	r3, #1
 8007f6c:	2300      	moveq	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	e02f      	b.n	8007fd2 <HAL_TIM_PWM_Start+0x9e>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d109      	bne.n	8007f8c <HAL_TIM_PWM_Start+0x58>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	bf14      	ite	ne
 8007f84:	2301      	movne	r3, #1
 8007f86:	2300      	moveq	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	e022      	b.n	8007fd2 <HAL_TIM_PWM_Start+0x9e>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b0c      	cmp	r3, #12
 8007f90:	d109      	bne.n	8007fa6 <HAL_TIM_PWM_Start+0x72>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	bf14      	ite	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	2300      	moveq	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	e015      	b.n	8007fd2 <HAL_TIM_PWM_Start+0x9e>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b10      	cmp	r3, #16
 8007faa:	d109      	bne.n	8007fc0 <HAL_TIM_PWM_Start+0x8c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	bf14      	ite	ne
 8007fb8:	2301      	movne	r3, #1
 8007fba:	2300      	moveq	r3, #0
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	e008      	b.n	8007fd2 <HAL_TIM_PWM_Start+0x9e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	bf14      	ite	ne
 8007fcc:	2301      	movne	r3, #1
 8007fce:	2300      	moveq	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e09c      	b.n	8008114 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_PWM_Start+0xb6>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fe8:	e023      	b.n	8008032 <HAL_TIM_PWM_Start+0xfe>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d104      	bne.n	8007ffa <HAL_TIM_PWM_Start+0xc6>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ff8:	e01b      	b.n	8008032 <HAL_TIM_PWM_Start+0xfe>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d104      	bne.n	800800a <HAL_TIM_PWM_Start+0xd6>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008008:	e013      	b.n	8008032 <HAL_TIM_PWM_Start+0xfe>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b0c      	cmp	r3, #12
 800800e:	d104      	bne.n	800801a <HAL_TIM_PWM_Start+0xe6>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008018:	e00b      	b.n	8008032 <HAL_TIM_PWM_Start+0xfe>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b10      	cmp	r3, #16
 800801e:	d104      	bne.n	800802a <HAL_TIM_PWM_Start+0xf6>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008028:	e003      	b.n	8008032 <HAL_TIM_PWM_Start+0xfe>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2201      	movs	r2, #1
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fe68 	bl	8008d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a35      	ldr	r2, [pc, #212]	; (800811c <HAL_TIM_PWM_Start+0x1e8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_TIM_PWM_Start+0x13e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a34      	ldr	r2, [pc, #208]	; (8008120 <HAL_TIM_PWM_Start+0x1ec>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_TIM_PWM_Start+0x13e>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a32      	ldr	r2, [pc, #200]	; (8008124 <HAL_TIM_PWM_Start+0x1f0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIM_PWM_Start+0x13e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a31      	ldr	r2, [pc, #196]	; (8008128 <HAL_TIM_PWM_Start+0x1f4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIM_PWM_Start+0x13e>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a2f      	ldr	r2, [pc, #188]	; (800812c <HAL_TIM_PWM_Start+0x1f8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d101      	bne.n	8008076 <HAL_TIM_PWM_Start+0x142>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <HAL_TIM_PWM_Start+0x144>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800808a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a22      	ldr	r2, [pc, #136]	; (800811c <HAL_TIM_PWM_Start+0x1e8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d01d      	beq.n	80080d2 <HAL_TIM_PWM_Start+0x19e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809e:	d018      	beq.n	80080d2 <HAL_TIM_PWM_Start+0x19e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a22      	ldr	r2, [pc, #136]	; (8008130 <HAL_TIM_PWM_Start+0x1fc>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <HAL_TIM_PWM_Start+0x19e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <HAL_TIM_PWM_Start+0x200>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00e      	beq.n	80080d2 <HAL_TIM_PWM_Start+0x19e>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1f      	ldr	r2, [pc, #124]	; (8008138 <HAL_TIM_PWM_Start+0x204>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d009      	beq.n	80080d2 <HAL_TIM_PWM_Start+0x19e>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a17      	ldr	r2, [pc, #92]	; (8008120 <HAL_TIM_PWM_Start+0x1ec>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d004      	beq.n	80080d2 <HAL_TIM_PWM_Start+0x19e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a15      	ldr	r2, [pc, #84]	; (8008124 <HAL_TIM_PWM_Start+0x1f0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d115      	bne.n	80080fe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	4b18      	ldr	r3, [pc, #96]	; (800813c <HAL_TIM_PWM_Start+0x208>)
 80080da:	4013      	ands	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b06      	cmp	r3, #6
 80080e2:	d015      	beq.n	8008110 <HAL_TIM_PWM_Start+0x1dc>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ea:	d011      	beq.n	8008110 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fc:	e008      	b.n	8008110 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	e000      	b.n	8008112 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40012c00 	.word	0x40012c00
 8008120:	40013400 	.word	0x40013400
 8008124:	40014000 	.word	0x40014000
 8008128:	40014400 	.word	0x40014400
 800812c:	40014800 	.word	0x40014800
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00
 800813c:	00010007 	.word	0x00010007

08008140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800815a:	2302      	movs	r3, #2
 800815c:	e0ff      	b.n	800835e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b14      	cmp	r3, #20
 800816a:	f200 80f0 	bhi.w	800834e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	080081c9 	.word	0x080081c9
 8008178:	0800834f 	.word	0x0800834f
 800817c:	0800834f 	.word	0x0800834f
 8008180:	0800834f 	.word	0x0800834f
 8008184:	08008209 	.word	0x08008209
 8008188:	0800834f 	.word	0x0800834f
 800818c:	0800834f 	.word	0x0800834f
 8008190:	0800834f 	.word	0x0800834f
 8008194:	0800824b 	.word	0x0800824b
 8008198:	0800834f 	.word	0x0800834f
 800819c:	0800834f 	.word	0x0800834f
 80081a0:	0800834f 	.word	0x0800834f
 80081a4:	0800828b 	.word	0x0800828b
 80081a8:	0800834f 	.word	0x0800834f
 80081ac:	0800834f 	.word	0x0800834f
 80081b0:	0800834f 	.word	0x0800834f
 80081b4:	080082cd 	.word	0x080082cd
 80081b8:	0800834f 	.word	0x0800834f
 80081bc:	0800834f 	.word	0x0800834f
 80081c0:	0800834f 	.word	0x0800834f
 80081c4:	0800830d 	.word	0x0800830d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fa2e 	bl	8008630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0208 	orr.w	r2, r2, #8
 80081e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0204 	bic.w	r2, r2, #4
 80081f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6999      	ldr	r1, [r3, #24]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	619a      	str	r2, [r3, #24]
      break;
 8008206:	e0a5      	b.n	8008354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68b9      	ldr	r1, [r7, #8]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fa9e 	bl	8008750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699a      	ldr	r2, [r3, #24]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699a      	ldr	r2, [r3, #24]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6999      	ldr	r1, [r3, #24]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	021a      	lsls	r2, r3, #8
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	619a      	str	r2, [r3, #24]
      break;
 8008248:	e084      	b.n	8008354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fb07 	bl	8008864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0208 	orr.w	r2, r2, #8
 8008264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69da      	ldr	r2, [r3, #28]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0204 	bic.w	r2, r2, #4
 8008274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69d9      	ldr	r1, [r3, #28]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	691a      	ldr	r2, [r3, #16]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	61da      	str	r2, [r3, #28]
      break;
 8008288:	e064      	b.n	8008354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68b9      	ldr	r1, [r7, #8]
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fb6f 	bl	8008974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69da      	ldr	r2, [r3, #28]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69d9      	ldr	r1, [r3, #28]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	021a      	lsls	r2, r3, #8
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	61da      	str	r2, [r3, #28]
      break;
 80082ca:	e043      	b.n	8008354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fbb8 	bl	8008a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0208 	orr.w	r2, r2, #8
 80082e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0204 	bic.w	r2, r2, #4
 80082f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800830a:	e023      	b.n	8008354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fbfc 	bl	8008b10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	021a      	lsls	r2, r3, #8
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800834c:	e002      	b.n	8008354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	75fb      	strb	r3, [r7, #23]
      break;
 8008352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop

08008368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_TIM_ConfigClockSource+0x1c>
 8008380:	2302      	movs	r3, #2
 8008382:	e0b6      	b.n	80084f2 <HAL_TIM_ConfigClockSource+0x18a>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c0:	d03e      	beq.n	8008440 <HAL_TIM_ConfigClockSource+0xd8>
 80083c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c6:	f200 8087 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 80083ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ce:	f000 8086 	beq.w	80084de <HAL_TIM_ConfigClockSource+0x176>
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	d87f      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 80083d8:	2b70      	cmp	r3, #112	; 0x70
 80083da:	d01a      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0xaa>
 80083dc:	2b70      	cmp	r3, #112	; 0x70
 80083de:	d87b      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 80083e0:	2b60      	cmp	r3, #96	; 0x60
 80083e2:	d050      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x11e>
 80083e4:	2b60      	cmp	r3, #96	; 0x60
 80083e6:	d877      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 80083e8:	2b50      	cmp	r3, #80	; 0x50
 80083ea:	d03c      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xfe>
 80083ec:	2b50      	cmp	r3, #80	; 0x50
 80083ee:	d873      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 80083f0:	2b40      	cmp	r3, #64	; 0x40
 80083f2:	d058      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0x13e>
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d86f      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 80083f8:	2b30      	cmp	r3, #48	; 0x30
 80083fa:	d064      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15e>
 80083fc:	2b30      	cmp	r3, #48	; 0x30
 80083fe:	d86b      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 8008400:	2b20      	cmp	r3, #32
 8008402:	d060      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15e>
 8008404:	2b20      	cmp	r3, #32
 8008406:	d867      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d05c      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15e>
 800840c:	2b10      	cmp	r3, #16
 800840e:	d05a      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15e>
 8008410:	e062      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008422:	f000 fc55 	bl	8008cd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	609a      	str	r2, [r3, #8]
      break;
 800843e:	e04f      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008450:	f000 fc3e 	bl	8008cd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008462:	609a      	str	r2, [r3, #8]
      break;
 8008464:	e03c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008472:	461a      	mov	r2, r3
 8008474:	f000 fbb2 	bl	8008bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2150      	movs	r1, #80	; 0x50
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fc0b 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 8008484:	e02c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008492:	461a      	mov	r2, r3
 8008494:	f000 fbd1 	bl	8008c3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2160      	movs	r1, #96	; 0x60
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fbfb 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 80084a4:	e01c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b2:	461a      	mov	r2, r3
 80084b4:	f000 fb92 	bl	8008bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2140      	movs	r1, #64	; 0x40
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fbeb 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 80084c4:	e00c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f000 fbe2 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 80084d6:	e003      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e000      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80084de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a40      	ldr	r2, [pc, #256]	; (8008610 <TIM_Base_SetConfig+0x114>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851a:	d00f      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a3d      	ldr	r2, [pc, #244]	; (8008614 <TIM_Base_SetConfig+0x118>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00b      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a3c      	ldr	r2, [pc, #240]	; (8008618 <TIM_Base_SetConfig+0x11c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d007      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a3b      	ldr	r2, [pc, #236]	; (800861c <TIM_Base_SetConfig+0x120>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a3a      	ldr	r2, [pc, #232]	; (8008620 <TIM_Base_SetConfig+0x124>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d108      	bne.n	800854e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a2f      	ldr	r2, [pc, #188]	; (8008610 <TIM_Base_SetConfig+0x114>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d01f      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800855c:	d01b      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2c      	ldr	r2, [pc, #176]	; (8008614 <TIM_Base_SetConfig+0x118>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d017      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a2b      	ldr	r2, [pc, #172]	; (8008618 <TIM_Base_SetConfig+0x11c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a2a      	ldr	r2, [pc, #168]	; (800861c <TIM_Base_SetConfig+0x120>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00f      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a29      	ldr	r2, [pc, #164]	; (8008620 <TIM_Base_SetConfig+0x124>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00b      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a28      	ldr	r2, [pc, #160]	; (8008624 <TIM_Base_SetConfig+0x128>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a27      	ldr	r2, [pc, #156]	; (8008628 <TIM_Base_SetConfig+0x12c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_Base_SetConfig+0x9a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a26      	ldr	r2, [pc, #152]	; (800862c <TIM_Base_SetConfig+0x130>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d108      	bne.n	80085a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a10      	ldr	r2, [pc, #64]	; (8008610 <TIM_Base_SetConfig+0x114>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00f      	beq.n	80085f4 <TIM_Base_SetConfig+0xf8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a12      	ldr	r2, [pc, #72]	; (8008620 <TIM_Base_SetConfig+0x124>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00b      	beq.n	80085f4 <TIM_Base_SetConfig+0xf8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a11      	ldr	r2, [pc, #68]	; (8008624 <TIM_Base_SetConfig+0x128>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d007      	beq.n	80085f4 <TIM_Base_SetConfig+0xf8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a10      	ldr	r2, [pc, #64]	; (8008628 <TIM_Base_SetConfig+0x12c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0xf8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a0f      	ldr	r2, [pc, #60]	; (800862c <TIM_Base_SetConfig+0x130>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d103      	bne.n	80085fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	615a      	str	r2, [r3, #20]
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	40012c00 	.word	0x40012c00
 8008614:	40000400 	.word	0x40000400
 8008618:	40000800 	.word	0x40000800
 800861c:	40000c00 	.word	0x40000c00
 8008620:	40013400 	.word	0x40013400
 8008624:	40014000 	.word	0x40014000
 8008628:	40014400 	.word	0x40014400
 800862c:	40014800 	.word	0x40014800

08008630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	f023 0201 	bic.w	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800865e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f023 0302 	bic.w	r3, r3, #2
 800867c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a2c      	ldr	r2, [pc, #176]	; (800873c <TIM_OC1_SetConfig+0x10c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00f      	beq.n	80086b0 <TIM_OC1_SetConfig+0x80>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a2b      	ldr	r2, [pc, #172]	; (8008740 <TIM_OC1_SetConfig+0x110>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_OC1_SetConfig+0x80>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a2a      	ldr	r2, [pc, #168]	; (8008744 <TIM_OC1_SetConfig+0x114>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <TIM_OC1_SetConfig+0x80>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a29      	ldr	r2, [pc, #164]	; (8008748 <TIM_OC1_SetConfig+0x118>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_OC1_SetConfig+0x80>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a28      	ldr	r2, [pc, #160]	; (800874c <TIM_OC1_SetConfig+0x11c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d10c      	bne.n	80086ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f023 0308 	bic.w	r3, r3, #8
 80086b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	4313      	orrs	r3, r2
 80086c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f023 0304 	bic.w	r3, r3, #4
 80086c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a1b      	ldr	r2, [pc, #108]	; (800873c <TIM_OC1_SetConfig+0x10c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00f      	beq.n	80086f2 <TIM_OC1_SetConfig+0xc2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a1a      	ldr	r2, [pc, #104]	; (8008740 <TIM_OC1_SetConfig+0x110>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00b      	beq.n	80086f2 <TIM_OC1_SetConfig+0xc2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a19      	ldr	r2, [pc, #100]	; (8008744 <TIM_OC1_SetConfig+0x114>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d007      	beq.n	80086f2 <TIM_OC1_SetConfig+0xc2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a18      	ldr	r2, [pc, #96]	; (8008748 <TIM_OC1_SetConfig+0x118>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d003      	beq.n	80086f2 <TIM_OC1_SetConfig+0xc2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a17      	ldr	r2, [pc, #92]	; (800874c <TIM_OC1_SetConfig+0x11c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d111      	bne.n	8008716 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	621a      	str	r2, [r3, #32]
}
 8008730:	bf00      	nop
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	40012c00 	.word	0x40012c00
 8008740:	40013400 	.word	0x40013400
 8008744:	40014000 	.word	0x40014000
 8008748:	40014400 	.word	0x40014400
 800874c:	40014800 	.word	0x40014800

08008750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	f023 0210 	bic.w	r2, r3, #16
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800877e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f023 0320 	bic.w	r3, r3, #32
 800879e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a28      	ldr	r2, [pc, #160]	; (8008850 <TIM_OC2_SetConfig+0x100>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_OC2_SetConfig+0x6c>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a27      	ldr	r2, [pc, #156]	; (8008854 <TIM_OC2_SetConfig+0x104>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d10d      	bne.n	80087d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a1d      	ldr	r2, [pc, #116]	; (8008850 <TIM_OC2_SetConfig+0x100>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00f      	beq.n	8008800 <TIM_OC2_SetConfig+0xb0>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a1c      	ldr	r2, [pc, #112]	; (8008854 <TIM_OC2_SetConfig+0x104>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00b      	beq.n	8008800 <TIM_OC2_SetConfig+0xb0>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a1b      	ldr	r2, [pc, #108]	; (8008858 <TIM_OC2_SetConfig+0x108>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d007      	beq.n	8008800 <TIM_OC2_SetConfig+0xb0>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a1a      	ldr	r2, [pc, #104]	; (800885c <TIM_OC2_SetConfig+0x10c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d003      	beq.n	8008800 <TIM_OC2_SetConfig+0xb0>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a19      	ldr	r2, [pc, #100]	; (8008860 <TIM_OC2_SetConfig+0x110>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d113      	bne.n	8008828 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800880e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	621a      	str	r2, [r3, #32]
}
 8008842:	bf00      	nop
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40012c00 	.word	0x40012c00
 8008854:	40013400 	.word	0x40013400
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800

08008864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a27      	ldr	r2, [pc, #156]	; (8008960 <TIM_OC3_SetConfig+0xfc>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d003      	beq.n	80088ce <TIM_OC3_SetConfig+0x6a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a26      	ldr	r2, [pc, #152]	; (8008964 <TIM_OC3_SetConfig+0x100>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d10d      	bne.n	80088ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <TIM_OC3_SetConfig+0xfc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00f      	beq.n	8008912 <TIM_OC3_SetConfig+0xae>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a1b      	ldr	r2, [pc, #108]	; (8008964 <TIM_OC3_SetConfig+0x100>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00b      	beq.n	8008912 <TIM_OC3_SetConfig+0xae>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a1a      	ldr	r2, [pc, #104]	; (8008968 <TIM_OC3_SetConfig+0x104>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d007      	beq.n	8008912 <TIM_OC3_SetConfig+0xae>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a19      	ldr	r2, [pc, #100]	; (800896c <TIM_OC3_SetConfig+0x108>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d003      	beq.n	8008912 <TIM_OC3_SetConfig+0xae>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a18      	ldr	r2, [pc, #96]	; (8008970 <TIM_OC3_SetConfig+0x10c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d113      	bne.n	800893a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	4313      	orrs	r3, r2
 8008938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	621a      	str	r2, [r3, #32]
}
 8008954:	bf00      	nop
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	40012c00 	.word	0x40012c00
 8008964:	40013400 	.word	0x40013400
 8008968:	40014000 	.word	0x40014000
 800896c:	40014400 	.word	0x40014400
 8008970:	40014800 	.word	0x40014800

08008974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	031b      	lsls	r3, r3, #12
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a18      	ldr	r2, [pc, #96]	; (8008a34 <TIM_OC4_SetConfig+0xc0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00f      	beq.n	80089f8 <TIM_OC4_SetConfig+0x84>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a17      	ldr	r2, [pc, #92]	; (8008a38 <TIM_OC4_SetConfig+0xc4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00b      	beq.n	80089f8 <TIM_OC4_SetConfig+0x84>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a16      	ldr	r2, [pc, #88]	; (8008a3c <TIM_OC4_SetConfig+0xc8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d007      	beq.n	80089f8 <TIM_OC4_SetConfig+0x84>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <TIM_OC4_SetConfig+0xcc>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_OC4_SetConfig+0x84>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a14      	ldr	r2, [pc, #80]	; (8008a44 <TIM_OC4_SetConfig+0xd0>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d109      	bne.n	8008a0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	019b      	lsls	r3, r3, #6
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	621a      	str	r2, [r3, #32]
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40012c00 	.word	0x40012c00
 8008a38:	40013400 	.word	0x40013400
 8008a3c:	40014000 	.word	0x40014000
 8008a40:	40014400 	.word	0x40014400
 8008a44:	40014800 	.word	0x40014800

08008a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	041b      	lsls	r3, r3, #16
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a17      	ldr	r2, [pc, #92]	; (8008afc <TIM_OC5_SetConfig+0xb4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d00f      	beq.n	8008ac2 <TIM_OC5_SetConfig+0x7a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <TIM_OC5_SetConfig+0xb8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00b      	beq.n	8008ac2 <TIM_OC5_SetConfig+0x7a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a15      	ldr	r2, [pc, #84]	; (8008b04 <TIM_OC5_SetConfig+0xbc>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d007      	beq.n	8008ac2 <TIM_OC5_SetConfig+0x7a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <TIM_OC5_SetConfig+0xc0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d003      	beq.n	8008ac2 <TIM_OC5_SetConfig+0x7a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <TIM_OC5_SetConfig+0xc4>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d109      	bne.n	8008ad6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	621a      	str	r2, [r3, #32]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40013400 	.word	0x40013400
 8008b04:	40014000 	.word	0x40014000
 8008b08:	40014400 	.word	0x40014400
 8008b0c:	40014800 	.word	0x40014800

08008b10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	051b      	lsls	r3, r3, #20
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a18      	ldr	r2, [pc, #96]	; (8008bc8 <TIM_OC6_SetConfig+0xb8>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00f      	beq.n	8008b8c <TIM_OC6_SetConfig+0x7c>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a17      	ldr	r2, [pc, #92]	; (8008bcc <TIM_OC6_SetConfig+0xbc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00b      	beq.n	8008b8c <TIM_OC6_SetConfig+0x7c>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a16      	ldr	r2, [pc, #88]	; (8008bd0 <TIM_OC6_SetConfig+0xc0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d007      	beq.n	8008b8c <TIM_OC6_SetConfig+0x7c>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a15      	ldr	r2, [pc, #84]	; (8008bd4 <TIM_OC6_SetConfig+0xc4>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <TIM_OC6_SetConfig+0x7c>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <TIM_OC6_SetConfig+0xc8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d109      	bne.n	8008ba0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	029b      	lsls	r3, r3, #10
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40012c00 	.word	0x40012c00
 8008bcc:	40013400 	.word	0x40013400
 8008bd0:	40014000 	.word	0x40014000
 8008bd4:	40014400 	.word	0x40014400
 8008bd8:	40014800 	.word	0x40014800

08008bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f023 0201 	bic.w	r2, r3, #1
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f023 030a 	bic.w	r3, r3, #10
 8008c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	621a      	str	r2, [r3, #32]
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b087      	sub	sp, #28
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	f023 0210 	bic.w	r2, r3, #16
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	031b      	lsls	r3, r3, #12
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	f043 0307 	orr.w	r3, r3, #7
 8008cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	609a      	str	r2, [r3, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	021a      	lsls	r2, r3, #8
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	609a      	str	r2, [r3, #8]
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f003 031f 	and.w	r3, r3, #31
 8008d22:	2201      	movs	r2, #1
 8008d24:	fa02 f303 	lsl.w	r3, r2, r3
 8008d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1a      	ldr	r2, [r3, #32]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	43db      	mvns	r3, r3
 8008d32:	401a      	ands	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a1a      	ldr	r2, [r3, #32]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f003 031f 	and.w	r3, r3, #31
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	fa01 f303 	lsl.w	r3, r1, r3
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d101      	bne.n	8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d70:	2302      	movs	r3, #2
 8008d72:	e068      	b.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a2e      	ldr	r2, [pc, #184]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d004      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a2d      	ldr	r2, [pc, #180]	; (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d108      	bne.n	8008dba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d01d      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de6:	d018      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1b      	ldr	r2, [pc, #108]	; (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1a      	ldr	r2, [pc, #104]	; (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00e      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a18      	ldr	r2, [pc, #96]	; (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d009      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a13      	ldr	r2, [pc, #76]	; (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d004      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a14      	ldr	r2, [pc, #80]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d10c      	bne.n	8008e34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	40012c00 	.word	0x40012c00
 8008e58:	40013400 	.word	0x40013400
 8008e5c:	40000400 	.word	0x40000400
 8008e60:	40000800 	.word	0x40000800
 8008e64:	40000c00 	.word	0x40000c00
 8008e68:	40014000 	.word	0x40014000

08008e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e040      	b.n	8008f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7fa fdba 	bl	8003a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2224      	movs	r2, #36	; 0x24
 8008e98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fb4c 	bl	8009550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f891 	bl	8008fe0 <UART_SetConfig>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e01b      	b.n	8008f00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fbcb 	bl	8009694 <UART_CheckIdleState>
 8008efe:	4603      	mov	r3, r0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08a      	sub	sp, #40	; 0x28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d137      	bne.n	8008f90 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_UART_Receive_DMA+0x24>
 8008f26:	88fb      	ldrh	r3, [r7, #6]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e030      	b.n	8008f92 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a18      	ldr	r2, [pc, #96]	; (8008f9c <HAL_UART_Receive_DMA+0x94>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d01f      	beq.n	8008f80 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d018      	beq.n	8008f80 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	623b      	str	r3, [r7, #32]
 8008f6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	69f9      	ldr	r1, [r7, #28]
 8008f72:	6a3a      	ldr	r2, [r7, #32]
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e6      	bne.n	8008f4e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f80:	88fb      	ldrh	r3, [r7, #6]
 8008f82:	461a      	mov	r2, r3
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 fc94 	bl	80098b4 <UART_Start_Receive_DMA>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	e000      	b.n	8008f92 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f90:	2302      	movs	r3, #2
  }
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3728      	adds	r7, #40	; 0x28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40008000 	.word	0x40008000

08008fa0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fe4:	b08a      	sub	sp, #40	; 0x28
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	4313      	orrs	r3, r2
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	4ba4      	ldr	r3, [pc, #656]	; (80092a0 <UART_SetConfig+0x2c0>)
 8009010:	4013      	ands	r3, r2
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	6812      	ldr	r2, [r2, #0]
 8009016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009018:	430b      	orrs	r3, r1
 800901a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a99      	ldr	r2, [pc, #612]	; (80092a4 <UART_SetConfig+0x2c4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009048:	4313      	orrs	r3, r2
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800905c:	430a      	orrs	r2, r1
 800905e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a90      	ldr	r2, [pc, #576]	; (80092a8 <UART_SetConfig+0x2c8>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d126      	bne.n	80090b8 <UART_SetConfig+0xd8>
 800906a:	4b90      	ldr	r3, [pc, #576]	; (80092ac <UART_SetConfig+0x2cc>)
 800906c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009070:	f003 0303 	and.w	r3, r3, #3
 8009074:	2b03      	cmp	r3, #3
 8009076:	d81b      	bhi.n	80090b0 <UART_SetConfig+0xd0>
 8009078:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <UART_SetConfig+0xa0>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	08009091 	.word	0x08009091
 8009084:	080090a1 	.word	0x080090a1
 8009088:	08009099 	.word	0x08009099
 800908c:	080090a9 	.word	0x080090a9
 8009090:	2301      	movs	r3, #1
 8009092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009096:	e116      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009098:	2302      	movs	r3, #2
 800909a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800909e:	e112      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80090a0:	2304      	movs	r3, #4
 80090a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a6:	e10e      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80090a8:	2308      	movs	r3, #8
 80090aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ae:	e10a      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80090b0:	2310      	movs	r3, #16
 80090b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090b6:	e106      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a7c      	ldr	r2, [pc, #496]	; (80092b0 <UART_SetConfig+0x2d0>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d138      	bne.n	8009134 <UART_SetConfig+0x154>
 80090c2:	4b7a      	ldr	r3, [pc, #488]	; (80092ac <UART_SetConfig+0x2cc>)
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c8:	f003 030c 	and.w	r3, r3, #12
 80090cc:	2b0c      	cmp	r3, #12
 80090ce:	d82d      	bhi.n	800912c <UART_SetConfig+0x14c>
 80090d0:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <UART_SetConfig+0xf8>)
 80090d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d6:	bf00      	nop
 80090d8:	0800910d 	.word	0x0800910d
 80090dc:	0800912d 	.word	0x0800912d
 80090e0:	0800912d 	.word	0x0800912d
 80090e4:	0800912d 	.word	0x0800912d
 80090e8:	0800911d 	.word	0x0800911d
 80090ec:	0800912d 	.word	0x0800912d
 80090f0:	0800912d 	.word	0x0800912d
 80090f4:	0800912d 	.word	0x0800912d
 80090f8:	08009115 	.word	0x08009115
 80090fc:	0800912d 	.word	0x0800912d
 8009100:	0800912d 	.word	0x0800912d
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009125 	.word	0x08009125
 800910c:	2300      	movs	r3, #0
 800910e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009112:	e0d8      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009114:	2302      	movs	r3, #2
 8009116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800911a:	e0d4      	b.n	80092c6 <UART_SetConfig+0x2e6>
 800911c:	2304      	movs	r3, #4
 800911e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009122:	e0d0      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009124:	2308      	movs	r3, #8
 8009126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800912a:	e0cc      	b.n	80092c6 <UART_SetConfig+0x2e6>
 800912c:	2310      	movs	r3, #16
 800912e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009132:	e0c8      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a5e      	ldr	r2, [pc, #376]	; (80092b4 <UART_SetConfig+0x2d4>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d125      	bne.n	800918a <UART_SetConfig+0x1aa>
 800913e:	4b5b      	ldr	r3, [pc, #364]	; (80092ac <UART_SetConfig+0x2cc>)
 8009140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009144:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009148:	2b30      	cmp	r3, #48	; 0x30
 800914a:	d016      	beq.n	800917a <UART_SetConfig+0x19a>
 800914c:	2b30      	cmp	r3, #48	; 0x30
 800914e:	d818      	bhi.n	8009182 <UART_SetConfig+0x1a2>
 8009150:	2b20      	cmp	r3, #32
 8009152:	d00a      	beq.n	800916a <UART_SetConfig+0x18a>
 8009154:	2b20      	cmp	r3, #32
 8009156:	d814      	bhi.n	8009182 <UART_SetConfig+0x1a2>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <UART_SetConfig+0x182>
 800915c:	2b10      	cmp	r3, #16
 800915e:	d008      	beq.n	8009172 <UART_SetConfig+0x192>
 8009160:	e00f      	b.n	8009182 <UART_SetConfig+0x1a2>
 8009162:	2300      	movs	r3, #0
 8009164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009168:	e0ad      	b.n	80092c6 <UART_SetConfig+0x2e6>
 800916a:	2302      	movs	r3, #2
 800916c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009170:	e0a9      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009172:	2304      	movs	r3, #4
 8009174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009178:	e0a5      	b.n	80092c6 <UART_SetConfig+0x2e6>
 800917a:	2308      	movs	r3, #8
 800917c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009180:	e0a1      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009182:	2310      	movs	r3, #16
 8009184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009188:	e09d      	b.n	80092c6 <UART_SetConfig+0x2e6>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a4a      	ldr	r2, [pc, #296]	; (80092b8 <UART_SetConfig+0x2d8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d125      	bne.n	80091e0 <UART_SetConfig+0x200>
 8009194:	4b45      	ldr	r3, [pc, #276]	; (80092ac <UART_SetConfig+0x2cc>)
 8009196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800919a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800919e:	2bc0      	cmp	r3, #192	; 0xc0
 80091a0:	d016      	beq.n	80091d0 <UART_SetConfig+0x1f0>
 80091a2:	2bc0      	cmp	r3, #192	; 0xc0
 80091a4:	d818      	bhi.n	80091d8 <UART_SetConfig+0x1f8>
 80091a6:	2b80      	cmp	r3, #128	; 0x80
 80091a8:	d00a      	beq.n	80091c0 <UART_SetConfig+0x1e0>
 80091aa:	2b80      	cmp	r3, #128	; 0x80
 80091ac:	d814      	bhi.n	80091d8 <UART_SetConfig+0x1f8>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <UART_SetConfig+0x1d8>
 80091b2:	2b40      	cmp	r3, #64	; 0x40
 80091b4:	d008      	beq.n	80091c8 <UART_SetConfig+0x1e8>
 80091b6:	e00f      	b.n	80091d8 <UART_SetConfig+0x1f8>
 80091b8:	2300      	movs	r3, #0
 80091ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091be:	e082      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80091c0:	2302      	movs	r3, #2
 80091c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091c6:	e07e      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80091c8:	2304      	movs	r3, #4
 80091ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ce:	e07a      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80091d0:	2308      	movs	r3, #8
 80091d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091d6:	e076      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80091d8:	2310      	movs	r3, #16
 80091da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091de:	e072      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a35      	ldr	r2, [pc, #212]	; (80092bc <UART_SetConfig+0x2dc>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d12a      	bne.n	8009240 <UART_SetConfig+0x260>
 80091ea:	4b30      	ldr	r3, [pc, #192]	; (80092ac <UART_SetConfig+0x2cc>)
 80091ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091f8:	d01a      	beq.n	8009230 <UART_SetConfig+0x250>
 80091fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091fe:	d81b      	bhi.n	8009238 <UART_SetConfig+0x258>
 8009200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009204:	d00c      	beq.n	8009220 <UART_SetConfig+0x240>
 8009206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800920a:	d815      	bhi.n	8009238 <UART_SetConfig+0x258>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <UART_SetConfig+0x238>
 8009210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009214:	d008      	beq.n	8009228 <UART_SetConfig+0x248>
 8009216:	e00f      	b.n	8009238 <UART_SetConfig+0x258>
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800921e:	e052      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009220:	2302      	movs	r3, #2
 8009222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009226:	e04e      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009228:	2304      	movs	r3, #4
 800922a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800922e:	e04a      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009230:	2308      	movs	r3, #8
 8009232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009236:	e046      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009238:	2310      	movs	r3, #16
 800923a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800923e:	e042      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a17      	ldr	r2, [pc, #92]	; (80092a4 <UART_SetConfig+0x2c4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d13a      	bne.n	80092c0 <UART_SetConfig+0x2e0>
 800924a:	4b18      	ldr	r3, [pc, #96]	; (80092ac <UART_SetConfig+0x2cc>)
 800924c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009258:	d01a      	beq.n	8009290 <UART_SetConfig+0x2b0>
 800925a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800925e:	d81b      	bhi.n	8009298 <UART_SetConfig+0x2b8>
 8009260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009264:	d00c      	beq.n	8009280 <UART_SetConfig+0x2a0>
 8009266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800926a:	d815      	bhi.n	8009298 <UART_SetConfig+0x2b8>
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <UART_SetConfig+0x298>
 8009270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009274:	d008      	beq.n	8009288 <UART_SetConfig+0x2a8>
 8009276:	e00f      	b.n	8009298 <UART_SetConfig+0x2b8>
 8009278:	2300      	movs	r3, #0
 800927a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800927e:	e022      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009280:	2302      	movs	r3, #2
 8009282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009286:	e01e      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009288:	2304      	movs	r3, #4
 800928a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800928e:	e01a      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009290:	2308      	movs	r3, #8
 8009292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009296:	e016      	b.n	80092c6 <UART_SetConfig+0x2e6>
 8009298:	2310      	movs	r3, #16
 800929a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800929e:	e012      	b.n	80092c6 <UART_SetConfig+0x2e6>
 80092a0:	efff69f3 	.word	0xefff69f3
 80092a4:	40008000 	.word	0x40008000
 80092a8:	40013800 	.word	0x40013800
 80092ac:	40021000 	.word	0x40021000
 80092b0:	40004400 	.word	0x40004400
 80092b4:	40004800 	.word	0x40004800
 80092b8:	40004c00 	.word	0x40004c00
 80092bc:	40005000 	.word	0x40005000
 80092c0:	2310      	movs	r3, #16
 80092c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a9f      	ldr	r2, [pc, #636]	; (8009548 <UART_SetConfig+0x568>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d17a      	bne.n	80093c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d824      	bhi.n	8009322 <UART_SetConfig+0x342>
 80092d8:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <UART_SetConfig+0x300>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	08009305 	.word	0x08009305
 80092e4:	08009323 	.word	0x08009323
 80092e8:	0800930d 	.word	0x0800930d
 80092ec:	08009323 	.word	0x08009323
 80092f0:	08009313 	.word	0x08009313
 80092f4:	08009323 	.word	0x08009323
 80092f8:	08009323 	.word	0x08009323
 80092fc:	08009323 	.word	0x08009323
 8009300:	0800931b 	.word	0x0800931b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009304:	f7fd ff9c 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
 8009308:	61f8      	str	r0, [r7, #28]
        break;
 800930a:	e010      	b.n	800932e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800930c:	4b8f      	ldr	r3, [pc, #572]	; (800954c <UART_SetConfig+0x56c>)
 800930e:	61fb      	str	r3, [r7, #28]
        break;
 8009310:	e00d      	b.n	800932e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009312:	f7fd fefd 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 8009316:	61f8      	str	r0, [r7, #28]
        break;
 8009318:	e009      	b.n	800932e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800931a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931e:	61fb      	str	r3, [r7, #28]
        break;
 8009320:	e005      	b.n	800932e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800932c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 80fb 	beq.w	800952c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	4413      	add	r3, r2
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	429a      	cmp	r2, r3
 8009344:	d305      	bcc.n	8009352 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	429a      	cmp	r2, r3
 8009350:	d903      	bls.n	800935a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009358:	e0e8      	b.n	800952c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	2200      	movs	r2, #0
 800935e:	461c      	mov	r4, r3
 8009360:	4615      	mov	r5, r2
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	022b      	lsls	r3, r5, #8
 800936c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009370:	0222      	lsls	r2, r4, #8
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	6849      	ldr	r1, [r1, #4]
 8009376:	0849      	lsrs	r1, r1, #1
 8009378:	2000      	movs	r0, #0
 800937a:	4688      	mov	r8, r1
 800937c:	4681      	mov	r9, r0
 800937e:	eb12 0a08 	adds.w	sl, r2, r8
 8009382:	eb43 0b09 	adc.w	fp, r3, r9
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	603b      	str	r3, [r7, #0]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009394:	4650      	mov	r0, sl
 8009396:	4659      	mov	r1, fp
 8009398:	f7f7 fc76 	bl	8000c88 <__aeabi_uldivmod>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4613      	mov	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093aa:	d308      	bcc.n	80093be <UART_SetConfig+0x3de>
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b2:	d204      	bcs.n	80093be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	60da      	str	r2, [r3, #12]
 80093bc:	e0b6      	b.n	800952c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80093c4:	e0b2      	b.n	800952c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ce:	d15e      	bne.n	800948e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80093d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d828      	bhi.n	800942a <UART_SetConfig+0x44a>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <UART_SetConfig+0x400>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	08009405 	.word	0x08009405
 80093e4:	0800940d 	.word	0x0800940d
 80093e8:	08009415 	.word	0x08009415
 80093ec:	0800942b 	.word	0x0800942b
 80093f0:	0800941b 	.word	0x0800941b
 80093f4:	0800942b 	.word	0x0800942b
 80093f8:	0800942b 	.word	0x0800942b
 80093fc:	0800942b 	.word	0x0800942b
 8009400:	08009423 	.word	0x08009423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009404:	f7fd ff1c 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
 8009408:	61f8      	str	r0, [r7, #28]
        break;
 800940a:	e014      	b.n	8009436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800940c:	f7fd ff2e 	bl	800726c <HAL_RCC_GetPCLK2Freq>
 8009410:	61f8      	str	r0, [r7, #28]
        break;
 8009412:	e010      	b.n	8009436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009414:	4b4d      	ldr	r3, [pc, #308]	; (800954c <UART_SetConfig+0x56c>)
 8009416:	61fb      	str	r3, [r7, #28]
        break;
 8009418:	e00d      	b.n	8009436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800941a:	f7fd fe79 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 800941e:	61f8      	str	r0, [r7, #28]
        break;
 8009420:	e009      	b.n	8009436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009426:	61fb      	str	r3, [r7, #28]
        break;
 8009428:	e005      	b.n	8009436 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d077      	beq.n	800952c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	005a      	lsls	r2, r3, #1
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	085b      	lsrs	r3, r3, #1
 8009446:	441a      	add	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009450:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2b0f      	cmp	r3, #15
 8009456:	d916      	bls.n	8009486 <UART_SetConfig+0x4a6>
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800945e:	d212      	bcs.n	8009486 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	b29b      	uxth	r3, r3
 8009464:	f023 030f 	bic.w	r3, r3, #15
 8009468:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	b29b      	uxth	r3, r3
 8009470:	f003 0307 	and.w	r3, r3, #7
 8009474:	b29a      	uxth	r2, r3
 8009476:	8afb      	ldrh	r3, [r7, #22]
 8009478:	4313      	orrs	r3, r2
 800947a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	8afa      	ldrh	r2, [r7, #22]
 8009482:	60da      	str	r2, [r3, #12]
 8009484:	e052      	b.n	800952c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800948c:	e04e      	b.n	800952c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800948e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009492:	2b08      	cmp	r3, #8
 8009494:	d827      	bhi.n	80094e6 <UART_SetConfig+0x506>
 8009496:	a201      	add	r2, pc, #4	; (adr r2, 800949c <UART_SetConfig+0x4bc>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080094c1 	.word	0x080094c1
 80094a0:	080094c9 	.word	0x080094c9
 80094a4:	080094d1 	.word	0x080094d1
 80094a8:	080094e7 	.word	0x080094e7
 80094ac:	080094d7 	.word	0x080094d7
 80094b0:	080094e7 	.word	0x080094e7
 80094b4:	080094e7 	.word	0x080094e7
 80094b8:	080094e7 	.word	0x080094e7
 80094bc:	080094df 	.word	0x080094df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094c0:	f7fd febe 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
 80094c4:	61f8      	str	r0, [r7, #28]
        break;
 80094c6:	e014      	b.n	80094f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094c8:	f7fd fed0 	bl	800726c <HAL_RCC_GetPCLK2Freq>
 80094cc:	61f8      	str	r0, [r7, #28]
        break;
 80094ce:	e010      	b.n	80094f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094d0:	4b1e      	ldr	r3, [pc, #120]	; (800954c <UART_SetConfig+0x56c>)
 80094d2:	61fb      	str	r3, [r7, #28]
        break;
 80094d4:	e00d      	b.n	80094f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094d6:	f7fd fe1b 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 80094da:	61f8      	str	r0, [r7, #28]
        break;
 80094dc:	e009      	b.n	80094f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094e2:	61fb      	str	r3, [r7, #28]
        break;
 80094e4:	e005      	b.n	80094f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80094f0:	bf00      	nop
    }

    if (pclk != 0U)
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d019      	beq.n	800952c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	085a      	lsrs	r2, r3, #1
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	441a      	add	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	fbb2 f3f3 	udiv	r3, r2, r3
 800950a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	2b0f      	cmp	r3, #15
 8009510:	d909      	bls.n	8009526 <UART_SetConfig+0x546>
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009518:	d205      	bcs.n	8009526 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60da      	str	r2, [r3, #12]
 8009524:	e002      	b.n	800952c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009538:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800953c:	4618      	mov	r0, r3
 800953e:	3728      	adds	r7, #40	; 0x28
 8009540:	46bd      	mov	sp, r7
 8009542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009546:	bf00      	nop
 8009548:	40008000 	.word	0x40008000
 800954c:	00f42400 	.word	0x00f42400

08009550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	f003 0308 	and.w	r3, r3, #8
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00a      	beq.n	800957a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	f003 0304 	and.w	r3, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	f003 0310 	and.w	r3, r3, #16
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00a      	beq.n	8009624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d01a      	beq.n	8009666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800964e:	d10a      	bne.n	8009666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00a      	beq.n	8009688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b098      	sub	sp, #96	; 0x60
 8009698:	af02      	add	r7, sp, #8
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096a4:	f7fa fb18 	bl	8003cd8 <HAL_GetTick>
 80096a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d12e      	bne.n	8009716 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096c0:	2200      	movs	r2, #0
 80096c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f88c 	bl	80097e4 <UART_WaitOnFlagUntilTimeout>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d021      	beq.n	8009716 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096e6:	653b      	str	r3, [r7, #80]	; 0x50
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f0:	647b      	str	r3, [r7, #68]	; 0x44
 80096f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e6      	bne.n	80096d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2220      	movs	r2, #32
 8009708:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e062      	b.n	80097dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b04      	cmp	r3, #4
 8009722:	d149      	bne.n	80097b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800972c:	2200      	movs	r2, #0
 800972e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f856 	bl	80097e4 <UART_WaitOnFlagUntilTimeout>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d03c      	beq.n	80097b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	623b      	str	r3, [r7, #32]
   return(result);
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975c:	633b      	str	r3, [r7, #48]	; 0x30
 800975e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e6      	bne.n	800973e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	64bb      	str	r3, [r7, #72]	; 0x48
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3308      	adds	r3, #8
 800978e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009790:	61fa      	str	r2, [r7, #28]
 8009792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	69b9      	ldr	r1, [r7, #24]
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	617b      	str	r3, [r7, #20]
   return(result);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e5      	bne.n	8009770 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2220      	movs	r2, #32
 80097a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e011      	b.n	80097dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3758      	adds	r7, #88	; 0x58
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	4613      	mov	r3, r2
 80097f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f4:	e049      	b.n	800988a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fc:	d045      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097fe:	f7fa fa6b 	bl	8003cd8 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	429a      	cmp	r2, r3
 800980c:	d302      	bcc.n	8009814 <UART_WaitOnFlagUntilTimeout+0x30>
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e048      	b.n	80098aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	2b00      	cmp	r3, #0
 8009824:	d031      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	f003 0308 	and.w	r3, r3, #8
 8009830:	2b08      	cmp	r3, #8
 8009832:	d110      	bne.n	8009856 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2208      	movs	r2, #8
 800983a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f8ff 	bl	8009a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2208      	movs	r2, #8
 8009846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e029      	b.n	80098aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009864:	d111      	bne.n	800988a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800986e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f8e5 	bl	8009a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2220      	movs	r2, #32
 800987a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e00f      	b.n	80098aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69da      	ldr	r2, [r3, #28]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4013      	ands	r3, r2
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	429a      	cmp	r2, r3
 8009898:	bf0c      	ite	eq
 800989a:	2301      	moveq	r3, #1
 800989c:	2300      	movne	r3, #0
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	461a      	mov	r2, r3
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d0a6      	beq.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b096      	sub	sp, #88	; 0x58
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	4613      	mov	r3, r2
 80098c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	88fa      	ldrh	r2, [r7, #6]
 80098cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2222      	movs	r2, #34	; 0x22
 80098dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d028      	beq.n	800993a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ec:	4a3e      	ldr	r2, [pc, #248]	; (80099e8 <UART_Start_Receive_DMA+0x134>)
 80098ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098f4:	4a3d      	ldr	r2, [pc, #244]	; (80099ec <UART_Start_Receive_DMA+0x138>)
 80098f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098fc:	4a3c      	ldr	r2, [pc, #240]	; (80099f0 <UART_Start_Receive_DMA+0x13c>)
 80098fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009904:	2200      	movs	r2, #0
 8009906:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3324      	adds	r3, #36	; 0x24
 8009912:	4619      	mov	r1, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009918:	461a      	mov	r2, r3
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	f7fa fbd6 	bl	80040cc <HAL_DMA_Start_IT>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2210      	movs	r2, #16
 800992a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2220      	movs	r2, #32
 8009932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e051      	b.n	80099de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d018      	beq.n	8009974 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009956:	657b      	str	r3, [r7, #84]	; 0x54
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009960:	64bb      	str	r3, [r7, #72]	; 0x48
 8009962:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800996e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e6      	bne.n	8009942 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	653b      	str	r3, [r7, #80]	; 0x50
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009994:	637a      	str	r2, [r7, #52]	; 0x34
 8009996:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800999a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e5      	bne.n	8009974 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	613b      	str	r3, [r7, #16]
   return(result);
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3308      	adds	r3, #8
 80099c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099c8:	623a      	str	r2, [r7, #32]
 80099ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	69f9      	ldr	r1, [r7, #28]
 80099ce:	6a3a      	ldr	r2, [r7, #32]
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3758      	adds	r7, #88	; 0x58
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	08009b09 	.word	0x08009b09
 80099ec:	08009c35 	.word	0x08009c35
 80099f0:	08009c73 	.word	0x08009c73

080099f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b089      	sub	sp, #36	; 0x24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	6979      	ldr	r1, [r7, #20]
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	613b      	str	r3, [r7, #16]
   return(result);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e6      	bne.n	80099fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009a34:	bf00      	nop
 8009a36:	3724      	adds	r7, #36	; 0x24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b095      	sub	sp, #84	; 0x54
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a66:	643b      	str	r3, [r7, #64]	; 0x40
 8009a68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e6      	bne.n	8009a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e5      	bne.n	8009a7a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d118      	bne.n	8009ae8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f023 0310 	bic.w	r3, r3, #16
 8009aca:	647b      	str	r3, [r7, #68]	; 0x44
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad4:	61bb      	str	r3, [r7, #24]
 8009ad6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6979      	ldr	r1, [r7, #20]
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e6      	bne.n	8009ab6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009afc:	bf00      	nop
 8009afe:	3754      	adds	r7, #84	; 0x54
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b09c      	sub	sp, #112	; 0x70
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d171      	bne.n	8009c08 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b52:	e841 2300 	strex	r3, r2, [r1]
 8009b56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e6      	bne.n	8009b2c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3308      	adds	r3, #8
 8009b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b68:	e853 3f00 	ldrex	r3, [r3]
 8009b6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	f023 0301 	bic.w	r3, r3, #1
 8009b74:	667b      	str	r3, [r7, #100]	; 0x64
 8009b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b7e:	647a      	str	r2, [r7, #68]	; 0x44
 8009b80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b86:	e841 2300 	strex	r3, r2, [r1]
 8009b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1e5      	bne.n	8009b5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3308      	adds	r3, #8
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8009baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3308      	adds	r3, #8
 8009bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bb2:	633a      	str	r2, [r7, #48]	; 0x30
 8009bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bba:	e841 2300 	strex	r3, r2, [r1]
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1e5      	bne.n	8009b92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d118      	bne.n	8009c08 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f023 0310 	bic.w	r3, r3, #16
 8009bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	69b9      	ldr	r1, [r7, #24]
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	617b      	str	r3, [r7, #20]
   return(result);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e6      	bne.n	8009bd6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d107      	bne.n	8009c26 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c20:	f7ff f9d2 	bl	8008fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c24:	e002      	b.n	8009c2c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c28:	f7f7 fc4a 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 8009c2c:	bf00      	nop
 8009c2e:	3770      	adds	r7, #112	; 0x70
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c40:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d109      	bne.n	8009c64 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c56:	085b      	lsrs	r3, r3, #1
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f7ff f9b3 	bl	8008fc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c62:	e002      	b.n	8009c6a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff f99b 	bl	8008fa0 <HAL_UART_RxHalfCpltCallback>
}
 8009c6a:	bf00      	nop
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b086      	sub	sp, #24
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c98:	2b80      	cmp	r3, #128	; 0x80
 8009c9a:	d109      	bne.n	8009cb0 <UART_DMAError+0x3e>
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2b21      	cmp	r3, #33	; 0x21
 8009ca0:	d106      	bne.n	8009cb0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009caa:	6978      	ldr	r0, [r7, #20]
 8009cac:	f7ff fea2 	bl	80099f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cba:	2b40      	cmp	r3, #64	; 0x40
 8009cbc:	d109      	bne.n	8009cd2 <UART_DMAError+0x60>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b22      	cmp	r3, #34	; 0x22
 8009cc2:	d106      	bne.n	8009cd2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009ccc:	6978      	ldr	r0, [r7, #20]
 8009cce:	f7ff feb7 	bl	8009a40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cd8:	f043 0210 	orr.w	r2, r3, #16
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ce2:	6978      	ldr	r0, [r7, #20]
 8009ce4:	f7ff f966 	bl	8008fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ce8:	bf00      	nop
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	f107 001c 	add.w	r0, r7, #28
 8009cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 fa1c 	bl	800b14c <USB_CoreReset>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d106      	bne.n	8009d2c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38
 8009d2a:	e005      	b.n	8009d38 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d44:	b004      	add	sp, #16
 8009d46:	4770      	bx	lr

08009d48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d165      	bne.n	8009e28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	4a3e      	ldr	r2, [pc, #248]	; (8009e58 <USB_SetTurnaroundTime+0x110>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d906      	bls.n	8009d72 <USB_SetTurnaroundTime+0x2a>
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	4a3d      	ldr	r2, [pc, #244]	; (8009e5c <USB_SetTurnaroundTime+0x114>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d202      	bcs.n	8009d72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d6c:	230f      	movs	r3, #15
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	e05c      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	4a39      	ldr	r2, [pc, #228]	; (8009e5c <USB_SetTurnaroundTime+0x114>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d306      	bcc.n	8009d88 <USB_SetTurnaroundTime+0x40>
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	4a38      	ldr	r2, [pc, #224]	; (8009e60 <USB_SetTurnaroundTime+0x118>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d202      	bcs.n	8009d88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009d82:	230e      	movs	r3, #14
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	e051      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4a35      	ldr	r2, [pc, #212]	; (8009e60 <USB_SetTurnaroundTime+0x118>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d306      	bcc.n	8009d9e <USB_SetTurnaroundTime+0x56>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4a34      	ldr	r2, [pc, #208]	; (8009e64 <USB_SetTurnaroundTime+0x11c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d202      	bcs.n	8009d9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009d98:	230d      	movs	r3, #13
 8009d9a:	617b      	str	r3, [r7, #20]
 8009d9c:	e046      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4a30      	ldr	r2, [pc, #192]	; (8009e64 <USB_SetTurnaroundTime+0x11c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d306      	bcc.n	8009db4 <USB_SetTurnaroundTime+0x6c>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4a2f      	ldr	r2, [pc, #188]	; (8009e68 <USB_SetTurnaroundTime+0x120>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d802      	bhi.n	8009db4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009dae:	230c      	movs	r3, #12
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	e03b      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4a2c      	ldr	r2, [pc, #176]	; (8009e68 <USB_SetTurnaroundTime+0x120>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d906      	bls.n	8009dca <USB_SetTurnaroundTime+0x82>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4a2b      	ldr	r2, [pc, #172]	; (8009e6c <USB_SetTurnaroundTime+0x124>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d802      	bhi.n	8009dca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009dc4:	230b      	movs	r3, #11
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	e030      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	4a27      	ldr	r2, [pc, #156]	; (8009e6c <USB_SetTurnaroundTime+0x124>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d906      	bls.n	8009de0 <USB_SetTurnaroundTime+0x98>
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4a26      	ldr	r2, [pc, #152]	; (8009e70 <USB_SetTurnaroundTime+0x128>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d802      	bhi.n	8009de0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009dda:	230a      	movs	r3, #10
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	e025      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	4a23      	ldr	r2, [pc, #140]	; (8009e70 <USB_SetTurnaroundTime+0x128>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d906      	bls.n	8009df6 <USB_SetTurnaroundTime+0xae>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4a22      	ldr	r2, [pc, #136]	; (8009e74 <USB_SetTurnaroundTime+0x12c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d202      	bcs.n	8009df6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009df0:	2309      	movs	r3, #9
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	e01a      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	4a1e      	ldr	r2, [pc, #120]	; (8009e74 <USB_SetTurnaroundTime+0x12c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d306      	bcc.n	8009e0c <USB_SetTurnaroundTime+0xc4>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	4a1d      	ldr	r2, [pc, #116]	; (8009e78 <USB_SetTurnaroundTime+0x130>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d802      	bhi.n	8009e0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009e06:	2308      	movs	r3, #8
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e00f      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <USB_SetTurnaroundTime+0x130>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d906      	bls.n	8009e22 <USB_SetTurnaroundTime+0xda>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <USB_SetTurnaroundTime+0x134>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d202      	bcs.n	8009e22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009e1c:	2307      	movs	r3, #7
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	e004      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009e22:	2306      	movs	r3, #6
 8009e24:	617b      	str	r3, [r7, #20]
 8009e26:	e001      	b.n	8009e2c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009e28:	2309      	movs	r3, #9
 8009e2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68da      	ldr	r2, [r3, #12]
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	029b      	lsls	r3, r3, #10
 8009e40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009e44:	431a      	orrs	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	00d8acbf 	.word	0x00d8acbf
 8009e5c:	00e4e1c0 	.word	0x00e4e1c0
 8009e60:	00f42400 	.word	0x00f42400
 8009e64:	01067380 	.word	0x01067380
 8009e68:	011a499f 	.word	0x011a499f
 8009e6c:	01312cff 	.word	0x01312cff
 8009e70:	014ca43f 	.word	0x014ca43f
 8009e74:	016e3600 	.word	0x016e3600
 8009e78:	01a6ab1f 	.word	0x01a6ab1f
 8009e7c:	01e84800 	.word	0x01e84800

08009e80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f043 0201 	orr.w	r2, r3, #1
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f023 0201 	bic.w	r2, r3, #1
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d115      	bne.n	8009f12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	f7f9 fefc 	bl	8003cf0 <HAL_Delay>
      ms++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f001 f8ab 	bl	800b05a <USB_GetMode>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d01e      	beq.n	8009f48 <USB_SetCurrentMode+0x84>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b31      	cmp	r3, #49	; 0x31
 8009f0e:	d9f0      	bls.n	8009ef2 <USB_SetCurrentMode+0x2e>
 8009f10:	e01a      	b.n	8009f48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f12:	78fb      	ldrb	r3, [r7, #3]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d115      	bne.n	8009f44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f24:	2001      	movs	r0, #1
 8009f26:	f7f9 fee3 	bl	8003cf0 <HAL_Delay>
      ms++;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f892 	bl	800b05a <USB_GetMode>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <USB_SetCurrentMode+0x84>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b31      	cmp	r3, #49	; 0x31
 8009f40:	d9f0      	bls.n	8009f24 <USB_SetCurrentMode+0x60>
 8009f42:	e001      	b.n	8009f48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e005      	b.n	8009f54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b32      	cmp	r3, #50	; 0x32
 8009f4c:	d101      	bne.n	8009f52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b086      	sub	sp, #24
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f76:	2300      	movs	r3, #0
 8009f78:	613b      	str	r3, [r7, #16]
 8009f7a:	e009      	b.n	8009f90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3340      	adds	r3, #64	; 0x40
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	2200      	movs	r2, #0
 8009f88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	613b      	str	r3, [r7, #16]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b0e      	cmp	r3, #14
 8009f94:	d9f2      	bls.n	8009f7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11c      	bne.n	8009fd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009faa:	f043 0302 	orr.w	r3, r3, #2
 8009fae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	e005      	b.n	8009fe2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fe8:	461a      	mov	r2, r3
 8009fea:	2300      	movs	r3, #0
 8009fec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009fee:	2103      	movs	r1, #3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f959 	bl	800a2a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ff6:	2110      	movs	r1, #16
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f8f1 	bl	800a1e0 <USB_FlushTxFifo>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f91d 	bl	800a248 <USB_FlushRxFifo>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01e:	461a      	mov	r2, r3
 800a020:	2300      	movs	r3, #0
 800a022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02a:	461a      	mov	r2, r3
 800a02c:	2300      	movs	r3, #0
 800a02e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a036:	461a      	mov	r2, r3
 800a038:	2300      	movs	r3, #0
 800a03a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a03c:	2300      	movs	r3, #0
 800a03e:	613b      	str	r3, [r7, #16]
 800a040:	e043      	b.n	800a0ca <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a058:	d118      	bne.n	800a08c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	461a      	mov	r2, r3
 800a06e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	e013      	b.n	800a09e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a082:	461a      	mov	r2, r3
 800a084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	e008      	b.n	800a09e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a098:	461a      	mov	r2, r3
 800a09a:	2300      	movs	r3, #0
 800a09c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	613b      	str	r3, [r7, #16]
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d3b7      	bcc.n	800a042 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	613b      	str	r3, [r7, #16]
 800a0d6:	e043      	b.n	800a160 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0ee:	d118      	bne.n	800a122 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a102:	461a      	mov	r2, r3
 800a104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	e013      	b.n	800a134 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a118:	461a      	mov	r2, r3
 800a11a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	e008      	b.n	800a134 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12e:	461a      	mov	r2, r3
 800a130:	2300      	movs	r3, #0
 800a132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a140:	461a      	mov	r2, r3
 800a142:	2300      	movs	r3, #0
 800a144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a152:	461a      	mov	r2, r3
 800a154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	3301      	adds	r3, #1
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	429a      	cmp	r2, r3
 800a166:	d3b7      	bcc.n	800a0d8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a17a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	f043 0210 	orr.w	r2, r3, #16
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	699a      	ldr	r2, [r3, #24]
 800a19a:	4b10      	ldr	r3, [pc, #64]	; (800a1dc <USB_DevInit+0x280>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f043 0208 	orr.w	r2, r3, #8
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d107      	bne.n	800a1ca <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a1c2:	f043 0304 	orr.w	r3, r3, #4
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1d6:	b004      	add	sp, #16
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	803c3800 	.word	0x803c3800

0800a1e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4a13      	ldr	r2, [pc, #76]	; (800a244 <USB_FlushTxFifo+0x64>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d901      	bls.n	800a200 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e01b      	b.n	800a238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	daf2      	bge.n	800a1ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	019b      	lsls	r3, r3, #6
 800a210:	f043 0220 	orr.w	r2, r3, #32
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3301      	adds	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4a08      	ldr	r2, [pc, #32]	; (800a244 <USB_FlushTxFifo+0x64>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d901      	bls.n	800a22a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e006      	b.n	800a238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b20      	cmp	r3, #32
 800a234:	d0f0      	beq.n	800a218 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	00030d40 	.word	0x00030d40

0800a248 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3301      	adds	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4a11      	ldr	r2, [pc, #68]	; (800a2a4 <USB_FlushRxFifo+0x5c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d901      	bls.n	800a266 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e018      	b.n	800a298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	daf2      	bge.n	800a254 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2210      	movs	r2, #16
 800a276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3301      	adds	r3, #1
 800a27c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <USB_FlushRxFifo+0x5c>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e006      	b.n	800a298 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	f003 0310 	and.w	r3, r3, #16
 800a292:	2b10      	cmp	r3, #16
 800a294:	d0f0      	beq.n	800a278 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	00030d40 	.word	0x00030d40

0800a2a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b087      	sub	sp, #28
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f003 0306 	and.w	r3, r3, #6
 800a2f2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d002      	beq.n	800a300 <USB_GetDevSpeed+0x26>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b06      	cmp	r3, #6
 800a2fe:	d102      	bne.n	800a306 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a300:	2302      	movs	r3, #2
 800a302:	75fb      	strb	r3, [r7, #23]
 800a304:	e001      	b.n	800a30a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a306:	230f      	movs	r3, #15
 800a308:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d13a      	bne.n	800a3aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	f003 030f 	and.w	r3, r3, #15
 800a344:	2101      	movs	r1, #1
 800a346:	fa01 f303 	lsl.w	r3, r1, r3
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	68f9      	ldr	r1, [r7, #12]
 800a34e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a352:	4313      	orrs	r3, r2
 800a354:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d155      	bne.n	800a418 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4413      	add	r3, r2
 800a374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	791b      	ldrb	r3, [r3, #4]
 800a386:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a388:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	059b      	lsls	r3, r3, #22
 800a38e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a390:	4313      	orrs	r3, r2
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a39e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	e036      	b.n	800a418 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b0:	69da      	ldr	r2, [r3, #28]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	f003 030f 	and.w	r3, r3, #15
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c0:	041b      	lsls	r3, r3, #16
 800a3c2:	68f9      	ldr	r1, [r7, #12]
 800a3c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d11a      	bne.n	800a418 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	791b      	ldrb	r3, [r3, #4]
 800a3fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a3fe:	430b      	orrs	r3, r1
 800a400:	4313      	orrs	r3, r2
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	0151      	lsls	r1, r2, #5
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	440a      	add	r2, r1
 800a40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a40e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a416:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d161      	bne.n	800a508 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a45a:	d11f      	bne.n	800a49c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a47a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	0151      	lsls	r1, r2, #5
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	440a      	add	r2, r1
 800a492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a49a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	f003 030f 	and.w	r3, r3, #15
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	43db      	mvns	r3, r3
 800a4b6:	68f9      	ldr	r1, [r7, #12]
 800a4b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4bc:	4013      	ands	r3, r2
 800a4be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c6:	69da      	ldr	r2, [r3, #28]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	0159      	lsls	r1, r3, #5
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	440b      	add	r3, r1
 800a4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fe:	4619      	mov	r1, r3
 800a500:	4b35      	ldr	r3, [pc, #212]	; (800a5d8 <USB_DeactivateEndpoint+0x1b0>)
 800a502:	4013      	ands	r3, r2
 800a504:	600b      	str	r3, [r1, #0]
 800a506:	e060      	b.n	800a5ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a51a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a51e:	d11f      	bne.n	800a560 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	0151      	lsls	r1, r2, #5
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	440a      	add	r2, r1
 800a536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a53a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a53e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	0151      	lsls	r1, r2, #5
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	440a      	add	r2, r1
 800a556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a55a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a55e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	2101      	movs	r1, #1
 800a572:	fa01 f303 	lsl.w	r3, r1, r3
 800a576:	041b      	lsls	r3, r3, #16
 800a578:	43db      	mvns	r3, r3
 800a57a:	68f9      	ldr	r1, [r7, #12]
 800a57c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a580:	4013      	ands	r3, r2
 800a582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	2101      	movs	r1, #1
 800a596:	fa01 f303 	lsl.w	r3, r1, r3
 800a59a:	041b      	lsls	r3, r3, #16
 800a59c:	43db      	mvns	r3, r3
 800a59e:	68f9      	ldr	r1, [r7, #12]
 800a5a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	0159      	lsls	r1, r3, #5
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	440b      	add	r3, r1
 800a5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <USB_DeactivateEndpoint+0x1b4>)
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	ec337800 	.word	0xec337800
 800a5dc:	eff37800 	.word	0xeff37800

0800a5e0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	f040 8128 	bne.w	800a84e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d132      	bne.n	800a66c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	0151      	lsls	r1, r2, #5
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	440a      	add	r2, r1
 800a61c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	4413      	add	r3, r2
 800a632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	0151      	lsls	r1, r2, #5
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	440a      	add	r2, r1
 800a640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	0151      	lsls	r1, r2, #5
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	440a      	add	r2, r1
 800a660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a664:	0cdb      	lsrs	r3, r3, #19
 800a666:	04db      	lsls	r3, r3, #19
 800a668:	6113      	str	r3, [r2, #16]
 800a66a:	e092      	b.n	800a792 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	440a      	add	r2, r1
 800a682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a686:	0cdb      	lsrs	r3, r3, #19
 800a688:	04db      	lsls	r3, r3, #19
 800a68a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d11a      	bne.n	800a6ec <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	691a      	ldr	r2, [r3, #16]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d903      	bls.n	800a6ca <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	689a      	ldr	r2, [r3, #8]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6e8:	6113      	str	r3, [r2, #16]
 800a6ea:	e01b      	b.n	800a724 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	6919      	ldr	r1, [r3, #16]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	440b      	add	r3, r1
 800a704:	1e59      	subs	r1, r3, #1
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a70e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a710:	4b8d      	ldr	r3, [pc, #564]	; (800a948 <USB_EPStartXfer+0x368>)
 800a712:	400b      	ands	r3, r1
 800a714:	6939      	ldr	r1, [r7, #16]
 800a716:	0148      	lsls	r0, r1, #5
 800a718:	6979      	ldr	r1, [r7, #20]
 800a71a:	4401      	add	r1, r0
 800a71c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a720:	4313      	orrs	r3, r2
 800a722:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a730:	691a      	ldr	r2, [r3, #16]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a73a:	6939      	ldr	r1, [r7, #16]
 800a73c:	0148      	lsls	r0, r1, #5
 800a73e:	6979      	ldr	r1, [r7, #20]
 800a740:	4401      	add	r1, r0
 800a742:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a746:	4313      	orrs	r3, r2
 800a748:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	791b      	ldrb	r3, [r3, #4]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d11f      	bne.n	800a792 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a770:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	0151      	lsls	r1, r2, #5
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	440a      	add	r2, r1
 800a788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a78c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a790:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7b0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	791b      	ldrb	r3, [r3, #4]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d015      	beq.n	800a7e6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 8139 	beq.w	800aa36 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	f003 030f 	and.w	r3, r3, #15
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7da:	6979      	ldr	r1, [r7, #20]
 800a7dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	634b      	str	r3, [r1, #52]	; 0x34
 800a7e4:	e127      	b.n	800aa36 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d110      	bne.n	800a818 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	e00f      	b.n	800a838 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	0151      	lsls	r1, r2, #5
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	440a      	add	r2, r1
 800a82e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a836:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	68d9      	ldr	r1, [r3, #12]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	b29b      	uxth	r3, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f9a6 	bl	800ab98 <USB_WritePacket>
 800a84c:	e0f3      	b.n	800aa36 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	015a      	lsls	r2, r3, #5
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	4413      	add	r3, r2
 800a856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	0151      	lsls	r1, r2, #5
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	440a      	add	r2, r1
 800a864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a868:	0cdb      	lsrs	r3, r3, #19
 800a86a:	04db      	lsls	r3, r3, #19
 800a86c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	015a      	lsls	r2, r3, #5
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	4413      	add	r3, r2
 800a876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	0151      	lsls	r1, r2, #5
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	440a      	add	r2, r1
 800a884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a88c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a890:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d12f      	bne.n	800a8f8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	689a      	ldr	r2, [r3, #8]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8bc:	691a      	ldr	r2, [r3, #16]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8c6:	6939      	ldr	r1, [r7, #16]
 800a8c8:	0148      	lsls	r0, r1, #5
 800a8ca:	6979      	ldr	r1, [r7, #20]
 800a8cc:	4401      	add	r1, r0
 800a8ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	015a      	lsls	r2, r3, #5
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	4413      	add	r3, r2
 800a8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	0151      	lsls	r1, r2, #5
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	440a      	add	r2, r1
 800a8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8f4:	6113      	str	r3, [r2, #16]
 800a8f6:	e061      	b.n	800a9bc <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d125      	bne.n	800a94c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	4413      	add	r3, r2
 800a908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90c:	691a      	ldr	r2, [r3, #16]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a916:	6939      	ldr	r1, [r7, #16]
 800a918:	0148      	lsls	r0, r1, #5
 800a91a:	6979      	ldr	r1, [r7, #20]
 800a91c:	4401      	add	r1, r0
 800a91e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a922:	4313      	orrs	r3, r2
 800a924:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	0151      	lsls	r1, r2, #5
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	440a      	add	r2, r1
 800a93c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a944:	6113      	str	r3, [r2, #16]
 800a946:	e039      	b.n	800a9bc <USB_EPStartXfer+0x3dc>
 800a948:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	691a      	ldr	r2, [r3, #16]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	4413      	add	r3, r2
 800a956:	1e5a      	subs	r2, r3, #1
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a960:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	89fa      	ldrh	r2, [r7, #14]
 800a968:	fb03 f202 	mul.w	r2, r3, r2
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97c:	691a      	ldr	r2, [r3, #16]
 800a97e:	89fb      	ldrh	r3, [r7, #14]
 800a980:	04d9      	lsls	r1, r3, #19
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <USB_EPStartXfer+0x460>)
 800a984:	400b      	ands	r3, r1
 800a986:	6939      	ldr	r1, [r7, #16]
 800a988:	0148      	lsls	r0, r1, #5
 800a98a:	6979      	ldr	r1, [r7, #20]
 800a98c:	4401      	add	r1, r0
 800a98e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a992:	4313      	orrs	r3, r2
 800a994:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a2:	691a      	ldr	r2, [r3, #16]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9ac:	6939      	ldr	r1, [r7, #16]
 800a9ae:	0148      	lsls	r0, r1, #5
 800a9b0:	6979      	ldr	r1, [r7, #20]
 800a9b2:	4401      	add	r1, r0
 800a9b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	791b      	ldrb	r3, [r3, #4]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d128      	bne.n	800aa16 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d110      	bne.n	800a9f6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	0151      	lsls	r1, r2, #5
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	440a      	add	r2, r1
 800a9ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	e00f      	b.n	800aa16 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	0151      	lsls	r1, r2, #5
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	440a      	add	r2, r1
 800aa0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa14:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	0151      	lsls	r1, r2, #5
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	440a      	add	r2, r1
 800aa2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	1ff80000 	.word	0x1ff80000

0800aa44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d14a      	bne.n	800aaf8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa7a:	f040 8086 	bne.w	800ab8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	7812      	ldrb	r2, [r2, #0]
 800aa92:	0151      	lsls	r1, r2, #5
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	440a      	add	r2, r1
 800aa98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aaa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	7812      	ldrb	r2, [r2, #0]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f242 7210 	movw	r2, #10000	; 0x2710
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d902      	bls.n	800aadc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	75fb      	strb	r3, [r7, #23]
          break;
 800aada:	e056      	b.n	800ab8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaf4:	d0e7      	beq.n	800aac6 <USB_EPStopXfer+0x82>
 800aaf6:	e048      	b.n	800ab8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab10:	d13b      	bne.n	800ab8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	7812      	ldrb	r2, [r2, #0]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	7812      	ldrb	r2, [r2, #0]
 800ab4a:	0151      	lsls	r1, r2, #5
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	440a      	add	r2, r1
 800ab50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f242 7210 	movw	r2, #10000	; 0x2710
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d902      	bls.n	800ab70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ab6e:	e00c      	b.n	800ab8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab88:	d0e7      	beq.n	800ab5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	371c      	adds	r7, #28
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b089      	sub	sp, #36	; 0x24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	4611      	mov	r1, r2
 800aba4:	461a      	mov	r2, r3
 800aba6:	460b      	mov	r3, r1
 800aba8:	71fb      	strb	r3, [r7, #7]
 800abaa:	4613      	mov	r3, r2
 800abac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800abb6:	88bb      	ldrh	r3, [r7, #4]
 800abb8:	3303      	adds	r3, #3
 800abba:	089b      	lsrs	r3, r3, #2
 800abbc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800abbe:	2300      	movs	r3, #0
 800abc0:	61bb      	str	r3, [r7, #24]
 800abc2:	e018      	b.n	800abf6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	031a      	lsls	r2, r3, #12
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd0:	461a      	mov	r2, r3
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	3301      	adds	r3, #1
 800abdc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	3301      	adds	r3, #1
 800abe2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	3301      	adds	r3, #1
 800abe8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	3301      	adds	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	3301      	adds	r3, #1
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	69ba      	ldr	r2, [r7, #24]
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d3e2      	bcc.n	800abc4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3724      	adds	r7, #36	; 0x24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b08b      	sub	sp, #44	; 0x2c
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	4613      	mov	r3, r2
 800ac18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac22:	88fb      	ldrh	r3, [r7, #6]
 800ac24:	089b      	lsrs	r3, r3, #2
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	f003 0303 	and.w	r3, r3, #3
 800ac30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	623b      	str	r3, [r7, #32]
 800ac36:	e014      	b.n	800ac62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	601a      	str	r2, [r3, #0]
    pDest++;
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	3301      	adds	r3, #1
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	3301      	adds	r3, #1
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	3301      	adds	r3, #1
 800ac5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	623b      	str	r3, [r7, #32]
 800ac62:	6a3a      	ldr	r2, [r7, #32]
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d3e6      	bcc.n	800ac38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac6a:	8bfb      	ldrh	r3, [r7, #30]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01e      	beq.n	800acae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f107 0310 	add.w	r3, r7, #16
 800ac80:	6812      	ldr	r2, [r2, #0]
 800ac82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	701a      	strb	r2, [r3, #0]
      i++;
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	3301      	adds	r3, #1
 800aca0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aca2:	8bfb      	ldrh	r3, [r7, #30]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aca8:	8bfb      	ldrh	r3, [r7, #30]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1ea      	bne.n	800ac84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	372c      	adds	r7, #44	; 0x2c
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d12c      	bne.n	800ad32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	db12      	blt.n	800ad10 <USB_EPSetStall+0x54>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00f      	beq.n	800ad10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	0151      	lsls	r1, r2, #5
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	440a      	add	r2, r1
 800ad06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	0151      	lsls	r1, r2, #5
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	440a      	add	r2, r1
 800ad26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	e02b      	b.n	800ad8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	db12      	blt.n	800ad6a <USB_EPSetStall+0xae>
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00f      	beq.n	800ad6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	015a      	lsls	r2, r3, #5
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	4413      	add	r3, r2
 800ad52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	0151      	lsls	r1, r2, #5
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	440a      	add	r2, r1
 800ad60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	0151      	lsls	r1, r2, #5
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	440a      	add	r2, r1
 800ad80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	785b      	ldrb	r3, [r3, #1]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d128      	bne.n	800ae06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	0151      	lsls	r1, r2, #5
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	440a      	add	r2, r1
 800adca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800add2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	791b      	ldrb	r3, [r3, #4]
 800add8:	2b03      	cmp	r3, #3
 800adda:	d003      	beq.n	800ade4 <USB_EPClearStall+0x4c>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	791b      	ldrb	r3, [r3, #4]
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d138      	bne.n	800ae56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	e027      	b.n	800ae56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	0151      	lsls	r1, r2, #5
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	440a      	add	r2, r1
 800ae1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	791b      	ldrb	r3, [r3, #4]
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d003      	beq.n	800ae36 <USB_EPClearStall+0x9e>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	791b      	ldrb	r3, [r3, #4]
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d10f      	bne.n	800ae56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	0151      	lsls	r1, r2, #5
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	440a      	add	r2, r1
 800ae4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ae86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ae98:	68f9      	ldr	r1, [r7, #12]
 800ae9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aede:	f023 0302 	bic.w	r3, r3, #2
 800aee2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b085      	sub	sp, #20
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af0c:	f023 0303 	bic.w	r3, r3, #3
 800af10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af20:	f043 0302 	orr.w	r3, r3, #2
 800af24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	699b      	ldr	r3, [r3, #24]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4013      	ands	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800af4c:	68fb      	ldr	r3, [r7, #12]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b085      	sub	sp, #20
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	4013      	ands	r3, r2
 800af7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	0c1b      	lsrs	r3, r3, #16
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800af8e:	b480      	push	{r7}
 800af90:	b085      	sub	sp, #20
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	4013      	ands	r3, r2
 800afb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	b29b      	uxth	r3, r3
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	4013      	ands	r3, r2
 800afee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aff0:	68bb      	ldr	r3, [r7, #8]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800affe:	b480      	push	{r7}
 800b000:	b087      	sub	sp, #28
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	460b      	mov	r3, r1
 800b008:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b020:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b022:	78fb      	ldrb	r3, [r7, #3]
 800b024:	f003 030f 	and.w	r3, r3, #15
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	fa22 f303 	lsr.w	r3, r2, r3
 800b02e:	01db      	lsls	r3, r3, #7
 800b030:	b2db      	uxtb	r3, r3
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	4313      	orrs	r3, r2
 800b036:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b038:	78fb      	ldrb	r3, [r7, #3]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	4013      	ands	r3, r2
 800b04a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b04c:	68bb      	ldr	r3, [r7, #8]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	371c      	adds	r7, #28
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	f003 0301 	and.w	r3, r3, #1
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b076:	b480      	push	{r7}
 800b078:	b085      	sub	sp, #20
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b090:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b094:	f023 0307 	bic.w	r3, r3, #7
 800b098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	333c      	adds	r3, #60	; 0x3c
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	4a1c      	ldr	r2, [pc, #112]	; (800b148 <USB_EP0_OutStart+0x8c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d90a      	bls.n	800b0f2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0ec:	d101      	bne.n	800b0f2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e024      	b.n	800b13c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b10c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b120:	f043 0318 	orr.w	r3, r3, #24
 800b124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b134:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b138:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	4f54300a 	.word	0x4f54300a

0800b14c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3301      	adds	r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4a13      	ldr	r2, [pc, #76]	; (800b1b0 <USB_CoreReset+0x64>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d901      	bls.n	800b16a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e01b      	b.n	800b1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	daf2      	bge.n	800b158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	f043 0201 	orr.w	r2, r3, #1
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4a09      	ldr	r2, [pc, #36]	; (800b1b0 <USB_CoreReset+0x64>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d901      	bls.n	800b194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e006      	b.n	800b1a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d0f0      	beq.n	800b182 <USB_CoreReset+0x36>

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	00030d40 	.word	0x00030d40

0800b1b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b1c4:	f002 fe26 	bl	800de14 <USBD_static_malloc>
 800b1c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	32b0      	adds	r2, #176	; 0xb0
 800b1da:	2100      	movs	r1, #0
 800b1dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e0d4      	b.n	800b38e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b1e4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f003 fdcb 	bl	800ed86 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	32b0      	adds	r2, #176	; 0xb0
 800b1fa:	68f9      	ldr	r1, [r7, #12]
 800b1fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	32b0      	adds	r2, #176	; 0xb0
 800b20a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	7c1b      	ldrb	r3, [r3, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d138      	bne.n	800b28e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b21c:	4b5e      	ldr	r3, [pc, #376]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b21e:	7819      	ldrb	r1, [r3, #0]
 800b220:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b224:	2202      	movs	r2, #2
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f002 fbe0 	bl	800d9ec <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b22c:	4b5a      	ldr	r3, [pc, #360]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	f003 020f 	and.w	r2, r3, #15
 800b234:	6879      	ldr	r1, [r7, #4]
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	440b      	add	r3, r1
 800b240:	3324      	adds	r3, #36	; 0x24
 800b242:	2201      	movs	r2, #1
 800b244:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b246:	4b55      	ldr	r3, [pc, #340]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b248:	7819      	ldrb	r1, [r3, #0]
 800b24a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b24e:	2202      	movs	r2, #2
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f002 fbcb 	bl	800d9ec <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b256:	4b51      	ldr	r3, [pc, #324]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	f003 020f 	and.w	r2, r3, #15
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b26e:	2201      	movs	r2, #1
 800b270:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b272:	4b4b      	ldr	r3, [pc, #300]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	f003 020f 	and.w	r2, r3, #15
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	4613      	mov	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	3326      	adds	r3, #38	; 0x26
 800b288:	2210      	movs	r2, #16
 800b28a:	801a      	strh	r2, [r3, #0]
 800b28c:	e035      	b.n	800b2fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b28e:	4b42      	ldr	r3, [pc, #264]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b290:	7819      	ldrb	r1, [r3, #0]
 800b292:	2340      	movs	r3, #64	; 0x40
 800b294:	2202      	movs	r2, #2
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f002 fba8 	bl	800d9ec <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b29c:	4b3e      	ldr	r3, [pc, #248]	; (800b398 <USBD_CDC_Init+0x1e4>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	f003 020f 	and.w	r2, r3, #15
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	440b      	add	r3, r1
 800b2b0:	3324      	adds	r3, #36	; 0x24
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b2b6:	4b39      	ldr	r3, [pc, #228]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b2b8:	7819      	ldrb	r1, [r3, #0]
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	2202      	movs	r2, #2
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f002 fb94 	bl	800d9ec <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b2c4:	4b35      	ldr	r3, [pc, #212]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 020f 	and.w	r2, r3, #15
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	440b      	add	r3, r1
 800b2d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2dc:	2201      	movs	r2, #1
 800b2de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2e0:	4b2f      	ldr	r3, [pc, #188]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	f003 020f 	and.w	r2, r3, #15
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3326      	adds	r3, #38	; 0x26
 800b2f6:	2210      	movs	r2, #16
 800b2f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2fa:	4b29      	ldr	r3, [pc, #164]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	2308      	movs	r3, #8
 800b300:	2203      	movs	r2, #3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f002 fb72 	bl	800d9ec <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b308:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <USBD_CDC_Init+0x1ec>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 020f 	and.w	r2, r3, #15
 800b310:	6879      	ldr	r1, [r7, #4]
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	440b      	add	r3, r1
 800b31c:	3324      	adds	r3, #36	; 0x24
 800b31e:	2201      	movs	r2, #1
 800b320:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	33b0      	adds	r3, #176	; 0xb0
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b358:	2302      	movs	r3, #2
 800b35a:	e018      	b.n	800b38e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	7c1b      	ldrb	r3, [r3, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b364:	4b0d      	ldr	r3, [pc, #52]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b366:	7819      	ldrb	r1, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b36e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f002 fcb4 	bl	800dce0 <USBD_LL_PrepareReceive>
 800b378:	e008      	b.n	800b38c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b37a:	4b08      	ldr	r3, [pc, #32]	; (800b39c <USBD_CDC_Init+0x1e8>)
 800b37c:	7819      	ldrb	r1, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b384:	2340      	movs	r3, #64	; 0x40
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f002 fcaa 	bl	800dce0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20000123 	.word	0x20000123
 800b39c:	20000124 	.word	0x20000124
 800b3a0:	20000125 	.word	0x20000125

0800b3a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b3b0:	4b3a      	ldr	r3, [pc, #232]	; (800b49c <USBD_CDC_DeInit+0xf8>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f002 fb56 	bl	800da68 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b3bc:	4b37      	ldr	r3, [pc, #220]	; (800b49c <USBD_CDC_DeInit+0xf8>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 020f 	and.w	r2, r3, #15
 800b3c4:	6879      	ldr	r1, [r7, #4]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	440b      	add	r3, r1
 800b3d0:	3324      	adds	r3, #36	; 0x24
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b3d6:	4b32      	ldr	r3, [pc, #200]	; (800b4a0 <USBD_CDC_DeInit+0xfc>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f002 fb43 	bl	800da68 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b3e2:	4b2f      	ldr	r3, [pc, #188]	; (800b4a0 <USBD_CDC_DeInit+0xfc>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	f003 020f 	and.w	r2, r3, #15
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	440b      	add	r3, r1
 800b3f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b3fe:	4b29      	ldr	r3, [pc, #164]	; (800b4a4 <USBD_CDC_DeInit+0x100>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f002 fb2f 	bl	800da68 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b40a:	4b26      	ldr	r3, [pc, #152]	; (800b4a4 <USBD_CDC_DeInit+0x100>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	f003 020f 	and.w	r2, r3, #15
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	440b      	add	r3, r1
 800b41e:	3324      	adds	r3, #36	; 0x24
 800b420:	2200      	movs	r2, #0
 800b422:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b424:	4b1f      	ldr	r3, [pc, #124]	; (800b4a4 <USBD_CDC_DeInit+0x100>)
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	f003 020f 	and.w	r2, r3, #15
 800b42c:	6879      	ldr	r1, [r7, #4]
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	440b      	add	r3, r1
 800b438:	3326      	adds	r3, #38	; 0x26
 800b43a:	2200      	movs	r2, #0
 800b43c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	32b0      	adds	r2, #176	; 0xb0
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01f      	beq.n	800b490 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	33b0      	adds	r3, #176	; 0xb0
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	32b0      	adds	r2, #176	; 0xb0
 800b46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b472:	4618      	mov	r0, r3
 800b474:	f002 fcdc 	bl	800de30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	32b0      	adds	r2, #176	; 0xb0
 800b482:	2100      	movs	r1, #0
 800b484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000123 	.word	0x20000123
 800b4a0:	20000124 	.word	0x20000124
 800b4a4:	20000125 	.word	0x20000125

0800b4a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	32b0      	adds	r2, #176	; 0xb0
 800b4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e0bf      	b.n	800b658 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d050      	beq.n	800b586 <USBD_CDC_Setup+0xde>
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	f040 80af 	bne.w	800b648 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	88db      	ldrh	r3, [r3, #6]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d03a      	beq.n	800b568 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	b25b      	sxtb	r3, r3
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	da1b      	bge.n	800b534 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	33b0      	adds	r3, #176	; 0xb0
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b512:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	88d2      	ldrh	r2, [r2, #6]
 800b518:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	88db      	ldrh	r3, [r3, #6]
 800b51e:	2b07      	cmp	r3, #7
 800b520:	bf28      	it	cs
 800b522:	2307      	movcs	r3, #7
 800b524:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	89fa      	ldrh	r2, [r7, #14]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f001 fdb3 	bl	800d098 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b532:	e090      	b.n	800b656 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	785a      	ldrb	r2, [r3, #1]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	88db      	ldrh	r3, [r3, #6]
 800b542:	2b3f      	cmp	r3, #63	; 0x3f
 800b544:	d803      	bhi.n	800b54e <USBD_CDC_Setup+0xa6>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	88db      	ldrh	r3, [r3, #6]
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	e000      	b.n	800b550 <USBD_CDC_Setup+0xa8>
 800b54e:	2240      	movs	r2, #64	; 0x40
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b556:	6939      	ldr	r1, [r7, #16]
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b55e:	461a      	mov	r2, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 fdc5 	bl	800d0f0 <USBD_CtlPrepareRx>
      break;
 800b566:	e076      	b.n	800b656 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	33b0      	adds	r3, #176	; 0xb0
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	7850      	ldrb	r0, [r2, #1]
 800b57e:	2200      	movs	r2, #0
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	4798      	blx	r3
      break;
 800b584:	e067      	b.n	800b656 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	2b0b      	cmp	r3, #11
 800b58c:	d851      	bhi.n	800b632 <USBD_CDC_Setup+0x18a>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <USBD_CDC_Setup+0xec>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5c5 	.word	0x0800b5c5
 800b598:	0800b641 	.word	0x0800b641
 800b59c:	0800b633 	.word	0x0800b633
 800b5a0:	0800b633 	.word	0x0800b633
 800b5a4:	0800b633 	.word	0x0800b633
 800b5a8:	0800b633 	.word	0x0800b633
 800b5ac:	0800b633 	.word	0x0800b633
 800b5b0:	0800b633 	.word	0x0800b633
 800b5b4:	0800b633 	.word	0x0800b633
 800b5b8:	0800b633 	.word	0x0800b633
 800b5bc:	0800b5ef 	.word	0x0800b5ef
 800b5c0:	0800b619 	.word	0x0800b619
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d107      	bne.n	800b5e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b5d0:	f107 030a 	add.w	r3, r7, #10
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 fd5d 	bl	800d098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5de:	e032      	b.n	800b646 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 fce7 	bl	800cfb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	75fb      	strb	r3, [r7, #23]
          break;
 800b5ec:	e02b      	b.n	800b646 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d107      	bne.n	800b60a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5fa:	f107 030d 	add.w	r3, r7, #13
 800b5fe:	2201      	movs	r2, #1
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fd48 	bl	800d098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b608:	e01d      	b.n	800b646 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 fcd2 	bl	800cfb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b612:	2303      	movs	r3, #3
 800b614:	75fb      	strb	r3, [r7, #23]
          break;
 800b616:	e016      	b.n	800b646 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b03      	cmp	r3, #3
 800b622:	d00f      	beq.n	800b644 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 fcc5 	bl	800cfb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b62c:	2303      	movs	r3, #3
 800b62e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b630:	e008      	b.n	800b644 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 fcbe 	bl	800cfb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b63a:	2303      	movs	r3, #3
 800b63c:	75fb      	strb	r3, [r7, #23]
          break;
 800b63e:	e002      	b.n	800b646 <USBD_CDC_Setup+0x19e>
          break;
 800b640:	bf00      	nop
 800b642:	e008      	b.n	800b656 <USBD_CDC_Setup+0x1ae>
          break;
 800b644:	bf00      	nop
      }
      break;
 800b646:	e006      	b.n	800b656 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 fcb3 	bl	800cfb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b650:	2303      	movs	r3, #3
 800b652:	75fb      	strb	r3, [r7, #23]
      break;
 800b654:	bf00      	nop
  }

  return (uint8_t)ret;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b672:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	32b0      	adds	r2, #176	; 0xb0
 800b67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d101      	bne.n	800b68a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b686:	2303      	movs	r3, #3
 800b688:	e065      	b.n	800b756 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	32b0      	adds	r2, #176	; 0xb0
 800b694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b698:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	f003 020f 	and.w	r2, r3, #15
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3318      	adds	r3, #24
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d02f      	beq.n	800b714 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	f003 010f 	and.w	r1, r3, #15
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	00db      	lsls	r3, r3, #3
 800b6d6:	440b      	add	r3, r1
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4403      	add	r3, r0
 800b6dc:	3344      	adds	r3, #68	; 0x44
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6e4:	fb01 f303 	mul.w	r3, r1, r3
 800b6e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d112      	bne.n	800b714 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	f003 020f 	and.w	r2, r3, #15
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	440b      	add	r3, r1
 800b700:	3318      	adds	r3, #24
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b706:	78f9      	ldrb	r1, [r7, #3]
 800b708:	2300      	movs	r3, #0
 800b70a:	2200      	movs	r2, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f002 faaf 	bl	800dc70 <USBD_LL_Transmit>
 800b712:	e01f      	b.n	800b754 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2200      	movs	r2, #0
 800b718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	33b0      	adds	r3, #176	; 0xb0
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d010      	beq.n	800b754 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	33b0      	adds	r3, #176	; 0xb0
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b750:	78fa      	ldrb	r2, [r7, #3]
 800b752:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	32b0      	adds	r2, #176	; 0xb0
 800b774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b778:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	32b0      	adds	r2, #176	; 0xb0
 800b784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e01a      	b.n	800b7c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b790:	78fb      	ldrb	r3, [r7, #3]
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f002 fadb 	bl	800dd50 <USBD_LL_GetRxDataSize>
 800b79a:	4602      	mov	r2, r0
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	33b0      	adds	r3, #176	; 0xb0
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	32b0      	adds	r2, #176	; 0xb0
 800b7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e025      	b.n	800b83c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	33b0      	adds	r3, #176	; 0xb0
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d01a      	beq.n	800b83a <USBD_CDC_EP0_RxReady+0x6c>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b80a:	2bff      	cmp	r3, #255	; 0xff
 800b80c:	d015      	beq.n	800b83a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	33b0      	adds	r3, #176	; 0xb0
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b826:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b82e:	b292      	uxth	r2, r2
 800b830:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	22ff      	movs	r2, #255	; 0xff
 800b836:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b84c:	2182      	movs	r1, #130	; 0x82
 800b84e:	4818      	ldr	r0, [pc, #96]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b850:	f000 fd4f 	bl	800c2f2 <USBD_GetEpDesc>
 800b854:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b856:	2101      	movs	r1, #1
 800b858:	4815      	ldr	r0, [pc, #84]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b85a:	f000 fd4a 	bl	800c2f2 <USBD_GetEpDesc>
 800b85e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b860:	2181      	movs	r1, #129	; 0x81
 800b862:	4813      	ldr	r0, [pc, #76]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b864:	f000 fd45 	bl	800c2f2 <USBD_GetEpDesc>
 800b868:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2210      	movs	r2, #16
 800b874:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d006      	beq.n	800b88a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	2200      	movs	r2, #0
 800b880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b884:	711a      	strb	r2, [r3, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b898:	711a      	strb	r2, [r3, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2243      	movs	r2, #67	; 0x43
 800b8a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8a4:	4b02      	ldr	r3, [pc, #8]	; (800b8b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	200000e0 	.word	0x200000e0

0800b8b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8bc:	2182      	movs	r1, #130	; 0x82
 800b8be:	4818      	ldr	r0, [pc, #96]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8c0:	f000 fd17 	bl	800c2f2 <USBD_GetEpDesc>
 800b8c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	4815      	ldr	r0, [pc, #84]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8ca:	f000 fd12 	bl	800c2f2 <USBD_GetEpDesc>
 800b8ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8d0:	2181      	movs	r1, #129	; 0x81
 800b8d2:	4813      	ldr	r0, [pc, #76]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8d4:	f000 fd0d 	bl	800c2f2 <USBD_GetEpDesc>
 800b8d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2210      	movs	r2, #16
 800b8e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d006      	beq.n	800b8fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	711a      	strb	r2, [r3, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f042 0202 	orr.w	r2, r2, #2
 800b8f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d006      	beq.n	800b90e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	711a      	strb	r2, [r3, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f042 0202 	orr.w	r2, r2, #2
 800b90c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2243      	movs	r2, #67	; 0x43
 800b912:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b914:	4b02      	ldr	r3, [pc, #8]	; (800b920 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b916:	4618      	mov	r0, r3
 800b918:	3718      	adds	r7, #24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	200000e0 	.word	0x200000e0

0800b924 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b92c:	2182      	movs	r1, #130	; 0x82
 800b92e:	4818      	ldr	r0, [pc, #96]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b930:	f000 fcdf 	bl	800c2f2 <USBD_GetEpDesc>
 800b934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b936:	2101      	movs	r1, #1
 800b938:	4815      	ldr	r0, [pc, #84]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b93a:	f000 fcda 	bl	800c2f2 <USBD_GetEpDesc>
 800b93e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b940:	2181      	movs	r1, #129	; 0x81
 800b942:	4813      	ldr	r0, [pc, #76]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b944:	f000 fcd5 	bl	800c2f2 <USBD_GetEpDesc>
 800b948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2210      	movs	r2, #16
 800b954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d006      	beq.n	800b96a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2200      	movs	r2, #0
 800b960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b964:	711a      	strb	r2, [r3, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d006      	beq.n	800b97e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b978:	711a      	strb	r2, [r3, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2243      	movs	r2, #67	; 0x43
 800b982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b984:	4b02      	ldr	r3, [pc, #8]	; (800b990 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	200000e0 	.word	0x200000e0

0800b994 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	220a      	movs	r2, #10
 800b9a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b9a2:	4b03      	ldr	r3, [pc, #12]	; (800b9b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	2000009c 	.word	0x2000009c

0800b9b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e009      	b.n	800b9dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	33b0      	adds	r3, #176	; 0xb0
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	32b0      	adds	r2, #176	; 0xb0
 800b9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba02:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e008      	b.n	800ba20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	32b0      	adds	r2, #176	; 0xb0
 800ba40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e004      	b.n	800ba5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
	...

0800ba68 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	32b0      	adds	r2, #176	; 0xb0
 800ba7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ba80:	2301      	movs	r3, #1
 800ba82:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e025      	b.n	800bada <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d11f      	bne.n	800bad8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800baa0:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <USBD_CDC_TransmitPacket+0x7c>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 020f 	and.w	r2, r3, #15
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4403      	add	r3, r0
 800baba:	3318      	adds	r3, #24
 800babc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <USBD_CDC_TransmitPacket+0x7c>)
 800bac0:	7819      	ldrb	r1, [r3, #0]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f002 f8ce 	bl	800dc70 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000123 	.word	0x20000123

0800bae8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	32b0      	adds	r2, #176	; 0xb0
 800bafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	32b0      	adds	r2, #176	; 0xb0
 800bb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e018      	b.n	800bb48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	7c1b      	ldrb	r3, [r3, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <USBD_CDC_ReceivePacket+0x68>)
 800bb20:	7819      	ldrb	r1, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f002 f8d7 	bl	800dce0 <USBD_LL_PrepareReceive>
 800bb32:	e008      	b.n	800bb46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb34:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <USBD_CDC_ReceivePacket+0x68>)
 800bb36:	7819      	ldrb	r1, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb3e:	2340      	movs	r3, #64	; 0x40
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f002 f8cd 	bl	800dce0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20000124 	.word	0x20000124

0800bb54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e01f      	b.n	800bbac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	79fa      	ldrb	r2, [r7, #7]
 800bb9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f001 fea5 	bl	800d8f0 <USBD_LL_Init>
 800bba6:	4603      	mov	r3, r0
 800bba8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e025      	b.n	800bc18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	32ae      	adds	r2, #174	; 0xae
 800bbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00f      	beq.n	800bc08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	32ae      	adds	r2, #174	; 0xae
 800bbf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	f107 020e 	add.w	r2, r7, #14
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	4602      	mov	r2, r0
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f001 fead 	bl	800d988 <USBD_LL_Start>
 800bc2e:	4603      	mov	r3, r0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d009      	beq.n	800bc7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	78fa      	ldrb	r2, [r7, #3]
 800bc72:	4611      	mov	r1, r2
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	4798      	blx	r3
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	78fa      	ldrb	r2, [r7, #3]
 800bca0:	4611      	mov	r1, r2
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 f938 	bl	800cf42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bce0:	461a      	mov	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bcee:	f003 031f 	and.w	r3, r3, #31
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d01a      	beq.n	800bd2c <USBD_LL_SetupStage+0x72>
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d822      	bhi.n	800bd40 <USBD_LL_SetupStage+0x86>
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <USBD_LL_SetupStage+0x4a>
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d00a      	beq.n	800bd18 <USBD_LL_SetupStage+0x5e>
 800bd02:	e01d      	b.n	800bd40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fb65 	bl	800c3dc <USBD_StdDevReq>
 800bd12:	4603      	mov	r3, r0
 800bd14:	73fb      	strb	r3, [r7, #15]
      break;
 800bd16:	e020      	b.n	800bd5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fbcd 	bl	800c4c0 <USBD_StdItfReq>
 800bd26:	4603      	mov	r3, r0
 800bd28:	73fb      	strb	r3, [r7, #15]
      break;
 800bd2a:	e016      	b.n	800bd5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fc2f 	bl	800c598 <USBD_StdEPReq>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd3e:	e00c      	b.n	800bd5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f001 fec0 	bl	800dad4 <USBD_LL_StallEP>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]
      break;
 800bd58:	bf00      	nop
  }

  return ret;
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bd76:	7afb      	ldrb	r3, [r7, #11]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d16e      	bne.n	800be5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bd82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	f040 8098 	bne.w	800bec0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d913      	bls.n	800bdc4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	bf28      	it	cs
 800bdb6:	4613      	movcs	r3, r2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f001 f9b4 	bl	800d12a <USBD_CtlContinueRx>
 800bdc2:	e07d      	b.n	800bec0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bdca:	f003 031f 	and.w	r3, r3, #31
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d014      	beq.n	800bdfc <USBD_LL_DataOutStage+0x98>
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d81d      	bhi.n	800be12 <USBD_LL_DataOutStage+0xae>
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <USBD_LL_DataOutStage+0x7c>
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d003      	beq.n	800bde6 <USBD_LL_DataOutStage+0x82>
 800bdde:	e018      	b.n	800be12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	75bb      	strb	r3, [r7, #22]
            break;
 800bde4:	e018      	b.n	800be18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	4619      	mov	r1, r3
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f000 fa64 	bl	800c2be <USBD_CoreFindIF>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	75bb      	strb	r3, [r7, #22]
            break;
 800bdfa:	e00d      	b.n	800be18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800be02:	b2db      	uxtb	r3, r3
 800be04:	4619      	mov	r1, r3
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 fa66 	bl	800c2d8 <USBD_CoreFindEP>
 800be0c:	4603      	mov	r3, r0
 800be0e:	75bb      	strb	r3, [r7, #22]
            break;
 800be10:	e002      	b.n	800be18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	75bb      	strb	r3, [r7, #22]
            break;
 800be16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800be18:	7dbb      	ldrb	r3, [r7, #22]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d119      	bne.n	800be52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b03      	cmp	r3, #3
 800be28:	d113      	bne.n	800be52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800be2a:	7dba      	ldrb	r2, [r7, #22]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	32ae      	adds	r2, #174	; 0xae
 800be30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00b      	beq.n	800be52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800be3a:	7dba      	ldrb	r2, [r7, #22]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800be42:	7dba      	ldrb	r2, [r7, #22]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	32ae      	adds	r2, #174	; 0xae
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f001 f97a 	bl	800d14c <USBD_CtlSendStatus>
 800be58:	e032      	b.n	800bec0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800be5a:	7afb      	ldrb	r3, [r7, #11]
 800be5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be60:	b2db      	uxtb	r3, r3
 800be62:	4619      	mov	r1, r3
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 fa37 	bl	800c2d8 <USBD_CoreFindEP>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be6e:	7dbb      	ldrb	r3, [r7, #22]
 800be70:	2bff      	cmp	r3, #255	; 0xff
 800be72:	d025      	beq.n	800bec0 <USBD_LL_DataOutStage+0x15c>
 800be74:	7dbb      	ldrb	r3, [r7, #22]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d122      	bne.n	800bec0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b03      	cmp	r3, #3
 800be84:	d117      	bne.n	800beb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800be86:	7dba      	ldrb	r2, [r7, #22]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	32ae      	adds	r2, #174	; 0xae
 800be8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00f      	beq.n	800beb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800be96:	7dba      	ldrb	r2, [r7, #22]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800be9e:	7dba      	ldrb	r2, [r7, #22]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	32ae      	adds	r2, #174	; 0xae
 800bea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	7afa      	ldrb	r2, [r7, #11]
 800beac:	4611      	mov	r1, r2
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	4798      	blx	r3
 800beb2:	4603      	mov	r3, r0
 800beb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	e000      	b.n	800bec2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b086      	sub	sp, #24
 800bece:	af00      	add	r7, sp, #0
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	460b      	mov	r3, r1
 800bed4:	607a      	str	r2, [r7, #4]
 800bed6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bed8:	7afb      	ldrb	r3, [r7, #11]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d16f      	bne.n	800bfbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3314      	adds	r3, #20
 800bee2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800beea:	2b02      	cmp	r3, #2
 800beec:	d15a      	bne.n	800bfa4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	689a      	ldr	r2, [r3, #8]
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d914      	bls.n	800bf24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	689a      	ldr	r2, [r3, #8]
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	1ad2      	subs	r2, r2, r3
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	6879      	ldr	r1, [r7, #4]
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f001 f8dc 	bl	800d0ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf16:	2300      	movs	r3, #0
 800bf18:	2200      	movs	r2, #0
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f001 fedf 	bl	800dce0 <USBD_LL_PrepareReceive>
 800bf22:	e03f      	b.n	800bfa4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	68da      	ldr	r2, [r3, #12]
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d11c      	bne.n	800bf6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d316      	bcc.n	800bf6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d20f      	bcs.n	800bf6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f001 f8bd 	bl	800d0ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2100      	movs	r1, #0
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f001 febc 	bl	800dce0 <USBD_LL_PrepareReceive>
 800bf68:	e01c      	b.n	800bfa4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d10f      	bne.n	800bf96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d009      	beq.n	800bf96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf96:	2180      	movs	r1, #128	; 0x80
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f001 fd9b 	bl	800dad4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f001 f8e7 	bl	800d172 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d03a      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7ff fe42 	bl	800bc38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bfbc:	e032      	b.n	800c024 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bfbe:	7afb      	ldrb	r3, [r7, #11]
 800bfc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f985 	bl	800c2d8 <USBD_CoreFindEP>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	2bff      	cmp	r3, #255	; 0xff
 800bfd6:	d025      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d122      	bne.n	800c024 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d11c      	bne.n	800c024 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bfea:	7dfa      	ldrb	r2, [r7, #23]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	32ae      	adds	r2, #174	; 0xae
 800bff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d014      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bffa:	7dfa      	ldrb	r2, [r7, #23]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c002:	7dfa      	ldrb	r2, [r7, #23]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	32ae      	adds	r2, #174	; 0xae
 800c008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	7afa      	ldrb	r2, [r7, #11]
 800c010:	4611      	mov	r1, r2
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	4798      	blx	r3
 800c016:	4603      	mov	r3, r0
 800c018:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c01a:	7dbb      	ldrb	r3, [r7, #22]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c020:	7dbb      	ldrb	r3, [r7, #22]
 800c022:	e000      	b.n	800c026 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c066:	2b00      	cmp	r3, #0
 800c068:	d014      	beq.n	800c094 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00e      	beq.n	800c094 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	6852      	ldr	r2, [r2, #4]
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	4611      	mov	r1, r2
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	4798      	blx	r3
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c090:	2303      	movs	r3, #3
 800c092:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c094:	2340      	movs	r3, #64	; 0x40
 800c096:	2200      	movs	r2, #0
 800c098:	2100      	movs	r1, #0
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 fca6 	bl	800d9ec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2240      	movs	r2, #64	; 0x40
 800c0ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0b0:	2340      	movs	r3, #64	; 0x40
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2180      	movs	r1, #128	; 0x80
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f001 fc98 	bl	800d9ec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2240      	movs	r2, #64	; 0x40
 800c0c6:	621a      	str	r2, [r3, #32]

  return ret;
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b083      	sub	sp, #12
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b04      	cmp	r3, #4
 800c104:	d006      	beq.n	800c114 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2204      	movs	r2, #4
 800c118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	d106      	bne.n	800c14c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c144:	b2da      	uxtb	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d110      	bne.n	800c190 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00b      	beq.n	800c190 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	32ae      	adds	r2, #174	; 0xae
 800c1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e01c      	b.n	800c1f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d115      	bne.n	800c1f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	32ae      	adds	r2, #174	; 0xae
 800c1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00b      	beq.n	800c1f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	32ae      	adds	r2, #174	; 0xae
 800c1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ea:	6a1b      	ldr	r3, [r3, #32]
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	460b      	mov	r3, r1
 800c208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	32ae      	adds	r2, #174	; 0xae
 800c214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d101      	bne.n	800c220 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c21c:	2303      	movs	r3, #3
 800c21e:	e01c      	b.n	800c25a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b03      	cmp	r3, #3
 800c22a:	d115      	bne.n	800c258 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	32ae      	adds	r2, #174	; 0xae
 800c236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00b      	beq.n	800c258 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	32ae      	adds	r2, #174	; 0xae
 800c24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c250:	78fa      	ldrb	r2, [r7, #3]
 800c252:	4611      	mov	r1, r2
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c262:	b480      	push	{r7}
 800c264:	b083      	sub	sp, #12
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00e      	beq.n	800c2b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	6852      	ldr	r2, [r2, #4]
 800c2a2:	b2d2      	uxtb	r2, r2
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	4798      	blx	r3
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c2be:	b480      	push	{r7}
 800c2c0:	b083      	sub	sp, #12
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c2ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c2e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b086      	sub	sp, #24
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c306:	2300      	movs	r3, #0
 800c308:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	885b      	ldrh	r3, [r3, #2]
 800c30e:	b29a      	uxth	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	b29b      	uxth	r3, r3
 800c316:	429a      	cmp	r2, r3
 800c318:	d920      	bls.n	800c35c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c322:	e013      	b.n	800c34c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c324:	f107 030a 	add.w	r3, r7, #10
 800c328:	4619      	mov	r1, r3
 800c32a:	6978      	ldr	r0, [r7, #20]
 800c32c:	f000 f81b 	bl	800c366 <USBD_GetNextDesc>
 800c330:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	785b      	ldrb	r3, [r3, #1]
 800c336:	2b05      	cmp	r3, #5
 800c338:	d108      	bne.n	800c34c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	789b      	ldrb	r3, [r3, #2]
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	429a      	cmp	r2, r3
 800c346:	d008      	beq.n	800c35a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c348:	2300      	movs	r3, #0
 800c34a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	885b      	ldrh	r3, [r3, #2]
 800c350:	b29a      	uxth	r2, r3
 800c352:	897b      	ldrh	r3, [r7, #10]
 800c354:	429a      	cmp	r2, r3
 800c356:	d8e5      	bhi.n	800c324 <USBD_GetEpDesc+0x32>
 800c358:	e000      	b.n	800c35c <USBD_GetEpDesc+0x6a>
          break;
 800c35a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c35c:	693b      	ldr	r3, [r7, #16]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c366:	b480      	push	{r7}
 800c368:	b085      	sub	sp, #20
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	881a      	ldrh	r2, [r3, #0]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	4413      	add	r3, r2
 800c380:	b29a      	uxth	r2, r3
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4413      	add	r3, r2
 800c390:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c392:	68fb      	ldr	r3, [r7, #12]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3be:	8a3b      	ldrh	r3, [r7, #16]
 800c3c0:	021b      	lsls	r3, r3, #8
 800c3c2:	b21a      	sxth	r2, r3
 800c3c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	b21b      	sxth	r3, r3
 800c3cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3ce:	89fb      	ldrh	r3, [r7, #14]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	371c      	adds	r7, #28
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3f2:	2b40      	cmp	r3, #64	; 0x40
 800c3f4:	d005      	beq.n	800c402 <USBD_StdDevReq+0x26>
 800c3f6:	2b40      	cmp	r3, #64	; 0x40
 800c3f8:	d857      	bhi.n	800c4aa <USBD_StdDevReq+0xce>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00f      	beq.n	800c41e <USBD_StdDevReq+0x42>
 800c3fe:	2b20      	cmp	r3, #32
 800c400:	d153      	bne.n	800c4aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	32ae      	adds	r2, #174	; 0xae
 800c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	4798      	blx	r3
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]
      break;
 800c41c:	e04a      	b.n	800c4b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	785b      	ldrb	r3, [r3, #1]
 800c422:	2b09      	cmp	r3, #9
 800c424:	d83b      	bhi.n	800c49e <USBD_StdDevReq+0xc2>
 800c426:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <USBD_StdDevReq+0x50>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c481 	.word	0x0800c481
 800c430:	0800c495 	.word	0x0800c495
 800c434:	0800c49f 	.word	0x0800c49f
 800c438:	0800c48b 	.word	0x0800c48b
 800c43c:	0800c49f 	.word	0x0800c49f
 800c440:	0800c45f 	.word	0x0800c45f
 800c444:	0800c455 	.word	0x0800c455
 800c448:	0800c49f 	.word	0x0800c49f
 800c44c:	0800c477 	.word	0x0800c477
 800c450:	0800c469 	.word	0x0800c469
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa3c 	bl	800c8d4 <USBD_GetDescriptor>
          break;
 800c45c:	e024      	b.n	800c4a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fbcb 	bl	800cbfc <USBD_SetAddress>
          break;
 800c466:	e01f      	b.n	800c4a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fc0a 	bl	800cc84 <USBD_SetConfig>
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]
          break;
 800c474:	e018      	b.n	800c4a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fcad 	bl	800cdd8 <USBD_GetConfig>
          break;
 800c47e:	e013      	b.n	800c4a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fcde 	bl	800ce44 <USBD_GetStatus>
          break;
 800c488:	e00e      	b.n	800c4a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c48a:	6839      	ldr	r1, [r7, #0]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 fd0d 	bl	800ceac <USBD_SetFeature>
          break;
 800c492:	e009      	b.n	800c4a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fd31 	bl	800cefe <USBD_ClrFeature>
          break;
 800c49c:	e004      	b.n	800c4a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fd88 	bl	800cfb6 <USBD_CtlError>
          break;
 800c4a6:	bf00      	nop
      }
      break;
 800c4a8:	e004      	b.n	800c4b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fd82 	bl	800cfb6 <USBD_CtlError>
      break;
 800c4b2:	bf00      	nop
  }

  return ret;
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop

0800c4c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4d6:	2b40      	cmp	r3, #64	; 0x40
 800c4d8:	d005      	beq.n	800c4e6 <USBD_StdItfReq+0x26>
 800c4da:	2b40      	cmp	r3, #64	; 0x40
 800c4dc:	d852      	bhi.n	800c584 <USBD_StdItfReq+0xc4>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <USBD_StdItfReq+0x26>
 800c4e2:	2b20      	cmp	r3, #32
 800c4e4:	d14e      	bne.n	800c584 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d840      	bhi.n	800c576 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	889b      	ldrh	r3, [r3, #4]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d836      	bhi.n	800c56c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	889b      	ldrh	r3, [r3, #4]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff fed9 	bl	800c2be <USBD_CoreFindIF>
 800c50c:	4603      	mov	r3, r0
 800c50e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	2bff      	cmp	r3, #255	; 0xff
 800c514:	d01d      	beq.n	800c552 <USBD_StdItfReq+0x92>
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d11a      	bne.n	800c552 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c51c:	7bba      	ldrb	r2, [r7, #14]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	32ae      	adds	r2, #174	; 0xae
 800c522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00f      	beq.n	800c54c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c52c:	7bba      	ldrb	r2, [r7, #14]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c534:	7bba      	ldrb	r2, [r7, #14]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	32ae      	adds	r2, #174	; 0xae
 800c53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	4798      	blx	r3
 800c546:	4603      	mov	r3, r0
 800c548:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c54a:	e004      	b.n	800c556 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c54c:	2303      	movs	r3, #3
 800c54e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c550:	e001      	b.n	800c556 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c552:	2303      	movs	r3, #3
 800c554:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	88db      	ldrh	r3, [r3, #6]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d110      	bne.n	800c580 <USBD_StdItfReq+0xc0>
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10d      	bne.n	800c580 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fdf1 	bl	800d14c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c56a:	e009      	b.n	800c580 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fd21 	bl	800cfb6 <USBD_CtlError>
          break;
 800c574:	e004      	b.n	800c580 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fd1c 	bl	800cfb6 <USBD_CtlError>
          break;
 800c57e:	e000      	b.n	800c582 <USBD_StdItfReq+0xc2>
          break;
 800c580:	bf00      	nop
      }
      break;
 800c582:	e004      	b.n	800c58e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fd15 	bl	800cfb6 <USBD_CtlError>
      break;
 800c58c:	bf00      	nop
  }

  return ret;
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	889b      	ldrh	r3, [r3, #4]
 800c5aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5b4:	2b40      	cmp	r3, #64	; 0x40
 800c5b6:	d007      	beq.n	800c5c8 <USBD_StdEPReq+0x30>
 800c5b8:	2b40      	cmp	r3, #64	; 0x40
 800c5ba:	f200 817f 	bhi.w	800c8bc <USBD_StdEPReq+0x324>
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d02a      	beq.n	800c618 <USBD_StdEPReq+0x80>
 800c5c2:	2b20      	cmp	r3, #32
 800c5c4:	f040 817a 	bne.w	800c8bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff fe83 	bl	800c2d8 <USBD_CoreFindEP>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5d6:	7b7b      	ldrb	r3, [r7, #13]
 800c5d8:	2bff      	cmp	r3, #255	; 0xff
 800c5da:	f000 8174 	beq.w	800c8c6 <USBD_StdEPReq+0x32e>
 800c5de:	7b7b      	ldrb	r3, [r7, #13]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f040 8170 	bne.w	800c8c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c5e6:	7b7a      	ldrb	r2, [r7, #13]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c5ee:	7b7a      	ldrb	r2, [r7, #13]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	32ae      	adds	r2, #174	; 0xae
 800c5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 8163 	beq.w	800c8c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c600:	7b7a      	ldrb	r2, [r7, #13]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	32ae      	adds	r2, #174	; 0xae
 800c606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	4798      	blx	r3
 800c612:	4603      	mov	r3, r0
 800c614:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c616:	e156      	b.n	800c8c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d008      	beq.n	800c632 <USBD_StdEPReq+0x9a>
 800c620:	2b03      	cmp	r3, #3
 800c622:	f300 8145 	bgt.w	800c8b0 <USBD_StdEPReq+0x318>
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 809b 	beq.w	800c762 <USBD_StdEPReq+0x1ca>
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d03c      	beq.n	800c6aa <USBD_StdEPReq+0x112>
 800c630:	e13e      	b.n	800c8b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d002      	beq.n	800c644 <USBD_StdEPReq+0xac>
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d016      	beq.n	800c670 <USBD_StdEPReq+0xd8>
 800c642:	e02c      	b.n	800c69e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c644:	7bbb      	ldrb	r3, [r7, #14]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00d      	beq.n	800c666 <USBD_StdEPReq+0xce>
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	2b80      	cmp	r3, #128	; 0x80
 800c64e:	d00a      	beq.n	800c666 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	4619      	mov	r1, r3
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f001 fa3d 	bl	800dad4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c65a:	2180      	movs	r1, #128	; 0x80
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f001 fa39 	bl	800dad4 <USBD_LL_StallEP>
 800c662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c664:	e020      	b.n	800c6a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fca4 	bl	800cfb6 <USBD_CtlError>
              break;
 800c66e:	e01b      	b.n	800c6a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	885b      	ldrh	r3, [r3, #2]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10e      	bne.n	800c696 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c678:	7bbb      	ldrb	r3, [r7, #14]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00b      	beq.n	800c696 <USBD_StdEPReq+0xfe>
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	2b80      	cmp	r3, #128	; 0x80
 800c682:	d008      	beq.n	800c696 <USBD_StdEPReq+0xfe>
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	88db      	ldrh	r3, [r3, #6]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d104      	bne.n	800c696 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c68c:	7bbb      	ldrb	r3, [r7, #14]
 800c68e:	4619      	mov	r1, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f001 fa1f 	bl	800dad4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fd58 	bl	800d14c <USBD_CtlSendStatus>

              break;
 800c69c:	e004      	b.n	800c6a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fc88 	bl	800cfb6 <USBD_CtlError>
              break;
 800c6a6:	bf00      	nop
          }
          break;
 800c6a8:	e107      	b.n	800c8ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d002      	beq.n	800c6bc <USBD_StdEPReq+0x124>
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d016      	beq.n	800c6e8 <USBD_StdEPReq+0x150>
 800c6ba:	e04b      	b.n	800c754 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00d      	beq.n	800c6de <USBD_StdEPReq+0x146>
 800c6c2:	7bbb      	ldrb	r3, [r7, #14]
 800c6c4:	2b80      	cmp	r3, #128	; 0x80
 800c6c6:	d00a      	beq.n	800c6de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f001 fa01 	bl	800dad4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6d2:	2180      	movs	r1, #128	; 0x80
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 f9fd 	bl	800dad4 <USBD_LL_StallEP>
 800c6da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6dc:	e040      	b.n	800c760 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 fc68 	bl	800cfb6 <USBD_CtlError>
              break;
 800c6e6:	e03b      	b.n	800c760 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	885b      	ldrh	r3, [r3, #2]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d136      	bne.n	800c75e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c6f0:	7bbb      	ldrb	r3, [r7, #14]
 800c6f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d004      	beq.n	800c704 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6fa:	7bbb      	ldrb	r3, [r7, #14]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f001 fa1e 	bl	800db40 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fd21 	bl	800d14c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c70a:	7bbb      	ldrb	r3, [r7, #14]
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff fde2 	bl	800c2d8 <USBD_CoreFindEP>
 800c714:	4603      	mov	r3, r0
 800c716:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c718:	7b7b      	ldrb	r3, [r7, #13]
 800c71a:	2bff      	cmp	r3, #255	; 0xff
 800c71c:	d01f      	beq.n	800c75e <USBD_StdEPReq+0x1c6>
 800c71e:	7b7b      	ldrb	r3, [r7, #13]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d11c      	bne.n	800c75e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c724:	7b7a      	ldrb	r2, [r7, #13]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c72c:	7b7a      	ldrb	r2, [r7, #13]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	32ae      	adds	r2, #174	; 0xae
 800c732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d010      	beq.n	800c75e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c73c:	7b7a      	ldrb	r2, [r7, #13]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	32ae      	adds	r2, #174	; 0xae
 800c742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	4798      	blx	r3
 800c74e:	4603      	mov	r3, r0
 800c750:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c752:	e004      	b.n	800c75e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fc2d 	bl	800cfb6 <USBD_CtlError>
              break;
 800c75c:	e000      	b.n	800c760 <USBD_StdEPReq+0x1c8>
              break;
 800c75e:	bf00      	nop
          }
          break;
 800c760:	e0ab      	b.n	800c8ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d002      	beq.n	800c774 <USBD_StdEPReq+0x1dc>
 800c76e:	2b03      	cmp	r3, #3
 800c770:	d032      	beq.n	800c7d8 <USBD_StdEPReq+0x240>
 800c772:	e097      	b.n	800c8a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c774:	7bbb      	ldrb	r3, [r7, #14]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d007      	beq.n	800c78a <USBD_StdEPReq+0x1f2>
 800c77a:	7bbb      	ldrb	r3, [r7, #14]
 800c77c:	2b80      	cmp	r3, #128	; 0x80
 800c77e:	d004      	beq.n	800c78a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fc17 	bl	800cfb6 <USBD_CtlError>
                break;
 800c788:	e091      	b.n	800c8ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c78a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	da0b      	bge.n	800c7aa <USBD_StdEPReq+0x212>
 800c792:	7bbb      	ldrb	r3, [r7, #14]
 800c794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c798:	4613      	mov	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4413      	add	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	3310      	adds	r3, #16
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	e00b      	b.n	800c7c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4413      	add	r3, r2
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	4413      	add	r3, r2
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fc61 	bl	800d098 <USBD_CtlSendData>
              break;
 800c7d6:	e06a      	b.n	800c8ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c7d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	da11      	bge.n	800c804 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
 800c7e2:	f003 020f 	and.w	r2, r3, #15
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	440b      	add	r3, r1
 800c7f2:	3324      	adds	r3, #36	; 0x24
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d117      	bne.n	800c82a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fbda 	bl	800cfb6 <USBD_CtlError>
                  break;
 800c802:	e054      	b.n	800c8ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c804:	7bbb      	ldrb	r3, [r7, #14]
 800c806:	f003 020f 	and.w	r2, r3, #15
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	4613      	mov	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	4413      	add	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	440b      	add	r3, r1
 800c816:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d104      	bne.n	800c82a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fbc7 	bl	800cfb6 <USBD_CtlError>
                  break;
 800c828:	e041      	b.n	800c8ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c82a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	da0b      	bge.n	800c84a <USBD_StdEPReq+0x2b2>
 800c832:	7bbb      	ldrb	r3, [r7, #14]
 800c834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c838:	4613      	mov	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4413      	add	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	3310      	adds	r3, #16
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	4413      	add	r3, r2
 800c846:	3304      	adds	r3, #4
 800c848:	e00b      	b.n	800c862 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c84a:	7bbb      	ldrb	r3, [r7, #14]
 800c84c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c850:	4613      	mov	r3, r2
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	4413      	add	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	4413      	add	r3, r2
 800c860:	3304      	adds	r3, #4
 800c862:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <USBD_StdEPReq+0x2d8>
 800c86a:	7bbb      	ldrb	r3, [r7, #14]
 800c86c:	2b80      	cmp	r3, #128	; 0x80
 800c86e:	d103      	bne.n	800c878 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	e00e      	b.n	800c896 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c878:	7bbb      	ldrb	r3, [r7, #14]
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f001 f995 	bl	800dbac <USBD_LL_IsStallEP>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	2201      	movs	r2, #1
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	e002      	b.n	800c896 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2202      	movs	r2, #2
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fbfb 	bl	800d098 <USBD_CtlSendData>
              break;
 800c8a2:	e004      	b.n	800c8ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fb85 	bl	800cfb6 <USBD_CtlError>
              break;
 800c8ac:	bf00      	nop
          }
          break;
 800c8ae:	e004      	b.n	800c8ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fb7f 	bl	800cfb6 <USBD_CtlError>
          break;
 800c8b8:	bf00      	nop
      }
      break;
 800c8ba:	e005      	b.n	800c8c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fb79 	bl	800cfb6 <USBD_CtlError>
      break;
 800c8c4:	e000      	b.n	800c8c8 <USBD_StdEPReq+0x330>
      break;
 800c8c6:	bf00      	nop
  }

  return ret;
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	885b      	ldrh	r3, [r3, #2]
 800c8ee:	0a1b      	lsrs	r3, r3, #8
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	2b0e      	cmp	r3, #14
 800c8f6:	f200 8152 	bhi.w	800cb9e <USBD_GetDescriptor+0x2ca>
 800c8fa:	a201      	add	r2, pc, #4	; (adr r2, 800c900 <USBD_GetDescriptor+0x2c>)
 800c8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c900:	0800c971 	.word	0x0800c971
 800c904:	0800c989 	.word	0x0800c989
 800c908:	0800c9c9 	.word	0x0800c9c9
 800c90c:	0800cb9f 	.word	0x0800cb9f
 800c910:	0800cb9f 	.word	0x0800cb9f
 800c914:	0800cb3f 	.word	0x0800cb3f
 800c918:	0800cb6b 	.word	0x0800cb6b
 800c91c:	0800cb9f 	.word	0x0800cb9f
 800c920:	0800cb9f 	.word	0x0800cb9f
 800c924:	0800cb9f 	.word	0x0800cb9f
 800c928:	0800cb9f 	.word	0x0800cb9f
 800c92c:	0800cb9f 	.word	0x0800cb9f
 800c930:	0800cb9f 	.word	0x0800cb9f
 800c934:	0800cb9f 	.word	0x0800cb9f
 800c938:	0800c93d 	.word	0x0800c93d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c942:	69db      	ldr	r3, [r3, #28]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00b      	beq.n	800c960 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	7c12      	ldrb	r2, [r2, #16]
 800c954:	f107 0108 	add.w	r1, r7, #8
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
 800c95c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c95e:	e126      	b.n	800cbae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fb27 	bl	800cfb6 <USBD_CtlError>
        err++;
 800c968:	7afb      	ldrb	r3, [r7, #11]
 800c96a:	3301      	adds	r3, #1
 800c96c:	72fb      	strb	r3, [r7, #11]
      break;
 800c96e:	e11e      	b.n	800cbae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	7c12      	ldrb	r2, [r2, #16]
 800c97c:	f107 0108 	add.w	r1, r7, #8
 800c980:	4610      	mov	r0, r2
 800c982:	4798      	blx	r3
 800c984:	60f8      	str	r0, [r7, #12]
      break;
 800c986:	e112      	b.n	800cbae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7c1b      	ldrb	r3, [r3, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10d      	bne.n	800c9ac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c998:	f107 0208 	add.w	r2, r7, #8
 800c99c:	4610      	mov	r0, r2
 800c99e:	4798      	blx	r3
 800c9a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c9aa:	e100      	b.n	800cbae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b4:	f107 0208 	add.w	r2, r7, #8
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	4798      	blx	r3
 800c9bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	701a      	strb	r2, [r3, #0]
      break;
 800c9c6:	e0f2      	b.n	800cbae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	885b      	ldrh	r3, [r3, #2]
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b05      	cmp	r3, #5
 800c9d0:	f200 80ac 	bhi.w	800cb2c <USBD_GetDescriptor+0x258>
 800c9d4:	a201      	add	r2, pc, #4	; (adr r2, 800c9dc <USBD_GetDescriptor+0x108>)
 800c9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9da:	bf00      	nop
 800c9dc:	0800c9f5 	.word	0x0800c9f5
 800c9e0:	0800ca29 	.word	0x0800ca29
 800c9e4:	0800ca5d 	.word	0x0800ca5d
 800c9e8:	0800ca91 	.word	0x0800ca91
 800c9ec:	0800cac5 	.word	0x0800cac5
 800c9f0:	0800caf9 	.word	0x0800caf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00b      	beq.n	800ca18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	7c12      	ldrb	r2, [r2, #16]
 800ca0c:	f107 0108 	add.w	r1, r7, #8
 800ca10:	4610      	mov	r0, r2
 800ca12:	4798      	blx	r3
 800ca14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca16:	e091      	b.n	800cb3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca18:	6839      	ldr	r1, [r7, #0]
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 facb 	bl	800cfb6 <USBD_CtlError>
            err++;
 800ca20:	7afb      	ldrb	r3, [r7, #11]
 800ca22:	3301      	adds	r3, #1
 800ca24:	72fb      	strb	r3, [r7, #11]
          break;
 800ca26:	e089      	b.n	800cb3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00b      	beq.n	800ca4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	7c12      	ldrb	r2, [r2, #16]
 800ca40:	f107 0108 	add.w	r1, r7, #8
 800ca44:	4610      	mov	r0, r2
 800ca46:	4798      	blx	r3
 800ca48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca4a:	e077      	b.n	800cb3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 fab1 	bl	800cfb6 <USBD_CtlError>
            err++;
 800ca54:	7afb      	ldrb	r3, [r7, #11]
 800ca56:	3301      	adds	r3, #1
 800ca58:	72fb      	strb	r3, [r7, #11]
          break;
 800ca5a:	e06f      	b.n	800cb3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00b      	beq.n	800ca80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	7c12      	ldrb	r2, [r2, #16]
 800ca74:	f107 0108 	add.w	r1, r7, #8
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4798      	blx	r3
 800ca7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca7e:	e05d      	b.n	800cb3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fa97 	bl	800cfb6 <USBD_CtlError>
            err++;
 800ca88:	7afb      	ldrb	r3, [r7, #11]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca8e:	e055      	b.n	800cb3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00b      	beq.n	800cab4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caa2:	691b      	ldr	r3, [r3, #16]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	7c12      	ldrb	r2, [r2, #16]
 800caa8:	f107 0108 	add.w	r1, r7, #8
 800caac:	4610      	mov	r0, r2
 800caae:	4798      	blx	r3
 800cab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cab2:	e043      	b.n	800cb3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fa7d 	bl	800cfb6 <USBD_CtlError>
            err++;
 800cabc:	7afb      	ldrb	r3, [r7, #11]
 800cabe:	3301      	adds	r3, #1
 800cac0:	72fb      	strb	r3, [r7, #11]
          break;
 800cac2:	e03b      	b.n	800cb3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00b      	beq.n	800cae8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cad6:	695b      	ldr	r3, [r3, #20]
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	7c12      	ldrb	r2, [r2, #16]
 800cadc:	f107 0108 	add.w	r1, r7, #8
 800cae0:	4610      	mov	r0, r2
 800cae2:	4798      	blx	r3
 800cae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cae6:	e029      	b.n	800cb3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fa63 	bl	800cfb6 <USBD_CtlError>
            err++;
 800caf0:	7afb      	ldrb	r3, [r7, #11]
 800caf2:	3301      	adds	r3, #1
 800caf4:	72fb      	strb	r3, [r7, #11]
          break;
 800caf6:	e021      	b.n	800cb3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	7c12      	ldrb	r2, [r2, #16]
 800cb10:	f107 0108 	add.w	r1, r7, #8
 800cb14:	4610      	mov	r0, r2
 800cb16:	4798      	blx	r3
 800cb18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb1a:	e00f      	b.n	800cb3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fa49 	bl	800cfb6 <USBD_CtlError>
            err++;
 800cb24:	7afb      	ldrb	r3, [r7, #11]
 800cb26:	3301      	adds	r3, #1
 800cb28:	72fb      	strb	r3, [r7, #11]
          break;
 800cb2a:	e007      	b.n	800cb3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 fa41 	bl	800cfb6 <USBD_CtlError>
          err++;
 800cb34:	7afb      	ldrb	r3, [r7, #11]
 800cb36:	3301      	adds	r3, #1
 800cb38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cb3a:	bf00      	nop
      }
      break;
 800cb3c:	e037      	b.n	800cbae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	7c1b      	ldrb	r3, [r3, #16]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d109      	bne.n	800cb5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4e:	f107 0208 	add.w	r2, r7, #8
 800cb52:	4610      	mov	r0, r2
 800cb54:	4798      	blx	r3
 800cb56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb58:	e029      	b.n	800cbae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fa2a 	bl	800cfb6 <USBD_CtlError>
        err++;
 800cb62:	7afb      	ldrb	r3, [r7, #11]
 800cb64:	3301      	adds	r3, #1
 800cb66:	72fb      	strb	r3, [r7, #11]
      break;
 800cb68:	e021      	b.n	800cbae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	7c1b      	ldrb	r3, [r3, #16]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10d      	bne.n	800cb8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb7a:	f107 0208 	add.w	r2, r7, #8
 800cb7e:	4610      	mov	r0, r2
 800cb80:	4798      	blx	r3
 800cb82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	3301      	adds	r3, #1
 800cb88:	2207      	movs	r2, #7
 800cb8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb8c:	e00f      	b.n	800cbae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb8e:	6839      	ldr	r1, [r7, #0]
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 fa10 	bl	800cfb6 <USBD_CtlError>
        err++;
 800cb96:	7afb      	ldrb	r3, [r7, #11]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	72fb      	strb	r3, [r7, #11]
      break;
 800cb9c:	e007      	b.n	800cbae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fa08 	bl	800cfb6 <USBD_CtlError>
      err++;
 800cba6:	7afb      	ldrb	r3, [r7, #11]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	72fb      	strb	r3, [r7, #11]
      break;
 800cbac:	bf00      	nop
  }

  if (err != 0U)
 800cbae:	7afb      	ldrb	r3, [r7, #11]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d11e      	bne.n	800cbf2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	88db      	ldrh	r3, [r3, #6]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d016      	beq.n	800cbea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cbbc:	893b      	ldrh	r3, [r7, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00e      	beq.n	800cbe0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	88da      	ldrh	r2, [r3, #6]
 800cbc6:	893b      	ldrh	r3, [r7, #8]
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	bf28      	it	cs
 800cbcc:	4613      	movcs	r3, r2
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cbd2:	893b      	ldrh	r3, [r7, #8]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	68f9      	ldr	r1, [r7, #12]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 fa5d 	bl	800d098 <USBD_CtlSendData>
 800cbde:	e009      	b.n	800cbf4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f9e7 	bl	800cfb6 <USBD_CtlError>
 800cbe8:	e004      	b.n	800cbf4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 faae 	bl	800d14c <USBD_CtlSendStatus>
 800cbf0:	e000      	b.n	800cbf4 <USBD_GetDescriptor+0x320>
    return;
 800cbf2:	bf00      	nop
  }
}
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop

0800cbfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	889b      	ldrh	r3, [r3, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d131      	bne.n	800cc72 <USBD_SetAddress+0x76>
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	88db      	ldrh	r3, [r3, #6]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d12d      	bne.n	800cc72 <USBD_SetAddress+0x76>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	885b      	ldrh	r3, [r3, #2]
 800cc1a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc1c:	d829      	bhi.n	800cc72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	885b      	ldrh	r3, [r3, #2]
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	d104      	bne.n	800cc40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f9bc 	bl	800cfb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc3e:	e01d      	b.n	800cc7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7bfa      	ldrb	r2, [r7, #15]
 800cc44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 ffd9 	bl	800dc04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fa7a 	bl	800d14c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d004      	beq.n	800cc68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2202      	movs	r2, #2
 800cc62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc66:	e009      	b.n	800cc7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc70:	e004      	b.n	800cc7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc72:	6839      	ldr	r1, [r7, #0]
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f99e 	bl	800cfb6 <USBD_CtlError>
  }
}
 800cc7a:	bf00      	nop
 800cc7c:	bf00      	nop
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	885b      	ldrh	r3, [r3, #2]
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	4b4e      	ldr	r3, [pc, #312]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cc9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc9c:	4b4d      	ldr	r3, [pc, #308]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d905      	bls.n	800ccb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 f985 	bl	800cfb6 <USBD_CtlError>
    return USBD_FAIL;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e08c      	b.n	800cdca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d002      	beq.n	800ccc2 <USBD_SetConfig+0x3e>
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d029      	beq.n	800cd14 <USBD_SetConfig+0x90>
 800ccc0:	e075      	b.n	800cdae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ccc2:	4b44      	ldr	r3, [pc, #272]	; (800cdd4 <USBD_SetConfig+0x150>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d020      	beq.n	800cd0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ccca:	4b42      	ldr	r3, [pc, #264]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ccd4:	4b3f      	ldr	r3, [pc, #252]	; (800cdd4 <USBD_SetConfig+0x150>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7fe ffb7 	bl	800bc4e <USBD_SetClassConfig>
 800cce0:	4603      	mov	r3, r0
 800cce2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d008      	beq.n	800ccfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 f962 	bl	800cfb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2202      	movs	r2, #2
 800ccf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ccfa:	e065      	b.n	800cdc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fa25 	bl	800d14c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2203      	movs	r2, #3
 800cd06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cd0a:	e05d      	b.n	800cdc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fa1d 	bl	800d14c <USBD_CtlSendStatus>
      break;
 800cd12:	e059      	b.n	800cdc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd14:	4b2f      	ldr	r3, [pc, #188]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d112      	bne.n	800cd42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2202      	movs	r2, #2
 800cd20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cd24:	4b2b      	ldr	r3, [pc, #172]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd2e:	4b29      	ldr	r3, [pc, #164]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7fe ffa6 	bl	800bc86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fa06 	bl	800d14c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd40:	e042      	b.n	800cdc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cd42:	4b24      	ldr	r3, [pc, #144]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d02a      	beq.n	800cda6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	4619      	mov	r1, r3
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7fe ff94 	bl	800bc86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd5e:	4b1d      	ldr	r3, [pc, #116]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd68:	4b1a      	ldr	r3, [pc, #104]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7fe ff6d 	bl	800bc4e <USBD_SetClassConfig>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00f      	beq.n	800cd9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f918 	bl	800cfb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7fe ff79 	bl	800bc86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cd9c:	e014      	b.n	800cdc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f9d4 	bl	800d14c <USBD_CtlSendStatus>
      break;
 800cda4:	e010      	b.n	800cdc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f9d0 	bl	800d14c <USBD_CtlSendStatus>
      break;
 800cdac:	e00c      	b.n	800cdc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f900 	bl	800cfb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cdb6:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <USBD_SetConfig+0x150>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7fe ff62 	bl	800bc86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	73fb      	strb	r3, [r7, #15]
      break;
 800cdc6:	bf00      	nop
  }

  return ret;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20000608 	.word	0x20000608

0800cdd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	88db      	ldrh	r3, [r3, #6]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d004      	beq.n	800cdf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f8e2 	bl	800cfb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cdf2:	e023      	b.n	800ce3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	dc02      	bgt.n	800ce06 <USBD_GetConfig+0x2e>
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dc03      	bgt.n	800ce0c <USBD_GetConfig+0x34>
 800ce04:	e015      	b.n	800ce32 <USBD_GetConfig+0x5a>
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d00b      	beq.n	800ce22 <USBD_GetConfig+0x4a>
 800ce0a:	e012      	b.n	800ce32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	3308      	adds	r3, #8
 800ce16:	2201      	movs	r2, #1
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f93c 	bl	800d098 <USBD_CtlSendData>
        break;
 800ce20:	e00c      	b.n	800ce3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3304      	adds	r3, #4
 800ce26:	2201      	movs	r2, #1
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f934 	bl	800d098 <USBD_CtlSendData>
        break;
 800ce30:	e004      	b.n	800ce3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce32:	6839      	ldr	r1, [r7, #0]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 f8be 	bl	800cfb6 <USBD_CtlError>
        break;
 800ce3a:	bf00      	nop
}
 800ce3c:	bf00      	nop
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	3b01      	subs	r3, #1
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d81e      	bhi.n	800ce9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	88db      	ldrh	r3, [r3, #6]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d004      	beq.n	800ce6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 f8a5 	bl	800cfb6 <USBD_CtlError>
        break;
 800ce6c:	e01a      	b.n	800cea4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d005      	beq.n	800ce8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	f043 0202 	orr.w	r2, r3, #2
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	330c      	adds	r3, #12
 800ce8e:	2202      	movs	r2, #2
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f900 	bl	800d098 <USBD_CtlSendData>
      break;
 800ce98:	e004      	b.n	800cea4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ce9a:	6839      	ldr	r1, [r7, #0]
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f88a 	bl	800cfb6 <USBD_CtlError>
      break;
 800cea2:	bf00      	nop
  }
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	885b      	ldrh	r3, [r3, #2]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d107      	bne.n	800cece <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f940 	bl	800d14c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cecc:	e013      	b.n	800cef6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	885b      	ldrh	r3, [r3, #2]
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d10b      	bne.n	800ceee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	889b      	ldrh	r3, [r3, #4]
 800ceda:	0a1b      	lsrs	r3, r3, #8
 800cedc:	b29b      	uxth	r3, r3
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f930 	bl	800d14c <USBD_CtlSendStatus>
}
 800ceec:	e003      	b.n	800cef6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f860 	bl	800cfb6 <USBD_CtlError>
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	3b01      	subs	r3, #1
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d80b      	bhi.n	800cf2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	885b      	ldrh	r3, [r3, #2]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d10c      	bne.n	800cf38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f910 	bl	800d14c <USBD_CtlSendStatus>
      }
      break;
 800cf2c:	e004      	b.n	800cf38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 f840 	bl	800cfb6 <USBD_CtlError>
      break;
 800cf36:	e000      	b.n	800cf3a <USBD_ClrFeature+0x3c>
      break;
 800cf38:	bf00      	nop
  }
}
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	781a      	ldrb	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	781a      	ldrb	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f7ff fa17 	bl	800c3a0 <SWAPBYTE>
 800cf72:	4603      	mov	r3, r0
 800cf74:	461a      	mov	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3301      	adds	r3, #1
 800cf84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7ff fa0a 	bl	800c3a0 <SWAPBYTE>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	3301      	adds	r3, #1
 800cf98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f7ff f9fd 	bl	800c3a0 <SWAPBYTE>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	80da      	strh	r2, [r3, #6]
}
 800cfae:	bf00      	nop
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b082      	sub	sp, #8
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfc0:	2180      	movs	r1, #128	; 0x80
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fd86 	bl	800dad4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfc8:	2100      	movs	r1, #0
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fd82 	bl	800dad4 <USBD_LL_StallEP>
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d036      	beq.n	800d05c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cff2:	6938      	ldr	r0, [r7, #16]
 800cff4:	f000 f836 	bl	800d064 <USBD_GetLen>
 800cff8:	4603      	mov	r3, r0
 800cffa:	3301      	adds	r3, #1
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	b29a      	uxth	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d006:	7dfb      	ldrb	r3, [r7, #23]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	4413      	add	r3, r2
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	7812      	ldrb	r2, [r2, #0]
 800d010:	701a      	strb	r2, [r3, #0]
  idx++;
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	3301      	adds	r3, #1
 800d016:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d018:	7dfb      	ldrb	r3, [r7, #23]
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	4413      	add	r3, r2
 800d01e:	2203      	movs	r2, #3
 800d020:	701a      	strb	r2, [r3, #0]
  idx++;
 800d022:	7dfb      	ldrb	r3, [r7, #23]
 800d024:	3301      	adds	r3, #1
 800d026:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d028:	e013      	b.n	800d052 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	4413      	add	r3, r2
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	7812      	ldrb	r2, [r2, #0]
 800d034:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	3301      	adds	r3, #1
 800d03a:	613b      	str	r3, [r7, #16]
    idx++;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
 800d03e:	3301      	adds	r3, #1
 800d040:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d042:	7dfb      	ldrb	r3, [r7, #23]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	4413      	add	r3, r2
 800d048:	2200      	movs	r2, #0
 800d04a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d04c:	7dfb      	ldrb	r3, [r7, #23]
 800d04e:	3301      	adds	r3, #1
 800d050:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1e7      	bne.n	800d02a <USBD_GetString+0x52>
 800d05a:	e000      	b.n	800d05e <USBD_GetString+0x86>
    return;
 800d05c:	bf00      	nop
  }
}
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d06c:	2300      	movs	r3, #0
 800d06e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d074:	e005      	b.n	800d082 <USBD_GetLen+0x1e>
  {
    len++;
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	3301      	adds	r3, #1
 800d07a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	3301      	adds	r3, #1
 800d080:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1f5      	bne.n	800d076 <USBD_GetLen+0x12>
  }

  return len;
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3714      	adds	r7, #20
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	2100      	movs	r1, #0
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 fdd6 	bl	800dc70 <USBD_LL_Transmit>

  return USBD_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	2100      	movs	r1, #0
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 fdc5 	bl	800dc70 <USBD_LL_Transmit>

  return USBD_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2203      	movs	r2, #3
 800d100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	2100      	movs	r1, #0
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f000 fde0 	bl	800dce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	60b9      	str	r1, [r7, #8]
 800d134:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	2100      	movs	r1, #0
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f000 fdcf 	bl	800dce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2204      	movs	r2, #4
 800d158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d15c:	2300      	movs	r3, #0
 800d15e:	2200      	movs	r2, #0
 800d160:	2100      	movs	r1, #0
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fd84 	bl	800dc70 <USBD_LL_Transmit>

  return USBD_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b082      	sub	sp, #8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2205      	movs	r2, #5
 800d17e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d182:	2300      	movs	r3, #0
 800d184:	2200      	movs	r2, #0
 800d186:	2100      	movs	r1, #0
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fda9 	bl	800dce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d19c:	2200      	movs	r2, #0
 800d19e:	4912      	ldr	r1, [pc, #72]	; (800d1e8 <MX_USB_DEVICE_Init+0x50>)
 800d1a0:	4812      	ldr	r0, [pc, #72]	; (800d1ec <MX_USB_DEVICE_Init+0x54>)
 800d1a2:	f7fe fcd7 	bl	800bb54 <USBD_Init>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d1ac:	f7f5 fc10 	bl	80029d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d1b0:	490f      	ldr	r1, [pc, #60]	; (800d1f0 <MX_USB_DEVICE_Init+0x58>)
 800d1b2:	480e      	ldr	r0, [pc, #56]	; (800d1ec <MX_USB_DEVICE_Init+0x54>)
 800d1b4:	f7fe fcfe 	bl	800bbb4 <USBD_RegisterClass>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d1be:	f7f5 fc07 	bl	80029d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d1c2:	490c      	ldr	r1, [pc, #48]	; (800d1f4 <MX_USB_DEVICE_Init+0x5c>)
 800d1c4:	4809      	ldr	r0, [pc, #36]	; (800d1ec <MX_USB_DEVICE_Init+0x54>)
 800d1c6:	f7fe fbf5 	bl	800b9b4 <USBD_CDC_RegisterInterface>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d1d0:	f7f5 fbfe 	bl	80029d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d1d4:	4805      	ldr	r0, [pc, #20]	; (800d1ec <MX_USB_DEVICE_Init+0x54>)
 800d1d6:	f7fe fd23 	bl	800bc20 <USBD_Start>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d1e0:	f7f5 fbf6 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1e4:	bf00      	nop
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	2000013c 	.word	0x2000013c
 800d1ec:	2000060c 	.word	0x2000060c
 800d1f0:	200000a8 	.word	0x200000a8
 800d1f4:	20000128 	.word	0x20000128

0800d1f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	4905      	ldr	r1, [pc, #20]	; (800d214 <CDC_Init_FS+0x1c>)
 800d200:	4805      	ldr	r0, [pc, #20]	; (800d218 <CDC_Init_FS+0x20>)
 800d202:	f7fe fbf1 	bl	800b9e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d206:	4905      	ldr	r1, [pc, #20]	; (800d21c <CDC_Init_FS+0x24>)
 800d208:	4803      	ldr	r0, [pc, #12]	; (800d218 <CDC_Init_FS+0x20>)
 800d20a:	f7fe fc0f 	bl	800ba2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d20e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d210:	4618      	mov	r0, r3
 800d212:	bd80      	pop	{r7, pc}
 800d214:	200010e8 	.word	0x200010e8
 800d218:	2000060c 	.word	0x2000060c
 800d21c:	200008e8 	.word	0x200008e8

0800d220 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d220:	b480      	push	{r7}
 800d222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d224:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d226:	4618      	mov	r0, r3
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	4603      	mov	r3, r0
 800d238:	6039      	str	r1, [r7, #0]
 800d23a:	71fb      	strb	r3, [r7, #7]
 800d23c:	4613      	mov	r3, r2
 800d23e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	2b23      	cmp	r3, #35	; 0x23
 800d244:	d84a      	bhi.n	800d2dc <CDC_Control_FS+0xac>
 800d246:	a201      	add	r2, pc, #4	; (adr r2, 800d24c <CDC_Control_FS+0x1c>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d2dd 	.word	0x0800d2dd
 800d250:	0800d2dd 	.word	0x0800d2dd
 800d254:	0800d2dd 	.word	0x0800d2dd
 800d258:	0800d2dd 	.word	0x0800d2dd
 800d25c:	0800d2dd 	.word	0x0800d2dd
 800d260:	0800d2dd 	.word	0x0800d2dd
 800d264:	0800d2dd 	.word	0x0800d2dd
 800d268:	0800d2dd 	.word	0x0800d2dd
 800d26c:	0800d2dd 	.word	0x0800d2dd
 800d270:	0800d2dd 	.word	0x0800d2dd
 800d274:	0800d2dd 	.word	0x0800d2dd
 800d278:	0800d2dd 	.word	0x0800d2dd
 800d27c:	0800d2dd 	.word	0x0800d2dd
 800d280:	0800d2dd 	.word	0x0800d2dd
 800d284:	0800d2dd 	.word	0x0800d2dd
 800d288:	0800d2dd 	.word	0x0800d2dd
 800d28c:	0800d2dd 	.word	0x0800d2dd
 800d290:	0800d2dd 	.word	0x0800d2dd
 800d294:	0800d2dd 	.word	0x0800d2dd
 800d298:	0800d2dd 	.word	0x0800d2dd
 800d29c:	0800d2dd 	.word	0x0800d2dd
 800d2a0:	0800d2dd 	.word	0x0800d2dd
 800d2a4:	0800d2dd 	.word	0x0800d2dd
 800d2a8:	0800d2dd 	.word	0x0800d2dd
 800d2ac:	0800d2dd 	.word	0x0800d2dd
 800d2b0:	0800d2dd 	.word	0x0800d2dd
 800d2b4:	0800d2dd 	.word	0x0800d2dd
 800d2b8:	0800d2dd 	.word	0x0800d2dd
 800d2bc:	0800d2dd 	.word	0x0800d2dd
 800d2c0:	0800d2dd 	.word	0x0800d2dd
 800d2c4:	0800d2dd 	.word	0x0800d2dd
 800d2c8:	0800d2dd 	.word	0x0800d2dd
 800d2cc:	0800d2dd 	.word	0x0800d2dd
 800d2d0:	0800d2dd 	.word	0x0800d2dd
 800d2d4:	0800d2dd 	.word	0x0800d2dd
 800d2d8:	0800d2dd 	.word	0x0800d2dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2dc:	bf00      	nop
  }

  return (USBD_OK);
 800d2de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	4805      	ldr	r0, [pc, #20]	; (800d310 <CDC_Receive_FS+0x24>)
 800d2fa:	f7fe fb97 	bl	800ba2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d2fe:	4804      	ldr	r0, [pc, #16]	; (800d310 <CDC_Receive_FS+0x24>)
 800d300:	f7fe fbf2 	bl	800bae8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d304:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	2000060c 	.word	0x2000060c

0800d314 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d324:	4b0d      	ldr	r3, [pc, #52]	; (800d35c <CDC_Transmit_FS+0x48>)
 800d326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d32a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d336:	2301      	movs	r3, #1
 800d338:	e00b      	b.n	800d352 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d33a:	887b      	ldrh	r3, [r7, #2]
 800d33c:	461a      	mov	r2, r3
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	4806      	ldr	r0, [pc, #24]	; (800d35c <CDC_Transmit_FS+0x48>)
 800d342:	f7fe fb51 	bl	800b9e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d346:	4805      	ldr	r0, [pc, #20]	; (800d35c <CDC_Transmit_FS+0x48>)
 800d348:	f7fe fb8e 	bl	800ba68 <USBD_CDC_TransmitPacket>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d350:	7bfb      	ldrb	r3, [r7, #15]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	2000060c 	.word	0x2000060c

0800d360 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d360:	b480      	push	{r7}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	4613      	mov	r3, r2
 800d36c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d372:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d376:	4618      	mov	r0, r3
 800d378:	371c      	adds	r7, #28
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
	...

0800d384 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	6039      	str	r1, [r7, #0]
 800d38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2212      	movs	r2, #18
 800d394:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d396:	4b03      	ldr	r3, [pc, #12]	; (800d3a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	2000015c 	.word	0x2000015c

0800d3a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	6039      	str	r1, [r7, #0]
 800d3b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	2204      	movs	r2, #4
 800d3b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	2000017c 	.word	0x2000017c

0800d3cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	6039      	str	r1, [r7, #0]
 800d3d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3d8:	79fb      	ldrb	r3, [r7, #7]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d105      	bne.n	800d3ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	4907      	ldr	r1, [pc, #28]	; (800d400 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3e2:	4808      	ldr	r0, [pc, #32]	; (800d404 <USBD_FS_ProductStrDescriptor+0x38>)
 800d3e4:	f7ff fdf8 	bl	800cfd8 <USBD_GetString>
 800d3e8:	e004      	b.n	800d3f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	4904      	ldr	r1, [pc, #16]	; (800d400 <USBD_FS_ProductStrDescriptor+0x34>)
 800d3ee:	4805      	ldr	r0, [pc, #20]	; (800d404 <USBD_FS_ProductStrDescriptor+0x38>)
 800d3f0:	f7ff fdf2 	bl	800cfd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3f4:	4b02      	ldr	r3, [pc, #8]	; (800d400 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	200018e8 	.word	0x200018e8
 800d404:	08013db0 	.word	0x08013db0

0800d408 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	6039      	str	r1, [r7, #0]
 800d412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d414:	683a      	ldr	r2, [r7, #0]
 800d416:	4904      	ldr	r1, [pc, #16]	; (800d428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d418:	4804      	ldr	r0, [pc, #16]	; (800d42c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d41a:	f7ff fddd 	bl	800cfd8 <USBD_GetString>
  return USBD_StrDesc;
 800d41e:	4b02      	ldr	r3, [pc, #8]	; (800d428 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d420:	4618      	mov	r0, r3
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	200018e8 	.word	0x200018e8
 800d42c:	08013dc8 	.word	0x08013dc8

0800d430 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	4603      	mov	r3, r0
 800d438:	6039      	str	r1, [r7, #0]
 800d43a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	221a      	movs	r2, #26
 800d440:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d442:	f000 f855 	bl	800d4f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d446:	4b02      	ldr	r3, [pc, #8]	; (800d450 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20000180 	.word	0x20000180

0800d454 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	4603      	mov	r3, r0
 800d45c:	6039      	str	r1, [r7, #0]
 800d45e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d105      	bne.n	800d472 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	4907      	ldr	r1, [pc, #28]	; (800d488 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d46a:	4808      	ldr	r0, [pc, #32]	; (800d48c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d46c:	f7ff fdb4 	bl	800cfd8 <USBD_GetString>
 800d470:	e004      	b.n	800d47c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	4904      	ldr	r1, [pc, #16]	; (800d488 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d476:	4805      	ldr	r0, [pc, #20]	; (800d48c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d478:	f7ff fdae 	bl	800cfd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d47c:	4b02      	ldr	r3, [pc, #8]	; (800d488 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	200018e8 	.word	0x200018e8
 800d48c:	08013ddc 	.word	0x08013ddc

0800d490 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d49c:	79fb      	ldrb	r3, [r7, #7]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d105      	bne.n	800d4ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4a2:	683a      	ldr	r2, [r7, #0]
 800d4a4:	4907      	ldr	r1, [pc, #28]	; (800d4c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4a6:	4808      	ldr	r0, [pc, #32]	; (800d4c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4a8:	f7ff fd96 	bl	800cfd8 <USBD_GetString>
 800d4ac:	e004      	b.n	800d4b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	4904      	ldr	r1, [pc, #16]	; (800d4c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d4b2:	4805      	ldr	r0, [pc, #20]	; (800d4c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d4b4:	f7ff fd90 	bl	800cfd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4b8:	4b02      	ldr	r3, [pc, #8]	; (800d4c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3708      	adds	r7, #8
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	200018e8 	.word	0x200018e8
 800d4c8:	08013de8 	.word	0x08013de8

0800d4cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	220c      	movs	r2, #12
 800d4dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d4de:	4b03      	ldr	r3, [pc, #12]	; (800d4ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	20000170 	.word	0x20000170

0800d4f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d4f6:	4b0f      	ldr	r3, [pc, #60]	; (800d534 <Get_SerialNum+0x44>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d4fc:	4b0e      	ldr	r3, [pc, #56]	; (800d538 <Get_SerialNum+0x48>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d502:	4b0e      	ldr	r3, [pc, #56]	; (800d53c <Get_SerialNum+0x4c>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4413      	add	r3, r2
 800d50e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d009      	beq.n	800d52a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d516:	2208      	movs	r2, #8
 800d518:	4909      	ldr	r1, [pc, #36]	; (800d540 <Get_SerialNum+0x50>)
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f000 f814 	bl	800d548 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d520:	2204      	movs	r2, #4
 800d522:	4908      	ldr	r1, [pc, #32]	; (800d544 <Get_SerialNum+0x54>)
 800d524:	68b8      	ldr	r0, [r7, #8]
 800d526:	f000 f80f 	bl	800d548 <IntToUnicode>
  }
}
 800d52a:	bf00      	nop
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	1fff7590 	.word	0x1fff7590
 800d538:	1fff7594 	.word	0x1fff7594
 800d53c:	1fff7598 	.word	0x1fff7598
 800d540:	20000182 	.word	0x20000182
 800d544:	20000192 	.word	0x20000192

0800d548 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	4613      	mov	r3, r2
 800d554:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d55a:	2300      	movs	r3, #0
 800d55c:	75fb      	strb	r3, [r7, #23]
 800d55e:	e027      	b.n	800d5b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	0f1b      	lsrs	r3, r3, #28
 800d564:	2b09      	cmp	r3, #9
 800d566:	d80b      	bhi.n	800d580 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	0f1b      	lsrs	r3, r3, #28
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	4619      	mov	r1, r3
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	440b      	add	r3, r1
 800d578:	3230      	adds	r2, #48	; 0x30
 800d57a:	b2d2      	uxtb	r2, r2
 800d57c:	701a      	strb	r2, [r3, #0]
 800d57e:	e00a      	b.n	800d596 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	0f1b      	lsrs	r3, r3, #28
 800d584:	b2da      	uxtb	r2, r3
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	4619      	mov	r1, r3
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	440b      	add	r3, r1
 800d590:	3237      	adds	r2, #55	; 0x37
 800d592:	b2d2      	uxtb	r2, r2
 800d594:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d5aa:	7dfb      	ldrb	r3, [r7, #23]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	75fb      	strb	r3, [r7, #23]
 800d5b0:	7dfa      	ldrb	r2, [r7, #23]
 800d5b2:	79fb      	ldrb	r3, [r7, #7]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d3d3      	bcc.n	800d560 <IntToUnicode+0x18>
  }
}
 800d5b8:	bf00      	nop
 800d5ba:	bf00      	nop
 800d5bc:	371c      	adds	r7, #28
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
	...

0800d5c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b0ac      	sub	sp, #176	; 0xb0
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	601a      	str	r2, [r3, #0]
 800d5d8:	605a      	str	r2, [r3, #4]
 800d5da:	609a      	str	r2, [r3, #8]
 800d5dc:	60da      	str	r2, [r3, #12]
 800d5de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d5e0:	f107 0314 	add.w	r3, r7, #20
 800d5e4:	2288      	movs	r2, #136	; 0x88
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f001 fbcc 	bl	800ed86 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d5f6:	d173      	bne.n	800d6e0 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d5f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800d5fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800d606:	2301      	movs	r3, #1
 800d608:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800d60a:	2301      	movs	r3, #1
 800d60c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800d60e:	2318      	movs	r3, #24
 800d610:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800d612:	2307      	movs	r3, #7
 800d614:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800d616:	2302      	movs	r3, #2
 800d618:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800d61a:	2302      	movs	r3, #2
 800d61c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800d61e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d622:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d624:	f107 0314 	add.w	r3, r7, #20
 800d628:	4618      	mov	r0, r3
 800d62a:	f7f9 fe95 	bl	8007358 <HAL_RCCEx_PeriphCLKConfig>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800d634:	f7f5 f9cc 	bl	80029d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d638:	4b2b      	ldr	r3, [pc, #172]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d63a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d63c:	4a2a      	ldr	r2, [pc, #168]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d63e:	f043 0301 	orr.w	r3, r3, #1
 800d642:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d644:	4b28      	ldr	r3, [pc, #160]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d648:	f003 0301 	and.w	r3, r3, #1
 800d64c:	613b      	str	r3, [r7, #16]
 800d64e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d650:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d658:	2302      	movs	r3, #2
 800d65a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d65e:	2300      	movs	r3, #0
 800d660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d664:	2303      	movs	r3, #3
 800d666:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d66a:	230a      	movs	r3, #10
 800d66c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d670:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d674:	4619      	mov	r1, r3
 800d676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d67a:	f7f6 fe67 	bl	800434c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d67e:	4b1a      	ldr	r3, [pc, #104]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d682:	4a19      	ldr	r2, [pc, #100]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d68a:	4b17      	ldr	r3, [pc, #92]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d68e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d69a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d114      	bne.n	800d6cc <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d6a2:	4b11      	ldr	r3, [pc, #68]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a6:	4a10      	ldr	r2, [pc, #64]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d6a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6ac:	6593      	str	r3, [r2, #88]	; 0x58
 800d6ae:	4b0e      	ldr	r3, [pc, #56]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6b6:	60bb      	str	r3, [r7, #8]
 800d6b8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800d6ba:	f7f9 f83d 	bl	8006738 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6be:	4b0a      	ldr	r3, [pc, #40]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6c2:	4a09      	ldr	r2, [pc, #36]	; (800d6e8 <HAL_PCD_MspInit+0x120>)
 800d6c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6c8:	6593      	str	r3, [r2, #88]	; 0x58
 800d6ca:	e001      	b.n	800d6d0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d6cc:	f7f9 f834 	bl	8006738 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	2043      	movs	r0, #67	; 0x43
 800d6d6:	f7f6 fc0a 	bl	8003eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d6da:	2043      	movs	r0, #67	; 0x43
 800d6dc:	f7f6 fc23 	bl	8003f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d6e0:	bf00      	nop
 800d6e2:	37b0      	adds	r7, #176	; 0xb0
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	40021000 	.word	0x40021000

0800d6ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d700:	4619      	mov	r1, r3
 800d702:	4610      	mov	r0, r2
 800d704:	f7fe fad9 	bl	800bcba <USBD_LL_SetupStage>
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	460b      	mov	r3, r1
 800d71a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d722:	78fa      	ldrb	r2, [r7, #3]
 800d724:	6879      	ldr	r1, [r7, #4]
 800d726:	4613      	mov	r3, r2
 800d728:	00db      	lsls	r3, r3, #3
 800d72a:	4413      	add	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	440b      	add	r3, r1
 800d730:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	78fb      	ldrb	r3, [r7, #3]
 800d738:	4619      	mov	r1, r3
 800d73a:	f7fe fb13 	bl	800bd64 <USBD_LL_DataOutStage>
}
 800d73e:	bf00      	nop
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b082      	sub	sp, #8
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
 800d74e:	460b      	mov	r3, r1
 800d750:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d758:	78fa      	ldrb	r2, [r7, #3]
 800d75a:	6879      	ldr	r1, [r7, #4]
 800d75c:	4613      	mov	r3, r2
 800d75e:	00db      	lsls	r3, r3, #3
 800d760:	4413      	add	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	440b      	add	r3, r1
 800d766:	3348      	adds	r3, #72	; 0x48
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	4619      	mov	r1, r3
 800d76e:	f7fe fbac 	bl	800beca <USBD_LL_DataInStage>
}
 800d772:	bf00      	nop
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fe fce6 	bl	800c15a <USBD_LL_SOF>
}
 800d78e:	bf00      	nop
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b084      	sub	sp, #16
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d001      	beq.n	800d7ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d7aa:	f7f5 f911 	bl	80029d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7b4:	7bfa      	ldrb	r2, [r7, #15]
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fe fc8a 	bl	800c0d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fe fc32 	bl	800c02e <USBD_LL_Reset>
}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	6812      	ldr	r2, [r2, #0]
 800d7ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7ee:	f043 0301 	orr.w	r3, r3, #1
 800d7f2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fe fc79 	bl	800c0f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d005      	beq.n	800d814 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d808:	4b04      	ldr	r3, [pc, #16]	; (800d81c <HAL_PCD_SuspendCallback+0x48>)
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	4a03      	ldr	r2, [pc, #12]	; (800d81c <HAL_PCD_SuspendCallback+0x48>)
 800d80e:	f043 0306 	orr.w	r3, r3, #6
 800d812:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	e000ed00 	.word	0xe000ed00

0800d820 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	6812      	ldr	r2, [r2, #0]
 800d836:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d83a:	f023 0301 	bic.w	r3, r3, #1
 800d83e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a1b      	ldr	r3, [r3, #32]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d007      	beq.n	800d858 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d848:	4b08      	ldr	r3, [pc, #32]	; (800d86c <HAL_PCD_ResumeCallback+0x4c>)
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	4a07      	ldr	r2, [pc, #28]	; (800d86c <HAL_PCD_ResumeCallback+0x4c>)
 800d84e:	f023 0306 	bic.w	r3, r3, #6
 800d852:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d854:	f000 faf6 	bl	800de44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fc63 	bl	800c12a <USBD_LL_Resume>
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	e000ed00 	.word	0xe000ed00

0800d870 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d882:	78fa      	ldrb	r2, [r7, #3]
 800d884:	4611      	mov	r1, r2
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fcb9 	bl	800c1fe <USBD_LL_IsoOUTIncomplete>
}
 800d88c:	bf00      	nop
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	460b      	mov	r3, r1
 800d89e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8a6:	78fa      	ldrb	r2, [r7, #3]
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fe fc75 	bl	800c19a <USBD_LL_IsoINIncomplete>
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fccb 	bl	800c262 <USBD_LL_DevConnected>
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fcc8 	bl	800c278 <USBD_LL_DevDisconnected>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d13c      	bne.n	800d97a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d900:	4a20      	ldr	r2, [pc, #128]	; (800d984 <USBD_LL_Init+0x94>)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a1e      	ldr	r2, [pc, #120]	; (800d984 <USBD_LL_Init+0x94>)
 800d90c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d910:	4b1c      	ldr	r3, [pc, #112]	; (800d984 <USBD_LL_Init+0x94>)
 800d912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d918:	4b1a      	ldr	r3, [pc, #104]	; (800d984 <USBD_LL_Init+0x94>)
 800d91a:	2206      	movs	r2, #6
 800d91c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d91e:	4b19      	ldr	r3, [pc, #100]	; (800d984 <USBD_LL_Init+0x94>)
 800d920:	2202      	movs	r2, #2
 800d922:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d924:	4b17      	ldr	r3, [pc, #92]	; (800d984 <USBD_LL_Init+0x94>)
 800d926:	2202      	movs	r2, #2
 800d928:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d92a:	4b16      	ldr	r3, [pc, #88]	; (800d984 <USBD_LL_Init+0x94>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d930:	4b14      	ldr	r3, [pc, #80]	; (800d984 <USBD_LL_Init+0x94>)
 800d932:	2200      	movs	r2, #0
 800d934:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d936:	4b13      	ldr	r3, [pc, #76]	; (800d984 <USBD_LL_Init+0x94>)
 800d938:	2200      	movs	r2, #0
 800d93a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d93c:	4b11      	ldr	r3, [pc, #68]	; (800d984 <USBD_LL_Init+0x94>)
 800d93e:	2200      	movs	r2, #0
 800d940:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d942:	4b10      	ldr	r3, [pc, #64]	; (800d984 <USBD_LL_Init+0x94>)
 800d944:	2200      	movs	r2, #0
 800d946:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d948:	4b0e      	ldr	r3, [pc, #56]	; (800d984 <USBD_LL_Init+0x94>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d94e:	480d      	ldr	r0, [pc, #52]	; (800d984 <USBD_LL_Init+0x94>)
 800d950:	f7f7 fcd7 	bl	8005302 <HAL_PCD_Init>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d95a:	f7f5 f839 	bl	80029d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d95e:	2180      	movs	r1, #128	; 0x80
 800d960:	4808      	ldr	r0, [pc, #32]	; (800d984 <USBD_LL_Init+0x94>)
 800d962:	f7f8 fe40 	bl	80065e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d966:	2240      	movs	r2, #64	; 0x40
 800d968:	2100      	movs	r1, #0
 800d96a:	4806      	ldr	r0, [pc, #24]	; (800d984 <USBD_LL_Init+0x94>)
 800d96c:	f7f8 fdf4 	bl	8006558 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d970:	2280      	movs	r2, #128	; 0x80
 800d972:	2101      	movs	r1, #1
 800d974:	4803      	ldr	r0, [pc, #12]	; (800d984 <USBD_LL_Init+0x94>)
 800d976:	f7f8 fdef 	bl	8006558 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20001ae8 	.word	0x20001ae8

0800d988 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d994:	2300      	movs	r3, #0
 800d996:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f7 fdd3 	bl	800554a <HAL_PCD_Start>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d9a8:	7bbb      	ldrb	r3, [r7, #14]
 800d9aa:	2b03      	cmp	r3, #3
 800d9ac:	d816      	bhi.n	800d9dc <USBD_LL_Start+0x54>
 800d9ae:	a201      	add	r2, pc, #4	; (adr r2, 800d9b4 <USBD_LL_Start+0x2c>)
 800d9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b4:	0800d9c5 	.word	0x0800d9c5
 800d9b8:	0800d9cb 	.word	0x0800d9cb
 800d9bc:	0800d9d1 	.word	0x0800d9d1
 800d9c0:	0800d9d7 	.word	0x0800d9d7
    case HAL_OK :
      usb_status = USBD_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c8:	e00b      	b.n	800d9e2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9ca:	2303      	movs	r3, #3
 800d9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d9ce:	e008      	b.n	800d9e2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d4:	e005      	b.n	800d9e2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d9da:	e002      	b.n	800d9e2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d9dc:	2303      	movs	r3, #3
 800d9de:	73fb      	strb	r3, [r7, #15]
    break;
 800d9e0:	bf00      	nop
  }
  return usb_status;
 800d9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	70fb      	strb	r3, [r7, #3]
 800d9fe:	460b      	mov	r3, r1
 800da00:	70bb      	strb	r3, [r7, #2]
 800da02:	4613      	mov	r3, r2
 800da04:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da06:	2300      	movs	r3, #0
 800da08:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da14:	78bb      	ldrb	r3, [r7, #2]
 800da16:	883a      	ldrh	r2, [r7, #0]
 800da18:	78f9      	ldrb	r1, [r7, #3]
 800da1a:	f7f8 fa7d 	bl	8005f18 <HAL_PCD_EP_Open>
 800da1e:	4603      	mov	r3, r0
 800da20:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	2b03      	cmp	r3, #3
 800da26:	d817      	bhi.n	800da58 <USBD_LL_OpenEP+0x6c>
 800da28:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <USBD_LL_OpenEP+0x44>)
 800da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2e:	bf00      	nop
 800da30:	0800da41 	.word	0x0800da41
 800da34:	0800da47 	.word	0x0800da47
 800da38:	0800da4d 	.word	0x0800da4d
 800da3c:	0800da53 	.word	0x0800da53
    case HAL_OK :
      usb_status = USBD_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	73fb      	strb	r3, [r7, #15]
    break;
 800da44:	e00b      	b.n	800da5e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da46:	2303      	movs	r3, #3
 800da48:	73fb      	strb	r3, [r7, #15]
    break;
 800da4a:	e008      	b.n	800da5e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da4c:	2301      	movs	r3, #1
 800da4e:	73fb      	strb	r3, [r7, #15]
    break;
 800da50:	e005      	b.n	800da5e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da52:	2303      	movs	r3, #3
 800da54:	73fb      	strb	r3, [r7, #15]
    break;
 800da56:	e002      	b.n	800da5e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800da58:	2303      	movs	r3, #3
 800da5a:	73fb      	strb	r3, [r7, #15]
    break;
 800da5c:	bf00      	nop
  }
  return usb_status;
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da82:	78fa      	ldrb	r2, [r7, #3]
 800da84:	4611      	mov	r1, r2
 800da86:	4618      	mov	r0, r3
 800da88:	f7f8 faae 	bl	8005fe8 <HAL_PCD_EP_Close>
 800da8c:	4603      	mov	r3, r0
 800da8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da90:	7bbb      	ldrb	r3, [r7, #14]
 800da92:	2b03      	cmp	r3, #3
 800da94:	d816      	bhi.n	800dac4 <USBD_LL_CloseEP+0x5c>
 800da96:	a201      	add	r2, pc, #4	; (adr r2, 800da9c <USBD_LL_CloseEP+0x34>)
 800da98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9c:	0800daad 	.word	0x0800daad
 800daa0:	0800dab3 	.word	0x0800dab3
 800daa4:	0800dab9 	.word	0x0800dab9
 800daa8:	0800dabf 	.word	0x0800dabf
    case HAL_OK :
      usb_status = USBD_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	73fb      	strb	r3, [r7, #15]
    break;
 800dab0:	e00b      	b.n	800daca <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dab2:	2303      	movs	r3, #3
 800dab4:	73fb      	strb	r3, [r7, #15]
    break;
 800dab6:	e008      	b.n	800daca <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dab8:	2301      	movs	r3, #1
 800daba:	73fb      	strb	r3, [r7, #15]
    break;
 800dabc:	e005      	b.n	800daca <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dabe:	2303      	movs	r3, #3
 800dac0:	73fb      	strb	r3, [r7, #15]
    break;
 800dac2:	e002      	b.n	800daca <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dac4:	2303      	movs	r3, #3
 800dac6:	73fb      	strb	r3, [r7, #15]
    break;
 800dac8:	bf00      	nop
  }
  return usb_status;
 800daca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800daee:	78fa      	ldrb	r2, [r7, #3]
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7f8 fb3d 	bl	8006172 <HAL_PCD_EP_SetStall>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dafc:	7bbb      	ldrb	r3, [r7, #14]
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d816      	bhi.n	800db30 <USBD_LL_StallEP+0x5c>
 800db02:	a201      	add	r2, pc, #4	; (adr r2, 800db08 <USBD_LL_StallEP+0x34>)
 800db04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db08:	0800db19 	.word	0x0800db19
 800db0c:	0800db1f 	.word	0x0800db1f
 800db10:	0800db25 	.word	0x0800db25
 800db14:	0800db2b 	.word	0x0800db2b
    case HAL_OK :
      usb_status = USBD_OK;
 800db18:	2300      	movs	r3, #0
 800db1a:	73fb      	strb	r3, [r7, #15]
    break;
 800db1c:	e00b      	b.n	800db36 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db1e:	2303      	movs	r3, #3
 800db20:	73fb      	strb	r3, [r7, #15]
    break;
 800db22:	e008      	b.n	800db36 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db24:	2301      	movs	r3, #1
 800db26:	73fb      	strb	r3, [r7, #15]
    break;
 800db28:	e005      	b.n	800db36 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db2a:	2303      	movs	r3, #3
 800db2c:	73fb      	strb	r3, [r7, #15]
    break;
 800db2e:	e002      	b.n	800db36 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800db30:	2303      	movs	r3, #3
 800db32:	73fb      	strb	r3, [r7, #15]
    break;
 800db34:	bf00      	nop
  }
  return usb_status;
 800db36:	7bfb      	ldrb	r3, [r7, #15]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db5a:	78fa      	ldrb	r2, [r7, #3]
 800db5c:	4611      	mov	r1, r2
 800db5e:	4618      	mov	r0, r3
 800db60:	f7f8 fb69 	bl	8006236 <HAL_PCD_EP_ClrStall>
 800db64:	4603      	mov	r3, r0
 800db66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800db68:	7bbb      	ldrb	r3, [r7, #14]
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d816      	bhi.n	800db9c <USBD_LL_ClearStallEP+0x5c>
 800db6e:	a201      	add	r2, pc, #4	; (adr r2, 800db74 <USBD_LL_ClearStallEP+0x34>)
 800db70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db74:	0800db85 	.word	0x0800db85
 800db78:	0800db8b 	.word	0x0800db8b
 800db7c:	0800db91 	.word	0x0800db91
 800db80:	0800db97 	.word	0x0800db97
    case HAL_OK :
      usb_status = USBD_OK;
 800db84:	2300      	movs	r3, #0
 800db86:	73fb      	strb	r3, [r7, #15]
    break;
 800db88:	e00b      	b.n	800dba2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db8a:	2303      	movs	r3, #3
 800db8c:	73fb      	strb	r3, [r7, #15]
    break;
 800db8e:	e008      	b.n	800dba2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db90:	2301      	movs	r3, #1
 800db92:	73fb      	strb	r3, [r7, #15]
    break;
 800db94:	e005      	b.n	800dba2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db96:	2303      	movs	r3, #3
 800db98:	73fb      	strb	r3, [r7, #15]
    break;
 800db9a:	e002      	b.n	800dba2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800db9c:	2303      	movs	r3, #3
 800db9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dba0:	bf00      	nop
  }
  return usb_status;
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	da0b      	bge.n	800dbe0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbce:	68f9      	ldr	r1, [r7, #12]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	333e      	adds	r3, #62	; 0x3e
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	e00b      	b.n	800dbf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbe0:	78fb      	ldrb	r3, [r7, #3]
 800dbe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbe6:	68f9      	ldr	r1, [r7, #12]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	4413      	add	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	440b      	add	r3, r1
 800dbf2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dbf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc1e:	78fa      	ldrb	r2, [r7, #3]
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7f8 f953 	bl	8005ece <HAL_PCD_SetAddress>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	d816      	bhi.n	800dc60 <USBD_LL_SetUSBAddress+0x5c>
 800dc32:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <USBD_LL_SetUSBAddress+0x34>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dc49 	.word	0x0800dc49
 800dc3c:	0800dc4f 	.word	0x0800dc4f
 800dc40:	0800dc55 	.word	0x0800dc55
 800dc44:	0800dc5b 	.word	0x0800dc5b
    case HAL_OK :
      usb_status = USBD_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc4c:	e00b      	b.n	800dc66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc4e:	2303      	movs	r3, #3
 800dc50:	73fb      	strb	r3, [r7, #15]
    break;
 800dc52:	e008      	b.n	800dc66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc54:	2301      	movs	r3, #1
 800dc56:	73fb      	strb	r3, [r7, #15]
    break;
 800dc58:	e005      	b.n	800dc66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc5e:	e002      	b.n	800dc66 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800dc60:	2303      	movs	r3, #3
 800dc62:	73fb      	strb	r3, [r7, #15]
    break;
 800dc64:	bf00      	nop
  }
  return usb_status;
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	607a      	str	r2, [r7, #4]
 800dc7a:	603b      	str	r3, [r7, #0]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc8e:	7af9      	ldrb	r1, [r7, #11]
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	f7f8 fa3c 	bl	8006110 <HAL_PCD_EP_Transmit>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dc9c:	7dbb      	ldrb	r3, [r7, #22]
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d816      	bhi.n	800dcd0 <USBD_LL_Transmit+0x60>
 800dca2:	a201      	add	r2, pc, #4	; (adr r2, 800dca8 <USBD_LL_Transmit+0x38>)
 800dca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca8:	0800dcb9 	.word	0x0800dcb9
 800dcac:	0800dcbf 	.word	0x0800dcbf
 800dcb0:	0800dcc5 	.word	0x0800dcc5
 800dcb4:	0800dccb 	.word	0x0800dccb
    case HAL_OK :
      usb_status = USBD_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	75fb      	strb	r3, [r7, #23]
    break;
 800dcbc:	e00b      	b.n	800dcd6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	75fb      	strb	r3, [r7, #23]
    break;
 800dcc2:	e008      	b.n	800dcd6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	75fb      	strb	r3, [r7, #23]
    break;
 800dcc8:	e005      	b.n	800dcd6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcca:	2303      	movs	r3, #3
 800dccc:	75fb      	strb	r3, [r7, #23]
    break;
 800dcce:	e002      	b.n	800dcd6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	75fb      	strb	r3, [r7, #23]
    break;
 800dcd4:	bf00      	nop
  }
  return usb_status;
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3718      	adds	r7, #24
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	607a      	str	r2, [r7, #4]
 800dcea:	603b      	str	r3, [r7, #0]
 800dcec:	460b      	mov	r3, r1
 800dcee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcfe:	7af9      	ldrb	r1, [r7, #11]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	f7f8 f9ba 	bl	800607c <HAL_PCD_EP_Receive>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dd0c:	7dbb      	ldrb	r3, [r7, #22]
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d816      	bhi.n	800dd40 <USBD_LL_PrepareReceive+0x60>
 800dd12:	a201      	add	r2, pc, #4	; (adr r2, 800dd18 <USBD_LL_PrepareReceive+0x38>)
 800dd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd18:	0800dd29 	.word	0x0800dd29
 800dd1c:	0800dd2f 	.word	0x0800dd2f
 800dd20:	0800dd35 	.word	0x0800dd35
 800dd24:	0800dd3b 	.word	0x0800dd3b
    case HAL_OK :
      usb_status = USBD_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	75fb      	strb	r3, [r7, #23]
    break;
 800dd2c:	e00b      	b.n	800dd46 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd2e:	2303      	movs	r3, #3
 800dd30:	75fb      	strb	r3, [r7, #23]
    break;
 800dd32:	e008      	b.n	800dd46 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd34:	2301      	movs	r3, #1
 800dd36:	75fb      	strb	r3, [r7, #23]
    break;
 800dd38:	e005      	b.n	800dd46 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	75fb      	strb	r3, [r7, #23]
    break;
 800dd3e:	e002      	b.n	800dd46 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800dd40:	2303      	movs	r3, #3
 800dd42:	75fb      	strb	r3, [r7, #23]
    break;
 800dd44:	bf00      	nop
  }
  return usb_status;
 800dd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd62:	78fa      	ldrb	r2, [r7, #3]
 800dd64:	4611      	mov	r1, r2
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7f8 f9ba 	bl	80060e0 <HAL_PCD_EP_GetRxCount>
 800dd6c:	4603      	mov	r3, r0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	460b      	mov	r3, r1
 800dd82:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dd84:	78fb      	ldrb	r3, [r7, #3]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d002      	beq.n	800dd90 <HAL_PCDEx_LPM_Callback+0x18>
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d01f      	beq.n	800ddce <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dd8e:	e03b      	b.n	800de08 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a1b      	ldr	r3, [r3, #32]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d007      	beq.n	800dda8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dd98:	f000 f854 	bl	800de44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd9c:	4b1c      	ldr	r3, [pc, #112]	; (800de10 <HAL_PCDEx_LPM_Callback+0x98>)
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	4a1b      	ldr	r2, [pc, #108]	; (800de10 <HAL_PCDEx_LPM_Callback+0x98>)
 800dda2:	f023 0306 	bic.w	r3, r3, #6
 800dda6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	6812      	ldr	r2, [r2, #0]
 800ddb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ddba:	f023 0301 	bic.w	r3, r3, #1
 800ddbe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe f9af 	bl	800c12a <USBD_LL_Resume>
    break;
 800ddcc:	e01c      	b.n	800de08 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	6812      	ldr	r2, [r2, #0]
 800dddc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dde0:	f043 0301 	orr.w	r3, r3, #1
 800dde4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fe f980 	bl	800c0f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d005      	beq.n	800de06 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddfa:	4b05      	ldr	r3, [pc, #20]	; (800de10 <HAL_PCDEx_LPM_Callback+0x98>)
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	4a04      	ldr	r2, [pc, #16]	; (800de10 <HAL_PCDEx_LPM_Callback+0x98>)
 800de00:	f043 0306 	orr.w	r3, r3, #6
 800de04:	6113      	str	r3, [r2, #16]
    break;
 800de06:	bf00      	nop
}
 800de08:	bf00      	nop
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	e000ed00 	.word	0xe000ed00

0800de14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800de1c:	4b03      	ldr	r3, [pc, #12]	; (800de2c <USBD_static_malloc+0x18>)
}
 800de1e:	4618      	mov	r0, r3
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	20001ff4 	.word	0x20001ff4

0800de30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]

}
 800de38:	bf00      	nop
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800de48:	f7f4 fd60 	bl	800290c <SystemClock_Config>
}
 800de4c:	bf00      	nop
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <__cvt>:
 800de50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de54:	ec55 4b10 	vmov	r4, r5, d0
 800de58:	2d00      	cmp	r5, #0
 800de5a:	460e      	mov	r6, r1
 800de5c:	4619      	mov	r1, r3
 800de5e:	462b      	mov	r3, r5
 800de60:	bfbb      	ittet	lt
 800de62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de66:	461d      	movlt	r5, r3
 800de68:	2300      	movge	r3, #0
 800de6a:	232d      	movlt	r3, #45	; 0x2d
 800de6c:	700b      	strb	r3, [r1, #0]
 800de6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800de74:	4691      	mov	r9, r2
 800de76:	f023 0820 	bic.w	r8, r3, #32
 800de7a:	bfbc      	itt	lt
 800de7c:	4622      	movlt	r2, r4
 800de7e:	4614      	movlt	r4, r2
 800de80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de84:	d005      	beq.n	800de92 <__cvt+0x42>
 800de86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de8a:	d100      	bne.n	800de8e <__cvt+0x3e>
 800de8c:	3601      	adds	r6, #1
 800de8e:	2102      	movs	r1, #2
 800de90:	e000      	b.n	800de94 <__cvt+0x44>
 800de92:	2103      	movs	r1, #3
 800de94:	ab03      	add	r3, sp, #12
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	ab02      	add	r3, sp, #8
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	ec45 4b10 	vmov	d0, r4, r5
 800dea0:	4653      	mov	r3, sl
 800dea2:	4632      	mov	r2, r6
 800dea4:	f001 f880 	bl	800efa8 <_dtoa_r>
 800dea8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800deac:	4607      	mov	r7, r0
 800deae:	d102      	bne.n	800deb6 <__cvt+0x66>
 800deb0:	f019 0f01 	tst.w	r9, #1
 800deb4:	d022      	beq.n	800defc <__cvt+0xac>
 800deb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800deba:	eb07 0906 	add.w	r9, r7, r6
 800debe:	d110      	bne.n	800dee2 <__cvt+0x92>
 800dec0:	783b      	ldrb	r3, [r7, #0]
 800dec2:	2b30      	cmp	r3, #48	; 0x30
 800dec4:	d10a      	bne.n	800dedc <__cvt+0x8c>
 800dec6:	2200      	movs	r2, #0
 800dec8:	2300      	movs	r3, #0
 800deca:	4620      	mov	r0, r4
 800decc:	4629      	mov	r1, r5
 800dece:	f7f2 fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ded2:	b918      	cbnz	r0, 800dedc <__cvt+0x8c>
 800ded4:	f1c6 0601 	rsb	r6, r6, #1
 800ded8:	f8ca 6000 	str.w	r6, [sl]
 800dedc:	f8da 3000 	ldr.w	r3, [sl]
 800dee0:	4499      	add	r9, r3
 800dee2:	2200      	movs	r2, #0
 800dee4:	2300      	movs	r3, #0
 800dee6:	4620      	mov	r0, r4
 800dee8:	4629      	mov	r1, r5
 800deea:	f7f2 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 800deee:	b108      	cbz	r0, 800def4 <__cvt+0xa4>
 800def0:	f8cd 900c 	str.w	r9, [sp, #12]
 800def4:	2230      	movs	r2, #48	; 0x30
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	454b      	cmp	r3, r9
 800defa:	d307      	bcc.n	800df0c <__cvt+0xbc>
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df00:	1bdb      	subs	r3, r3, r7
 800df02:	4638      	mov	r0, r7
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	b004      	add	sp, #16
 800df08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0c:	1c59      	adds	r1, r3, #1
 800df0e:	9103      	str	r1, [sp, #12]
 800df10:	701a      	strb	r2, [r3, #0]
 800df12:	e7f0      	b.n	800def6 <__cvt+0xa6>

0800df14 <__exponent>:
 800df14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df16:	4603      	mov	r3, r0
 800df18:	2900      	cmp	r1, #0
 800df1a:	bfb8      	it	lt
 800df1c:	4249      	neglt	r1, r1
 800df1e:	f803 2b02 	strb.w	r2, [r3], #2
 800df22:	bfb4      	ite	lt
 800df24:	222d      	movlt	r2, #45	; 0x2d
 800df26:	222b      	movge	r2, #43	; 0x2b
 800df28:	2909      	cmp	r1, #9
 800df2a:	7042      	strb	r2, [r0, #1]
 800df2c:	dd2a      	ble.n	800df84 <__exponent+0x70>
 800df2e:	f10d 0207 	add.w	r2, sp, #7
 800df32:	4617      	mov	r7, r2
 800df34:	260a      	movs	r6, #10
 800df36:	4694      	mov	ip, r2
 800df38:	fb91 f5f6 	sdiv	r5, r1, r6
 800df3c:	fb06 1415 	mls	r4, r6, r5, r1
 800df40:	3430      	adds	r4, #48	; 0x30
 800df42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800df46:	460c      	mov	r4, r1
 800df48:	2c63      	cmp	r4, #99	; 0x63
 800df4a:	f102 32ff 	add.w	r2, r2, #4294967295
 800df4e:	4629      	mov	r1, r5
 800df50:	dcf1      	bgt.n	800df36 <__exponent+0x22>
 800df52:	3130      	adds	r1, #48	; 0x30
 800df54:	f1ac 0402 	sub.w	r4, ip, #2
 800df58:	f802 1c01 	strb.w	r1, [r2, #-1]
 800df5c:	1c41      	adds	r1, r0, #1
 800df5e:	4622      	mov	r2, r4
 800df60:	42ba      	cmp	r2, r7
 800df62:	d30a      	bcc.n	800df7a <__exponent+0x66>
 800df64:	f10d 0209 	add.w	r2, sp, #9
 800df68:	eba2 020c 	sub.w	r2, r2, ip
 800df6c:	42bc      	cmp	r4, r7
 800df6e:	bf88      	it	hi
 800df70:	2200      	movhi	r2, #0
 800df72:	4413      	add	r3, r2
 800df74:	1a18      	subs	r0, r3, r0
 800df76:	b003      	add	sp, #12
 800df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800df7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800df82:	e7ed      	b.n	800df60 <__exponent+0x4c>
 800df84:	2330      	movs	r3, #48	; 0x30
 800df86:	3130      	adds	r1, #48	; 0x30
 800df88:	7083      	strb	r3, [r0, #2]
 800df8a:	70c1      	strb	r1, [r0, #3]
 800df8c:	1d03      	adds	r3, r0, #4
 800df8e:	e7f1      	b.n	800df74 <__exponent+0x60>

0800df90 <_printf_float>:
 800df90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	ed2d 8b02 	vpush	{d8}
 800df98:	b08d      	sub	sp, #52	; 0x34
 800df9a:	460c      	mov	r4, r1
 800df9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dfa0:	4616      	mov	r6, r2
 800dfa2:	461f      	mov	r7, r3
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	f000 fef7 	bl	800ed98 <_localeconv_r>
 800dfaa:	f8d0 a000 	ldr.w	sl, [r0]
 800dfae:	4650      	mov	r0, sl
 800dfb0:	f7f2 f95e 	bl	8000270 <strlen>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	930a      	str	r3, [sp, #40]	; 0x28
 800dfb8:	6823      	ldr	r3, [r4, #0]
 800dfba:	9305      	str	r3, [sp, #20]
 800dfbc:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dfc4:	3307      	adds	r3, #7
 800dfc6:	f023 0307 	bic.w	r3, r3, #7
 800dfca:	f103 0208 	add.w	r2, r3, #8
 800dfce:	f8c8 2000 	str.w	r2, [r8]
 800dfd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dfd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dfda:	9307      	str	r3, [sp, #28]
 800dfdc:	f8cd 8018 	str.w	r8, [sp, #24]
 800dfe0:	ee08 0a10 	vmov	s16, r0
 800dfe4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dfe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfec:	4b9e      	ldr	r3, [pc, #632]	; (800e268 <_printf_float+0x2d8>)
 800dfee:	f04f 32ff 	mov.w	r2, #4294967295
 800dff2:	f7f2 fd9b 	bl	8000b2c <__aeabi_dcmpun>
 800dff6:	bb88      	cbnz	r0, 800e05c <_printf_float+0xcc>
 800dff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dffc:	4b9a      	ldr	r3, [pc, #616]	; (800e268 <_printf_float+0x2d8>)
 800dffe:	f04f 32ff 	mov.w	r2, #4294967295
 800e002:	f7f2 fd75 	bl	8000af0 <__aeabi_dcmple>
 800e006:	bb48      	cbnz	r0, 800e05c <_printf_float+0xcc>
 800e008:	2200      	movs	r2, #0
 800e00a:	2300      	movs	r3, #0
 800e00c:	4640      	mov	r0, r8
 800e00e:	4649      	mov	r1, r9
 800e010:	f7f2 fd64 	bl	8000adc <__aeabi_dcmplt>
 800e014:	b110      	cbz	r0, 800e01c <_printf_float+0x8c>
 800e016:	232d      	movs	r3, #45	; 0x2d
 800e018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e01c:	4a93      	ldr	r2, [pc, #588]	; (800e26c <_printf_float+0x2dc>)
 800e01e:	4b94      	ldr	r3, [pc, #592]	; (800e270 <_printf_float+0x2e0>)
 800e020:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e024:	bf94      	ite	ls
 800e026:	4690      	movls	r8, r2
 800e028:	4698      	movhi	r8, r3
 800e02a:	2303      	movs	r3, #3
 800e02c:	6123      	str	r3, [r4, #16]
 800e02e:	9b05      	ldr	r3, [sp, #20]
 800e030:	f023 0304 	bic.w	r3, r3, #4
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	f04f 0900 	mov.w	r9, #0
 800e03a:	9700      	str	r7, [sp, #0]
 800e03c:	4633      	mov	r3, r6
 800e03e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e040:	4621      	mov	r1, r4
 800e042:	4628      	mov	r0, r5
 800e044:	f000 f9da 	bl	800e3fc <_printf_common>
 800e048:	3001      	adds	r0, #1
 800e04a:	f040 8090 	bne.w	800e16e <_printf_float+0x1de>
 800e04e:	f04f 30ff 	mov.w	r0, #4294967295
 800e052:	b00d      	add	sp, #52	; 0x34
 800e054:	ecbd 8b02 	vpop	{d8}
 800e058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05c:	4642      	mov	r2, r8
 800e05e:	464b      	mov	r3, r9
 800e060:	4640      	mov	r0, r8
 800e062:	4649      	mov	r1, r9
 800e064:	f7f2 fd62 	bl	8000b2c <__aeabi_dcmpun>
 800e068:	b140      	cbz	r0, 800e07c <_printf_float+0xec>
 800e06a:	464b      	mov	r3, r9
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	bfbc      	itt	lt
 800e070:	232d      	movlt	r3, #45	; 0x2d
 800e072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e076:	4a7f      	ldr	r2, [pc, #508]	; (800e274 <_printf_float+0x2e4>)
 800e078:	4b7f      	ldr	r3, [pc, #508]	; (800e278 <_printf_float+0x2e8>)
 800e07a:	e7d1      	b.n	800e020 <_printf_float+0x90>
 800e07c:	6863      	ldr	r3, [r4, #4]
 800e07e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e082:	9206      	str	r2, [sp, #24]
 800e084:	1c5a      	adds	r2, r3, #1
 800e086:	d13f      	bne.n	800e108 <_printf_float+0x178>
 800e088:	2306      	movs	r3, #6
 800e08a:	6063      	str	r3, [r4, #4]
 800e08c:	9b05      	ldr	r3, [sp, #20]
 800e08e:	6861      	ldr	r1, [r4, #4]
 800e090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e094:	2300      	movs	r3, #0
 800e096:	9303      	str	r3, [sp, #12]
 800e098:	ab0a      	add	r3, sp, #40	; 0x28
 800e09a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e09e:	ab09      	add	r3, sp, #36	; 0x24
 800e0a0:	ec49 8b10 	vmov	d0, r8, r9
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	6022      	str	r2, [r4, #0]
 800e0a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	f7ff fecf 	bl	800de50 <__cvt>
 800e0b2:	9b06      	ldr	r3, [sp, #24]
 800e0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0b6:	2b47      	cmp	r3, #71	; 0x47
 800e0b8:	4680      	mov	r8, r0
 800e0ba:	d108      	bne.n	800e0ce <_printf_float+0x13e>
 800e0bc:	1cc8      	adds	r0, r1, #3
 800e0be:	db02      	blt.n	800e0c6 <_printf_float+0x136>
 800e0c0:	6863      	ldr	r3, [r4, #4]
 800e0c2:	4299      	cmp	r1, r3
 800e0c4:	dd41      	ble.n	800e14a <_printf_float+0x1ba>
 800e0c6:	f1ab 0302 	sub.w	r3, fp, #2
 800e0ca:	fa5f fb83 	uxtb.w	fp, r3
 800e0ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0d2:	d820      	bhi.n	800e116 <_printf_float+0x186>
 800e0d4:	3901      	subs	r1, #1
 800e0d6:	465a      	mov	r2, fp
 800e0d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0dc:	9109      	str	r1, [sp, #36]	; 0x24
 800e0de:	f7ff ff19 	bl	800df14 <__exponent>
 800e0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0e4:	1813      	adds	r3, r2, r0
 800e0e6:	2a01      	cmp	r2, #1
 800e0e8:	4681      	mov	r9, r0
 800e0ea:	6123      	str	r3, [r4, #16]
 800e0ec:	dc02      	bgt.n	800e0f4 <_printf_float+0x164>
 800e0ee:	6822      	ldr	r2, [r4, #0]
 800e0f0:	07d2      	lsls	r2, r2, #31
 800e0f2:	d501      	bpl.n	800e0f8 <_printf_float+0x168>
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	6123      	str	r3, [r4, #16]
 800e0f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d09c      	beq.n	800e03a <_printf_float+0xaa>
 800e100:	232d      	movs	r3, #45	; 0x2d
 800e102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e106:	e798      	b.n	800e03a <_printf_float+0xaa>
 800e108:	9a06      	ldr	r2, [sp, #24]
 800e10a:	2a47      	cmp	r2, #71	; 0x47
 800e10c:	d1be      	bne.n	800e08c <_printf_float+0xfc>
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1bc      	bne.n	800e08c <_printf_float+0xfc>
 800e112:	2301      	movs	r3, #1
 800e114:	e7b9      	b.n	800e08a <_printf_float+0xfa>
 800e116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e11a:	d118      	bne.n	800e14e <_printf_float+0x1be>
 800e11c:	2900      	cmp	r1, #0
 800e11e:	6863      	ldr	r3, [r4, #4]
 800e120:	dd0b      	ble.n	800e13a <_printf_float+0x1aa>
 800e122:	6121      	str	r1, [r4, #16]
 800e124:	b913      	cbnz	r3, 800e12c <_printf_float+0x19c>
 800e126:	6822      	ldr	r2, [r4, #0]
 800e128:	07d0      	lsls	r0, r2, #31
 800e12a:	d502      	bpl.n	800e132 <_printf_float+0x1a2>
 800e12c:	3301      	adds	r3, #1
 800e12e:	440b      	add	r3, r1
 800e130:	6123      	str	r3, [r4, #16]
 800e132:	65a1      	str	r1, [r4, #88]	; 0x58
 800e134:	f04f 0900 	mov.w	r9, #0
 800e138:	e7de      	b.n	800e0f8 <_printf_float+0x168>
 800e13a:	b913      	cbnz	r3, 800e142 <_printf_float+0x1b2>
 800e13c:	6822      	ldr	r2, [r4, #0]
 800e13e:	07d2      	lsls	r2, r2, #31
 800e140:	d501      	bpl.n	800e146 <_printf_float+0x1b6>
 800e142:	3302      	adds	r3, #2
 800e144:	e7f4      	b.n	800e130 <_printf_float+0x1a0>
 800e146:	2301      	movs	r3, #1
 800e148:	e7f2      	b.n	800e130 <_printf_float+0x1a0>
 800e14a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e150:	4299      	cmp	r1, r3
 800e152:	db05      	blt.n	800e160 <_printf_float+0x1d0>
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	6121      	str	r1, [r4, #16]
 800e158:	07d8      	lsls	r0, r3, #31
 800e15a:	d5ea      	bpl.n	800e132 <_printf_float+0x1a2>
 800e15c:	1c4b      	adds	r3, r1, #1
 800e15e:	e7e7      	b.n	800e130 <_printf_float+0x1a0>
 800e160:	2900      	cmp	r1, #0
 800e162:	bfd4      	ite	le
 800e164:	f1c1 0202 	rsble	r2, r1, #2
 800e168:	2201      	movgt	r2, #1
 800e16a:	4413      	add	r3, r2
 800e16c:	e7e0      	b.n	800e130 <_printf_float+0x1a0>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	055a      	lsls	r2, r3, #21
 800e172:	d407      	bmi.n	800e184 <_printf_float+0x1f4>
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	4642      	mov	r2, r8
 800e178:	4631      	mov	r1, r6
 800e17a:	4628      	mov	r0, r5
 800e17c:	47b8      	blx	r7
 800e17e:	3001      	adds	r0, #1
 800e180:	d12c      	bne.n	800e1dc <_printf_float+0x24c>
 800e182:	e764      	b.n	800e04e <_printf_float+0xbe>
 800e184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e188:	f240 80e0 	bls.w	800e34c <_printf_float+0x3bc>
 800e18c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e190:	2200      	movs	r2, #0
 800e192:	2300      	movs	r3, #0
 800e194:	f7f2 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800e198:	2800      	cmp	r0, #0
 800e19a:	d034      	beq.n	800e206 <_printf_float+0x276>
 800e19c:	4a37      	ldr	r2, [pc, #220]	; (800e27c <_printf_float+0x2ec>)
 800e19e:	2301      	movs	r3, #1
 800e1a0:	4631      	mov	r1, r6
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	47b8      	blx	r7
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	f43f af51 	beq.w	800e04e <_printf_float+0xbe>
 800e1ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	db02      	blt.n	800e1ba <_printf_float+0x22a>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	07d8      	lsls	r0, r3, #31
 800e1b8:	d510      	bpl.n	800e1dc <_printf_float+0x24c>
 800e1ba:	ee18 3a10 	vmov	r3, s16
 800e1be:	4652      	mov	r2, sl
 800e1c0:	4631      	mov	r1, r6
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	47b8      	blx	r7
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	f43f af41 	beq.w	800e04e <_printf_float+0xbe>
 800e1cc:	f04f 0800 	mov.w	r8, #0
 800e1d0:	f104 091a 	add.w	r9, r4, #26
 800e1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	4543      	cmp	r3, r8
 800e1da:	dc09      	bgt.n	800e1f0 <_printf_float+0x260>
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	079b      	lsls	r3, r3, #30
 800e1e0:	f100 8107 	bmi.w	800e3f2 <_printf_float+0x462>
 800e1e4:	68e0      	ldr	r0, [r4, #12]
 800e1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1e8:	4298      	cmp	r0, r3
 800e1ea:	bfb8      	it	lt
 800e1ec:	4618      	movlt	r0, r3
 800e1ee:	e730      	b.n	800e052 <_printf_float+0xc2>
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	464a      	mov	r2, r9
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	47b8      	blx	r7
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	f43f af27 	beq.w	800e04e <_printf_float+0xbe>
 800e200:	f108 0801 	add.w	r8, r8, #1
 800e204:	e7e6      	b.n	800e1d4 <_printf_float+0x244>
 800e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e208:	2b00      	cmp	r3, #0
 800e20a:	dc39      	bgt.n	800e280 <_printf_float+0x2f0>
 800e20c:	4a1b      	ldr	r2, [pc, #108]	; (800e27c <_printf_float+0x2ec>)
 800e20e:	2301      	movs	r3, #1
 800e210:	4631      	mov	r1, r6
 800e212:	4628      	mov	r0, r5
 800e214:	47b8      	blx	r7
 800e216:	3001      	adds	r0, #1
 800e218:	f43f af19 	beq.w	800e04e <_printf_float+0xbe>
 800e21c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e220:	4313      	orrs	r3, r2
 800e222:	d102      	bne.n	800e22a <_printf_float+0x29a>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	07d9      	lsls	r1, r3, #31
 800e228:	d5d8      	bpl.n	800e1dc <_printf_float+0x24c>
 800e22a:	ee18 3a10 	vmov	r3, s16
 800e22e:	4652      	mov	r2, sl
 800e230:	4631      	mov	r1, r6
 800e232:	4628      	mov	r0, r5
 800e234:	47b8      	blx	r7
 800e236:	3001      	adds	r0, #1
 800e238:	f43f af09 	beq.w	800e04e <_printf_float+0xbe>
 800e23c:	f04f 0900 	mov.w	r9, #0
 800e240:	f104 0a1a 	add.w	sl, r4, #26
 800e244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e246:	425b      	negs	r3, r3
 800e248:	454b      	cmp	r3, r9
 800e24a:	dc01      	bgt.n	800e250 <_printf_float+0x2c0>
 800e24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e24e:	e792      	b.n	800e176 <_printf_float+0x1e6>
 800e250:	2301      	movs	r3, #1
 800e252:	4652      	mov	r2, sl
 800e254:	4631      	mov	r1, r6
 800e256:	4628      	mov	r0, r5
 800e258:	47b8      	blx	r7
 800e25a:	3001      	adds	r0, #1
 800e25c:	f43f aef7 	beq.w	800e04e <_printf_float+0xbe>
 800e260:	f109 0901 	add.w	r9, r9, #1
 800e264:	e7ee      	b.n	800e244 <_printf_float+0x2b4>
 800e266:	bf00      	nop
 800e268:	7fefffff 	.word	0x7fefffff
 800e26c:	08013e40 	.word	0x08013e40
 800e270:	08013e44 	.word	0x08013e44
 800e274:	08013e48 	.word	0x08013e48
 800e278:	08013e4c 	.word	0x08013e4c
 800e27c:	08013e50 	.word	0x08013e50
 800e280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e284:	429a      	cmp	r2, r3
 800e286:	bfa8      	it	ge
 800e288:	461a      	movge	r2, r3
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	4691      	mov	r9, r2
 800e28e:	dc37      	bgt.n	800e300 <_printf_float+0x370>
 800e290:	f04f 0b00 	mov.w	fp, #0
 800e294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e298:	f104 021a 	add.w	r2, r4, #26
 800e29c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e29e:	9305      	str	r3, [sp, #20]
 800e2a0:	eba3 0309 	sub.w	r3, r3, r9
 800e2a4:	455b      	cmp	r3, fp
 800e2a6:	dc33      	bgt.n	800e310 <_printf_float+0x380>
 800e2a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	db3b      	blt.n	800e328 <_printf_float+0x398>
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	07da      	lsls	r2, r3, #31
 800e2b4:	d438      	bmi.n	800e328 <_printf_float+0x398>
 800e2b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e2ba:	eba2 0903 	sub.w	r9, r2, r3
 800e2be:	9b05      	ldr	r3, [sp, #20]
 800e2c0:	1ad2      	subs	r2, r2, r3
 800e2c2:	4591      	cmp	r9, r2
 800e2c4:	bfa8      	it	ge
 800e2c6:	4691      	movge	r9, r2
 800e2c8:	f1b9 0f00 	cmp.w	r9, #0
 800e2cc:	dc35      	bgt.n	800e33a <_printf_float+0x3aa>
 800e2ce:	f04f 0800 	mov.w	r8, #0
 800e2d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2d6:	f104 0a1a 	add.w	sl, r4, #26
 800e2da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2de:	1a9b      	subs	r3, r3, r2
 800e2e0:	eba3 0309 	sub.w	r3, r3, r9
 800e2e4:	4543      	cmp	r3, r8
 800e2e6:	f77f af79 	ble.w	800e1dc <_printf_float+0x24c>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	4652      	mov	r2, sl
 800e2ee:	4631      	mov	r1, r6
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	47b8      	blx	r7
 800e2f4:	3001      	adds	r0, #1
 800e2f6:	f43f aeaa 	beq.w	800e04e <_printf_float+0xbe>
 800e2fa:	f108 0801 	add.w	r8, r8, #1
 800e2fe:	e7ec      	b.n	800e2da <_printf_float+0x34a>
 800e300:	4613      	mov	r3, r2
 800e302:	4631      	mov	r1, r6
 800e304:	4642      	mov	r2, r8
 800e306:	4628      	mov	r0, r5
 800e308:	47b8      	blx	r7
 800e30a:	3001      	adds	r0, #1
 800e30c:	d1c0      	bne.n	800e290 <_printf_float+0x300>
 800e30e:	e69e      	b.n	800e04e <_printf_float+0xbe>
 800e310:	2301      	movs	r3, #1
 800e312:	4631      	mov	r1, r6
 800e314:	4628      	mov	r0, r5
 800e316:	9205      	str	r2, [sp, #20]
 800e318:	47b8      	blx	r7
 800e31a:	3001      	adds	r0, #1
 800e31c:	f43f ae97 	beq.w	800e04e <_printf_float+0xbe>
 800e320:	9a05      	ldr	r2, [sp, #20]
 800e322:	f10b 0b01 	add.w	fp, fp, #1
 800e326:	e7b9      	b.n	800e29c <_printf_float+0x30c>
 800e328:	ee18 3a10 	vmov	r3, s16
 800e32c:	4652      	mov	r2, sl
 800e32e:	4631      	mov	r1, r6
 800e330:	4628      	mov	r0, r5
 800e332:	47b8      	blx	r7
 800e334:	3001      	adds	r0, #1
 800e336:	d1be      	bne.n	800e2b6 <_printf_float+0x326>
 800e338:	e689      	b.n	800e04e <_printf_float+0xbe>
 800e33a:	9a05      	ldr	r2, [sp, #20]
 800e33c:	464b      	mov	r3, r9
 800e33e:	4442      	add	r2, r8
 800e340:	4631      	mov	r1, r6
 800e342:	4628      	mov	r0, r5
 800e344:	47b8      	blx	r7
 800e346:	3001      	adds	r0, #1
 800e348:	d1c1      	bne.n	800e2ce <_printf_float+0x33e>
 800e34a:	e680      	b.n	800e04e <_printf_float+0xbe>
 800e34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e34e:	2a01      	cmp	r2, #1
 800e350:	dc01      	bgt.n	800e356 <_printf_float+0x3c6>
 800e352:	07db      	lsls	r3, r3, #31
 800e354:	d53a      	bpl.n	800e3cc <_printf_float+0x43c>
 800e356:	2301      	movs	r3, #1
 800e358:	4642      	mov	r2, r8
 800e35a:	4631      	mov	r1, r6
 800e35c:	4628      	mov	r0, r5
 800e35e:	47b8      	blx	r7
 800e360:	3001      	adds	r0, #1
 800e362:	f43f ae74 	beq.w	800e04e <_printf_float+0xbe>
 800e366:	ee18 3a10 	vmov	r3, s16
 800e36a:	4652      	mov	r2, sl
 800e36c:	4631      	mov	r1, r6
 800e36e:	4628      	mov	r0, r5
 800e370:	47b8      	blx	r7
 800e372:	3001      	adds	r0, #1
 800e374:	f43f ae6b 	beq.w	800e04e <_printf_float+0xbe>
 800e378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e37c:	2200      	movs	r2, #0
 800e37e:	2300      	movs	r3, #0
 800e380:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e384:	f7f2 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e388:	b9d8      	cbnz	r0, 800e3c2 <_printf_float+0x432>
 800e38a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e38e:	f108 0201 	add.w	r2, r8, #1
 800e392:	4631      	mov	r1, r6
 800e394:	4628      	mov	r0, r5
 800e396:	47b8      	blx	r7
 800e398:	3001      	adds	r0, #1
 800e39a:	d10e      	bne.n	800e3ba <_printf_float+0x42a>
 800e39c:	e657      	b.n	800e04e <_printf_float+0xbe>
 800e39e:	2301      	movs	r3, #1
 800e3a0:	4652      	mov	r2, sl
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	47b8      	blx	r7
 800e3a8:	3001      	adds	r0, #1
 800e3aa:	f43f ae50 	beq.w	800e04e <_printf_float+0xbe>
 800e3ae:	f108 0801 	add.w	r8, r8, #1
 800e3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	4543      	cmp	r3, r8
 800e3b8:	dcf1      	bgt.n	800e39e <_printf_float+0x40e>
 800e3ba:	464b      	mov	r3, r9
 800e3bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e3c0:	e6da      	b.n	800e178 <_printf_float+0x1e8>
 800e3c2:	f04f 0800 	mov.w	r8, #0
 800e3c6:	f104 0a1a 	add.w	sl, r4, #26
 800e3ca:	e7f2      	b.n	800e3b2 <_printf_float+0x422>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	4642      	mov	r2, r8
 800e3d0:	e7df      	b.n	800e392 <_printf_float+0x402>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	464a      	mov	r2, r9
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b8      	blx	r7
 800e3dc:	3001      	adds	r0, #1
 800e3de:	f43f ae36 	beq.w	800e04e <_printf_float+0xbe>
 800e3e2:	f108 0801 	add.w	r8, r8, #1
 800e3e6:	68e3      	ldr	r3, [r4, #12]
 800e3e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ea:	1a5b      	subs	r3, r3, r1
 800e3ec:	4543      	cmp	r3, r8
 800e3ee:	dcf0      	bgt.n	800e3d2 <_printf_float+0x442>
 800e3f0:	e6f8      	b.n	800e1e4 <_printf_float+0x254>
 800e3f2:	f04f 0800 	mov.w	r8, #0
 800e3f6:	f104 0919 	add.w	r9, r4, #25
 800e3fa:	e7f4      	b.n	800e3e6 <_printf_float+0x456>

0800e3fc <_printf_common>:
 800e3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e400:	4616      	mov	r6, r2
 800e402:	4699      	mov	r9, r3
 800e404:	688a      	ldr	r2, [r1, #8]
 800e406:	690b      	ldr	r3, [r1, #16]
 800e408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e40c:	4293      	cmp	r3, r2
 800e40e:	bfb8      	it	lt
 800e410:	4613      	movlt	r3, r2
 800e412:	6033      	str	r3, [r6, #0]
 800e414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e418:	4607      	mov	r7, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	b10a      	cbz	r2, 800e422 <_printf_common+0x26>
 800e41e:	3301      	adds	r3, #1
 800e420:	6033      	str	r3, [r6, #0]
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	0699      	lsls	r1, r3, #26
 800e426:	bf42      	ittt	mi
 800e428:	6833      	ldrmi	r3, [r6, #0]
 800e42a:	3302      	addmi	r3, #2
 800e42c:	6033      	strmi	r3, [r6, #0]
 800e42e:	6825      	ldr	r5, [r4, #0]
 800e430:	f015 0506 	ands.w	r5, r5, #6
 800e434:	d106      	bne.n	800e444 <_printf_common+0x48>
 800e436:	f104 0a19 	add.w	sl, r4, #25
 800e43a:	68e3      	ldr	r3, [r4, #12]
 800e43c:	6832      	ldr	r2, [r6, #0]
 800e43e:	1a9b      	subs	r3, r3, r2
 800e440:	42ab      	cmp	r3, r5
 800e442:	dc26      	bgt.n	800e492 <_printf_common+0x96>
 800e444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e448:	1e13      	subs	r3, r2, #0
 800e44a:	6822      	ldr	r2, [r4, #0]
 800e44c:	bf18      	it	ne
 800e44e:	2301      	movne	r3, #1
 800e450:	0692      	lsls	r2, r2, #26
 800e452:	d42b      	bmi.n	800e4ac <_printf_common+0xb0>
 800e454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e458:	4649      	mov	r1, r9
 800e45a:	4638      	mov	r0, r7
 800e45c:	47c0      	blx	r8
 800e45e:	3001      	adds	r0, #1
 800e460:	d01e      	beq.n	800e4a0 <_printf_common+0xa4>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	6922      	ldr	r2, [r4, #16]
 800e466:	f003 0306 	and.w	r3, r3, #6
 800e46a:	2b04      	cmp	r3, #4
 800e46c:	bf02      	ittt	eq
 800e46e:	68e5      	ldreq	r5, [r4, #12]
 800e470:	6833      	ldreq	r3, [r6, #0]
 800e472:	1aed      	subeq	r5, r5, r3
 800e474:	68a3      	ldr	r3, [r4, #8]
 800e476:	bf0c      	ite	eq
 800e478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e47c:	2500      	movne	r5, #0
 800e47e:	4293      	cmp	r3, r2
 800e480:	bfc4      	itt	gt
 800e482:	1a9b      	subgt	r3, r3, r2
 800e484:	18ed      	addgt	r5, r5, r3
 800e486:	2600      	movs	r6, #0
 800e488:	341a      	adds	r4, #26
 800e48a:	42b5      	cmp	r5, r6
 800e48c:	d11a      	bne.n	800e4c4 <_printf_common+0xc8>
 800e48e:	2000      	movs	r0, #0
 800e490:	e008      	b.n	800e4a4 <_printf_common+0xa8>
 800e492:	2301      	movs	r3, #1
 800e494:	4652      	mov	r2, sl
 800e496:	4649      	mov	r1, r9
 800e498:	4638      	mov	r0, r7
 800e49a:	47c0      	blx	r8
 800e49c:	3001      	adds	r0, #1
 800e49e:	d103      	bne.n	800e4a8 <_printf_common+0xac>
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a8:	3501      	adds	r5, #1
 800e4aa:	e7c6      	b.n	800e43a <_printf_common+0x3e>
 800e4ac:	18e1      	adds	r1, r4, r3
 800e4ae:	1c5a      	adds	r2, r3, #1
 800e4b0:	2030      	movs	r0, #48	; 0x30
 800e4b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4b6:	4422      	add	r2, r4
 800e4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4c0:	3302      	adds	r3, #2
 800e4c2:	e7c7      	b.n	800e454 <_printf_common+0x58>
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	4649      	mov	r1, r9
 800e4ca:	4638      	mov	r0, r7
 800e4cc:	47c0      	blx	r8
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	d0e6      	beq.n	800e4a0 <_printf_common+0xa4>
 800e4d2:	3601      	adds	r6, #1
 800e4d4:	e7d9      	b.n	800e48a <_printf_common+0x8e>
	...

0800e4d8 <_printf_i>:
 800e4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4dc:	7e0f      	ldrb	r7, [r1, #24]
 800e4de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4e0:	2f78      	cmp	r7, #120	; 0x78
 800e4e2:	4691      	mov	r9, r2
 800e4e4:	4680      	mov	r8, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	469a      	mov	sl, r3
 800e4ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4ee:	d807      	bhi.n	800e500 <_printf_i+0x28>
 800e4f0:	2f62      	cmp	r7, #98	; 0x62
 800e4f2:	d80a      	bhi.n	800e50a <_printf_i+0x32>
 800e4f4:	2f00      	cmp	r7, #0
 800e4f6:	f000 80d4 	beq.w	800e6a2 <_printf_i+0x1ca>
 800e4fa:	2f58      	cmp	r7, #88	; 0x58
 800e4fc:	f000 80c0 	beq.w	800e680 <_printf_i+0x1a8>
 800e500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e508:	e03a      	b.n	800e580 <_printf_i+0xa8>
 800e50a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e50e:	2b15      	cmp	r3, #21
 800e510:	d8f6      	bhi.n	800e500 <_printf_i+0x28>
 800e512:	a101      	add	r1, pc, #4	; (adr r1, 800e518 <_printf_i+0x40>)
 800e514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e518:	0800e571 	.word	0x0800e571
 800e51c:	0800e585 	.word	0x0800e585
 800e520:	0800e501 	.word	0x0800e501
 800e524:	0800e501 	.word	0x0800e501
 800e528:	0800e501 	.word	0x0800e501
 800e52c:	0800e501 	.word	0x0800e501
 800e530:	0800e585 	.word	0x0800e585
 800e534:	0800e501 	.word	0x0800e501
 800e538:	0800e501 	.word	0x0800e501
 800e53c:	0800e501 	.word	0x0800e501
 800e540:	0800e501 	.word	0x0800e501
 800e544:	0800e689 	.word	0x0800e689
 800e548:	0800e5b1 	.word	0x0800e5b1
 800e54c:	0800e643 	.word	0x0800e643
 800e550:	0800e501 	.word	0x0800e501
 800e554:	0800e501 	.word	0x0800e501
 800e558:	0800e6ab 	.word	0x0800e6ab
 800e55c:	0800e501 	.word	0x0800e501
 800e560:	0800e5b1 	.word	0x0800e5b1
 800e564:	0800e501 	.word	0x0800e501
 800e568:	0800e501 	.word	0x0800e501
 800e56c:	0800e64b 	.word	0x0800e64b
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	1d1a      	adds	r2, r3, #4
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	602a      	str	r2, [r5, #0]
 800e578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e57c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e580:	2301      	movs	r3, #1
 800e582:	e09f      	b.n	800e6c4 <_printf_i+0x1ec>
 800e584:	6820      	ldr	r0, [r4, #0]
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	0607      	lsls	r7, r0, #24
 800e58a:	f103 0104 	add.w	r1, r3, #4
 800e58e:	6029      	str	r1, [r5, #0]
 800e590:	d501      	bpl.n	800e596 <_printf_i+0xbe>
 800e592:	681e      	ldr	r6, [r3, #0]
 800e594:	e003      	b.n	800e59e <_printf_i+0xc6>
 800e596:	0646      	lsls	r6, r0, #25
 800e598:	d5fb      	bpl.n	800e592 <_printf_i+0xba>
 800e59a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e59e:	2e00      	cmp	r6, #0
 800e5a0:	da03      	bge.n	800e5aa <_printf_i+0xd2>
 800e5a2:	232d      	movs	r3, #45	; 0x2d
 800e5a4:	4276      	negs	r6, r6
 800e5a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5aa:	485a      	ldr	r0, [pc, #360]	; (800e714 <_printf_i+0x23c>)
 800e5ac:	230a      	movs	r3, #10
 800e5ae:	e012      	b.n	800e5d6 <_printf_i+0xfe>
 800e5b0:	682b      	ldr	r3, [r5, #0]
 800e5b2:	6820      	ldr	r0, [r4, #0]
 800e5b4:	1d19      	adds	r1, r3, #4
 800e5b6:	6029      	str	r1, [r5, #0]
 800e5b8:	0605      	lsls	r5, r0, #24
 800e5ba:	d501      	bpl.n	800e5c0 <_printf_i+0xe8>
 800e5bc:	681e      	ldr	r6, [r3, #0]
 800e5be:	e002      	b.n	800e5c6 <_printf_i+0xee>
 800e5c0:	0641      	lsls	r1, r0, #25
 800e5c2:	d5fb      	bpl.n	800e5bc <_printf_i+0xe4>
 800e5c4:	881e      	ldrh	r6, [r3, #0]
 800e5c6:	4853      	ldr	r0, [pc, #332]	; (800e714 <_printf_i+0x23c>)
 800e5c8:	2f6f      	cmp	r7, #111	; 0x6f
 800e5ca:	bf0c      	ite	eq
 800e5cc:	2308      	moveq	r3, #8
 800e5ce:	230a      	movne	r3, #10
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5d6:	6865      	ldr	r5, [r4, #4]
 800e5d8:	60a5      	str	r5, [r4, #8]
 800e5da:	2d00      	cmp	r5, #0
 800e5dc:	bfa2      	ittt	ge
 800e5de:	6821      	ldrge	r1, [r4, #0]
 800e5e0:	f021 0104 	bicge.w	r1, r1, #4
 800e5e4:	6021      	strge	r1, [r4, #0]
 800e5e6:	b90e      	cbnz	r6, 800e5ec <_printf_i+0x114>
 800e5e8:	2d00      	cmp	r5, #0
 800e5ea:	d04b      	beq.n	800e684 <_printf_i+0x1ac>
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5f2:	fb03 6711 	mls	r7, r3, r1, r6
 800e5f6:	5dc7      	ldrb	r7, [r0, r7]
 800e5f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5fc:	4637      	mov	r7, r6
 800e5fe:	42bb      	cmp	r3, r7
 800e600:	460e      	mov	r6, r1
 800e602:	d9f4      	bls.n	800e5ee <_printf_i+0x116>
 800e604:	2b08      	cmp	r3, #8
 800e606:	d10b      	bne.n	800e620 <_printf_i+0x148>
 800e608:	6823      	ldr	r3, [r4, #0]
 800e60a:	07de      	lsls	r6, r3, #31
 800e60c:	d508      	bpl.n	800e620 <_printf_i+0x148>
 800e60e:	6923      	ldr	r3, [r4, #16]
 800e610:	6861      	ldr	r1, [r4, #4]
 800e612:	4299      	cmp	r1, r3
 800e614:	bfde      	ittt	le
 800e616:	2330      	movle	r3, #48	; 0x30
 800e618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e61c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e620:	1b52      	subs	r2, r2, r5
 800e622:	6122      	str	r2, [r4, #16]
 800e624:	f8cd a000 	str.w	sl, [sp]
 800e628:	464b      	mov	r3, r9
 800e62a:	aa03      	add	r2, sp, #12
 800e62c:	4621      	mov	r1, r4
 800e62e:	4640      	mov	r0, r8
 800e630:	f7ff fee4 	bl	800e3fc <_printf_common>
 800e634:	3001      	adds	r0, #1
 800e636:	d14a      	bne.n	800e6ce <_printf_i+0x1f6>
 800e638:	f04f 30ff 	mov.w	r0, #4294967295
 800e63c:	b004      	add	sp, #16
 800e63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	f043 0320 	orr.w	r3, r3, #32
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	4833      	ldr	r0, [pc, #204]	; (800e718 <_printf_i+0x240>)
 800e64c:	2778      	movs	r7, #120	; 0x78
 800e64e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	6829      	ldr	r1, [r5, #0]
 800e656:	061f      	lsls	r7, r3, #24
 800e658:	f851 6b04 	ldr.w	r6, [r1], #4
 800e65c:	d402      	bmi.n	800e664 <_printf_i+0x18c>
 800e65e:	065f      	lsls	r7, r3, #25
 800e660:	bf48      	it	mi
 800e662:	b2b6      	uxthmi	r6, r6
 800e664:	07df      	lsls	r7, r3, #31
 800e666:	bf48      	it	mi
 800e668:	f043 0320 	orrmi.w	r3, r3, #32
 800e66c:	6029      	str	r1, [r5, #0]
 800e66e:	bf48      	it	mi
 800e670:	6023      	strmi	r3, [r4, #0]
 800e672:	b91e      	cbnz	r6, 800e67c <_printf_i+0x1a4>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	f023 0320 	bic.w	r3, r3, #32
 800e67a:	6023      	str	r3, [r4, #0]
 800e67c:	2310      	movs	r3, #16
 800e67e:	e7a7      	b.n	800e5d0 <_printf_i+0xf8>
 800e680:	4824      	ldr	r0, [pc, #144]	; (800e714 <_printf_i+0x23c>)
 800e682:	e7e4      	b.n	800e64e <_printf_i+0x176>
 800e684:	4615      	mov	r5, r2
 800e686:	e7bd      	b.n	800e604 <_printf_i+0x12c>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	6826      	ldr	r6, [r4, #0]
 800e68c:	6961      	ldr	r1, [r4, #20]
 800e68e:	1d18      	adds	r0, r3, #4
 800e690:	6028      	str	r0, [r5, #0]
 800e692:	0635      	lsls	r5, r6, #24
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	d501      	bpl.n	800e69c <_printf_i+0x1c4>
 800e698:	6019      	str	r1, [r3, #0]
 800e69a:	e002      	b.n	800e6a2 <_printf_i+0x1ca>
 800e69c:	0670      	lsls	r0, r6, #25
 800e69e:	d5fb      	bpl.n	800e698 <_printf_i+0x1c0>
 800e6a0:	8019      	strh	r1, [r3, #0]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	6123      	str	r3, [r4, #16]
 800e6a6:	4615      	mov	r5, r2
 800e6a8:	e7bc      	b.n	800e624 <_printf_i+0x14c>
 800e6aa:	682b      	ldr	r3, [r5, #0]
 800e6ac:	1d1a      	adds	r2, r3, #4
 800e6ae:	602a      	str	r2, [r5, #0]
 800e6b0:	681d      	ldr	r5, [r3, #0]
 800e6b2:	6862      	ldr	r2, [r4, #4]
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	f7f1 fd8a 	bl	80001d0 <memchr>
 800e6bc:	b108      	cbz	r0, 800e6c2 <_printf_i+0x1ea>
 800e6be:	1b40      	subs	r0, r0, r5
 800e6c0:	6060      	str	r0, [r4, #4]
 800e6c2:	6863      	ldr	r3, [r4, #4]
 800e6c4:	6123      	str	r3, [r4, #16]
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6cc:	e7aa      	b.n	800e624 <_printf_i+0x14c>
 800e6ce:	6923      	ldr	r3, [r4, #16]
 800e6d0:	462a      	mov	r2, r5
 800e6d2:	4649      	mov	r1, r9
 800e6d4:	4640      	mov	r0, r8
 800e6d6:	47d0      	blx	sl
 800e6d8:	3001      	adds	r0, #1
 800e6da:	d0ad      	beq.n	800e638 <_printf_i+0x160>
 800e6dc:	6823      	ldr	r3, [r4, #0]
 800e6de:	079b      	lsls	r3, r3, #30
 800e6e0:	d413      	bmi.n	800e70a <_printf_i+0x232>
 800e6e2:	68e0      	ldr	r0, [r4, #12]
 800e6e4:	9b03      	ldr	r3, [sp, #12]
 800e6e6:	4298      	cmp	r0, r3
 800e6e8:	bfb8      	it	lt
 800e6ea:	4618      	movlt	r0, r3
 800e6ec:	e7a6      	b.n	800e63c <_printf_i+0x164>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	4632      	mov	r2, r6
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	4640      	mov	r0, r8
 800e6f6:	47d0      	blx	sl
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	d09d      	beq.n	800e638 <_printf_i+0x160>
 800e6fc:	3501      	adds	r5, #1
 800e6fe:	68e3      	ldr	r3, [r4, #12]
 800e700:	9903      	ldr	r1, [sp, #12]
 800e702:	1a5b      	subs	r3, r3, r1
 800e704:	42ab      	cmp	r3, r5
 800e706:	dcf2      	bgt.n	800e6ee <_printf_i+0x216>
 800e708:	e7eb      	b.n	800e6e2 <_printf_i+0x20a>
 800e70a:	2500      	movs	r5, #0
 800e70c:	f104 0619 	add.w	r6, r4, #25
 800e710:	e7f5      	b.n	800e6fe <_printf_i+0x226>
 800e712:	bf00      	nop
 800e714:	08013e52 	.word	0x08013e52
 800e718:	08013e63 	.word	0x08013e63

0800e71c <_scanf_float>:
 800e71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e720:	b087      	sub	sp, #28
 800e722:	4617      	mov	r7, r2
 800e724:	9303      	str	r3, [sp, #12]
 800e726:	688b      	ldr	r3, [r1, #8]
 800e728:	1e5a      	subs	r2, r3, #1
 800e72a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e72e:	bf83      	ittte	hi
 800e730:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e734:	195b      	addhi	r3, r3, r5
 800e736:	9302      	strhi	r3, [sp, #8]
 800e738:	2300      	movls	r3, #0
 800e73a:	bf86      	itte	hi
 800e73c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e740:	608b      	strhi	r3, [r1, #8]
 800e742:	9302      	strls	r3, [sp, #8]
 800e744:	680b      	ldr	r3, [r1, #0]
 800e746:	468b      	mov	fp, r1
 800e748:	2500      	movs	r5, #0
 800e74a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e74e:	f84b 3b1c 	str.w	r3, [fp], #28
 800e752:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e756:	4680      	mov	r8, r0
 800e758:	460c      	mov	r4, r1
 800e75a:	465e      	mov	r6, fp
 800e75c:	46aa      	mov	sl, r5
 800e75e:	46a9      	mov	r9, r5
 800e760:	9501      	str	r5, [sp, #4]
 800e762:	68a2      	ldr	r2, [r4, #8]
 800e764:	b152      	cbz	r2, 800e77c <_scanf_float+0x60>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	2b4e      	cmp	r3, #78	; 0x4e
 800e76c:	d864      	bhi.n	800e838 <_scanf_float+0x11c>
 800e76e:	2b40      	cmp	r3, #64	; 0x40
 800e770:	d83c      	bhi.n	800e7ec <_scanf_float+0xd0>
 800e772:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e776:	b2c8      	uxtb	r0, r1
 800e778:	280e      	cmp	r0, #14
 800e77a:	d93a      	bls.n	800e7f2 <_scanf_float+0xd6>
 800e77c:	f1b9 0f00 	cmp.w	r9, #0
 800e780:	d003      	beq.n	800e78a <_scanf_float+0x6e>
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e78e:	f1ba 0f01 	cmp.w	sl, #1
 800e792:	f200 8113 	bhi.w	800e9bc <_scanf_float+0x2a0>
 800e796:	455e      	cmp	r6, fp
 800e798:	f200 8105 	bhi.w	800e9a6 <_scanf_float+0x28a>
 800e79c:	2501      	movs	r5, #1
 800e79e:	4628      	mov	r0, r5
 800e7a0:	b007      	add	sp, #28
 800e7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e7aa:	2a0d      	cmp	r2, #13
 800e7ac:	d8e6      	bhi.n	800e77c <_scanf_float+0x60>
 800e7ae:	a101      	add	r1, pc, #4	; (adr r1, 800e7b4 <_scanf_float+0x98>)
 800e7b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e7b4:	0800e8f3 	.word	0x0800e8f3
 800e7b8:	0800e77d 	.word	0x0800e77d
 800e7bc:	0800e77d 	.word	0x0800e77d
 800e7c0:	0800e77d 	.word	0x0800e77d
 800e7c4:	0800e953 	.word	0x0800e953
 800e7c8:	0800e92b 	.word	0x0800e92b
 800e7cc:	0800e77d 	.word	0x0800e77d
 800e7d0:	0800e77d 	.word	0x0800e77d
 800e7d4:	0800e901 	.word	0x0800e901
 800e7d8:	0800e77d 	.word	0x0800e77d
 800e7dc:	0800e77d 	.word	0x0800e77d
 800e7e0:	0800e77d 	.word	0x0800e77d
 800e7e4:	0800e77d 	.word	0x0800e77d
 800e7e8:	0800e8b9 	.word	0x0800e8b9
 800e7ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e7f0:	e7db      	b.n	800e7aa <_scanf_float+0x8e>
 800e7f2:	290e      	cmp	r1, #14
 800e7f4:	d8c2      	bhi.n	800e77c <_scanf_float+0x60>
 800e7f6:	a001      	add	r0, pc, #4	; (adr r0, 800e7fc <_scanf_float+0xe0>)
 800e7f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e7fc:	0800e8ab 	.word	0x0800e8ab
 800e800:	0800e77d 	.word	0x0800e77d
 800e804:	0800e8ab 	.word	0x0800e8ab
 800e808:	0800e93f 	.word	0x0800e93f
 800e80c:	0800e77d 	.word	0x0800e77d
 800e810:	0800e859 	.word	0x0800e859
 800e814:	0800e895 	.word	0x0800e895
 800e818:	0800e895 	.word	0x0800e895
 800e81c:	0800e895 	.word	0x0800e895
 800e820:	0800e895 	.word	0x0800e895
 800e824:	0800e895 	.word	0x0800e895
 800e828:	0800e895 	.word	0x0800e895
 800e82c:	0800e895 	.word	0x0800e895
 800e830:	0800e895 	.word	0x0800e895
 800e834:	0800e895 	.word	0x0800e895
 800e838:	2b6e      	cmp	r3, #110	; 0x6e
 800e83a:	d809      	bhi.n	800e850 <_scanf_float+0x134>
 800e83c:	2b60      	cmp	r3, #96	; 0x60
 800e83e:	d8b2      	bhi.n	800e7a6 <_scanf_float+0x8a>
 800e840:	2b54      	cmp	r3, #84	; 0x54
 800e842:	d077      	beq.n	800e934 <_scanf_float+0x218>
 800e844:	2b59      	cmp	r3, #89	; 0x59
 800e846:	d199      	bne.n	800e77c <_scanf_float+0x60>
 800e848:	2d07      	cmp	r5, #7
 800e84a:	d197      	bne.n	800e77c <_scanf_float+0x60>
 800e84c:	2508      	movs	r5, #8
 800e84e:	e029      	b.n	800e8a4 <_scanf_float+0x188>
 800e850:	2b74      	cmp	r3, #116	; 0x74
 800e852:	d06f      	beq.n	800e934 <_scanf_float+0x218>
 800e854:	2b79      	cmp	r3, #121	; 0x79
 800e856:	e7f6      	b.n	800e846 <_scanf_float+0x12a>
 800e858:	6821      	ldr	r1, [r4, #0]
 800e85a:	05c8      	lsls	r0, r1, #23
 800e85c:	d51a      	bpl.n	800e894 <_scanf_float+0x178>
 800e85e:	9b02      	ldr	r3, [sp, #8]
 800e860:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e864:	6021      	str	r1, [r4, #0]
 800e866:	f109 0901 	add.w	r9, r9, #1
 800e86a:	b11b      	cbz	r3, 800e874 <_scanf_float+0x158>
 800e86c:	3b01      	subs	r3, #1
 800e86e:	3201      	adds	r2, #1
 800e870:	9302      	str	r3, [sp, #8]
 800e872:	60a2      	str	r2, [r4, #8]
 800e874:	68a3      	ldr	r3, [r4, #8]
 800e876:	3b01      	subs	r3, #1
 800e878:	60a3      	str	r3, [r4, #8]
 800e87a:	6923      	ldr	r3, [r4, #16]
 800e87c:	3301      	adds	r3, #1
 800e87e:	6123      	str	r3, [r4, #16]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	3b01      	subs	r3, #1
 800e884:	2b00      	cmp	r3, #0
 800e886:	607b      	str	r3, [r7, #4]
 800e888:	f340 8084 	ble.w	800e994 <_scanf_float+0x278>
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	3301      	adds	r3, #1
 800e890:	603b      	str	r3, [r7, #0]
 800e892:	e766      	b.n	800e762 <_scanf_float+0x46>
 800e894:	eb1a 0f05 	cmn.w	sl, r5
 800e898:	f47f af70 	bne.w	800e77c <_scanf_float+0x60>
 800e89c:	6822      	ldr	r2, [r4, #0]
 800e89e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e8a2:	6022      	str	r2, [r4, #0]
 800e8a4:	f806 3b01 	strb.w	r3, [r6], #1
 800e8a8:	e7e4      	b.n	800e874 <_scanf_float+0x158>
 800e8aa:	6822      	ldr	r2, [r4, #0]
 800e8ac:	0610      	lsls	r0, r2, #24
 800e8ae:	f57f af65 	bpl.w	800e77c <_scanf_float+0x60>
 800e8b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e8b6:	e7f4      	b.n	800e8a2 <_scanf_float+0x186>
 800e8b8:	f1ba 0f00 	cmp.w	sl, #0
 800e8bc:	d10e      	bne.n	800e8dc <_scanf_float+0x1c0>
 800e8be:	f1b9 0f00 	cmp.w	r9, #0
 800e8c2:	d10e      	bne.n	800e8e2 <_scanf_float+0x1c6>
 800e8c4:	6822      	ldr	r2, [r4, #0]
 800e8c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e8ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e8ce:	d108      	bne.n	800e8e2 <_scanf_float+0x1c6>
 800e8d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e8d4:	6022      	str	r2, [r4, #0]
 800e8d6:	f04f 0a01 	mov.w	sl, #1
 800e8da:	e7e3      	b.n	800e8a4 <_scanf_float+0x188>
 800e8dc:	f1ba 0f02 	cmp.w	sl, #2
 800e8e0:	d055      	beq.n	800e98e <_scanf_float+0x272>
 800e8e2:	2d01      	cmp	r5, #1
 800e8e4:	d002      	beq.n	800e8ec <_scanf_float+0x1d0>
 800e8e6:	2d04      	cmp	r5, #4
 800e8e8:	f47f af48 	bne.w	800e77c <_scanf_float+0x60>
 800e8ec:	3501      	adds	r5, #1
 800e8ee:	b2ed      	uxtb	r5, r5
 800e8f0:	e7d8      	b.n	800e8a4 <_scanf_float+0x188>
 800e8f2:	f1ba 0f01 	cmp.w	sl, #1
 800e8f6:	f47f af41 	bne.w	800e77c <_scanf_float+0x60>
 800e8fa:	f04f 0a02 	mov.w	sl, #2
 800e8fe:	e7d1      	b.n	800e8a4 <_scanf_float+0x188>
 800e900:	b97d      	cbnz	r5, 800e922 <_scanf_float+0x206>
 800e902:	f1b9 0f00 	cmp.w	r9, #0
 800e906:	f47f af3c 	bne.w	800e782 <_scanf_float+0x66>
 800e90a:	6822      	ldr	r2, [r4, #0]
 800e90c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e910:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e914:	f47f af39 	bne.w	800e78a <_scanf_float+0x6e>
 800e918:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e91c:	6022      	str	r2, [r4, #0]
 800e91e:	2501      	movs	r5, #1
 800e920:	e7c0      	b.n	800e8a4 <_scanf_float+0x188>
 800e922:	2d03      	cmp	r5, #3
 800e924:	d0e2      	beq.n	800e8ec <_scanf_float+0x1d0>
 800e926:	2d05      	cmp	r5, #5
 800e928:	e7de      	b.n	800e8e8 <_scanf_float+0x1cc>
 800e92a:	2d02      	cmp	r5, #2
 800e92c:	f47f af26 	bne.w	800e77c <_scanf_float+0x60>
 800e930:	2503      	movs	r5, #3
 800e932:	e7b7      	b.n	800e8a4 <_scanf_float+0x188>
 800e934:	2d06      	cmp	r5, #6
 800e936:	f47f af21 	bne.w	800e77c <_scanf_float+0x60>
 800e93a:	2507      	movs	r5, #7
 800e93c:	e7b2      	b.n	800e8a4 <_scanf_float+0x188>
 800e93e:	6822      	ldr	r2, [r4, #0]
 800e940:	0591      	lsls	r1, r2, #22
 800e942:	f57f af1b 	bpl.w	800e77c <_scanf_float+0x60>
 800e946:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e94a:	6022      	str	r2, [r4, #0]
 800e94c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e950:	e7a8      	b.n	800e8a4 <_scanf_float+0x188>
 800e952:	6822      	ldr	r2, [r4, #0]
 800e954:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e958:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e95c:	d006      	beq.n	800e96c <_scanf_float+0x250>
 800e95e:	0550      	lsls	r0, r2, #21
 800e960:	f57f af0c 	bpl.w	800e77c <_scanf_float+0x60>
 800e964:	f1b9 0f00 	cmp.w	r9, #0
 800e968:	f43f af0f 	beq.w	800e78a <_scanf_float+0x6e>
 800e96c:	0591      	lsls	r1, r2, #22
 800e96e:	bf58      	it	pl
 800e970:	9901      	ldrpl	r1, [sp, #4]
 800e972:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e976:	bf58      	it	pl
 800e978:	eba9 0101 	subpl.w	r1, r9, r1
 800e97c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e980:	bf58      	it	pl
 800e982:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e986:	6022      	str	r2, [r4, #0]
 800e988:	f04f 0900 	mov.w	r9, #0
 800e98c:	e78a      	b.n	800e8a4 <_scanf_float+0x188>
 800e98e:	f04f 0a03 	mov.w	sl, #3
 800e992:	e787      	b.n	800e8a4 <_scanf_float+0x188>
 800e994:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e998:	4639      	mov	r1, r7
 800e99a:	4640      	mov	r0, r8
 800e99c:	4798      	blx	r3
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f43f aedf 	beq.w	800e762 <_scanf_float+0x46>
 800e9a4:	e6ea      	b.n	800e77c <_scanf_float+0x60>
 800e9a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e9ae:	463a      	mov	r2, r7
 800e9b0:	4640      	mov	r0, r8
 800e9b2:	4798      	blx	r3
 800e9b4:	6923      	ldr	r3, [r4, #16]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	6123      	str	r3, [r4, #16]
 800e9ba:	e6ec      	b.n	800e796 <_scanf_float+0x7a>
 800e9bc:	1e6b      	subs	r3, r5, #1
 800e9be:	2b06      	cmp	r3, #6
 800e9c0:	d825      	bhi.n	800ea0e <_scanf_float+0x2f2>
 800e9c2:	2d02      	cmp	r5, #2
 800e9c4:	d836      	bhi.n	800ea34 <_scanf_float+0x318>
 800e9c6:	455e      	cmp	r6, fp
 800e9c8:	f67f aee8 	bls.w	800e79c <_scanf_float+0x80>
 800e9cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e9d4:	463a      	mov	r2, r7
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	4798      	blx	r3
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	6123      	str	r3, [r4, #16]
 800e9e0:	e7f1      	b.n	800e9c6 <_scanf_float+0x2aa>
 800e9e2:	9802      	ldr	r0, [sp, #8]
 800e9e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e9ec:	9002      	str	r0, [sp, #8]
 800e9ee:	463a      	mov	r2, r7
 800e9f0:	4640      	mov	r0, r8
 800e9f2:	4798      	blx	r3
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	6123      	str	r3, [r4, #16]
 800e9fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9fe:	fa5f fa8a 	uxtb.w	sl, sl
 800ea02:	f1ba 0f02 	cmp.w	sl, #2
 800ea06:	d1ec      	bne.n	800e9e2 <_scanf_float+0x2c6>
 800ea08:	3d03      	subs	r5, #3
 800ea0a:	b2ed      	uxtb	r5, r5
 800ea0c:	1b76      	subs	r6, r6, r5
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	05da      	lsls	r2, r3, #23
 800ea12:	d52f      	bpl.n	800ea74 <_scanf_float+0x358>
 800ea14:	055b      	lsls	r3, r3, #21
 800ea16:	d510      	bpl.n	800ea3a <_scanf_float+0x31e>
 800ea18:	455e      	cmp	r6, fp
 800ea1a:	f67f aebf 	bls.w	800e79c <_scanf_float+0x80>
 800ea1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea26:	463a      	mov	r2, r7
 800ea28:	4640      	mov	r0, r8
 800ea2a:	4798      	blx	r3
 800ea2c:	6923      	ldr	r3, [r4, #16]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	6123      	str	r3, [r4, #16]
 800ea32:	e7f1      	b.n	800ea18 <_scanf_float+0x2fc>
 800ea34:	46aa      	mov	sl, r5
 800ea36:	9602      	str	r6, [sp, #8]
 800ea38:	e7df      	b.n	800e9fa <_scanf_float+0x2de>
 800ea3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ea3e:	6923      	ldr	r3, [r4, #16]
 800ea40:	2965      	cmp	r1, #101	; 0x65
 800ea42:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea46:	f106 35ff 	add.w	r5, r6, #4294967295
 800ea4a:	6123      	str	r3, [r4, #16]
 800ea4c:	d00c      	beq.n	800ea68 <_scanf_float+0x34c>
 800ea4e:	2945      	cmp	r1, #69	; 0x45
 800ea50:	d00a      	beq.n	800ea68 <_scanf_float+0x34c>
 800ea52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea56:	463a      	mov	r2, r7
 800ea58:	4640      	mov	r0, r8
 800ea5a:	4798      	blx	r3
 800ea5c:	6923      	ldr	r3, [r4, #16]
 800ea5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ea62:	3b01      	subs	r3, #1
 800ea64:	1eb5      	subs	r5, r6, #2
 800ea66:	6123      	str	r3, [r4, #16]
 800ea68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea6c:	463a      	mov	r2, r7
 800ea6e:	4640      	mov	r0, r8
 800ea70:	4798      	blx	r3
 800ea72:	462e      	mov	r6, r5
 800ea74:	6825      	ldr	r5, [r4, #0]
 800ea76:	f015 0510 	ands.w	r5, r5, #16
 800ea7a:	d158      	bne.n	800eb2e <_scanf_float+0x412>
 800ea7c:	7035      	strb	r5, [r6, #0]
 800ea7e:	6823      	ldr	r3, [r4, #0]
 800ea80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ea84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea88:	d11c      	bne.n	800eac4 <_scanf_float+0x3a8>
 800ea8a:	9b01      	ldr	r3, [sp, #4]
 800ea8c:	454b      	cmp	r3, r9
 800ea8e:	eba3 0209 	sub.w	r2, r3, r9
 800ea92:	d124      	bne.n	800eade <_scanf_float+0x3c2>
 800ea94:	2200      	movs	r2, #0
 800ea96:	4659      	mov	r1, fp
 800ea98:	4640      	mov	r0, r8
 800ea9a:	f002 fc31 	bl	8011300 <_strtod_r>
 800ea9e:	9b03      	ldr	r3, [sp, #12]
 800eaa0:	6821      	ldr	r1, [r4, #0]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f011 0f02 	tst.w	r1, #2
 800eaa8:	ec57 6b10 	vmov	r6, r7, d0
 800eaac:	f103 0204 	add.w	r2, r3, #4
 800eab0:	d020      	beq.n	800eaf4 <_scanf_float+0x3d8>
 800eab2:	9903      	ldr	r1, [sp, #12]
 800eab4:	600a      	str	r2, [r1, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	e9c3 6700 	strd	r6, r7, [r3]
 800eabc:	68e3      	ldr	r3, [r4, #12]
 800eabe:	3301      	adds	r3, #1
 800eac0:	60e3      	str	r3, [r4, #12]
 800eac2:	e66c      	b.n	800e79e <_scanf_float+0x82>
 800eac4:	9b04      	ldr	r3, [sp, #16]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d0e4      	beq.n	800ea94 <_scanf_float+0x378>
 800eaca:	9905      	ldr	r1, [sp, #20]
 800eacc:	230a      	movs	r3, #10
 800eace:	462a      	mov	r2, r5
 800ead0:	3101      	adds	r1, #1
 800ead2:	4640      	mov	r0, r8
 800ead4:	f002 fc9c 	bl	8011410 <_strtol_r>
 800ead8:	9b04      	ldr	r3, [sp, #16]
 800eada:	9e05      	ldr	r6, [sp, #20]
 800eadc:	1ac2      	subs	r2, r0, r3
 800eade:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eae2:	429e      	cmp	r6, r3
 800eae4:	bf28      	it	cs
 800eae6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800eaea:	4912      	ldr	r1, [pc, #72]	; (800eb34 <_scanf_float+0x418>)
 800eaec:	4630      	mov	r0, r6
 800eaee:	f000 f8e7 	bl	800ecc0 <siprintf>
 800eaf2:	e7cf      	b.n	800ea94 <_scanf_float+0x378>
 800eaf4:	f011 0f04 	tst.w	r1, #4
 800eaf8:	9903      	ldr	r1, [sp, #12]
 800eafa:	600a      	str	r2, [r1, #0]
 800eafc:	d1db      	bne.n	800eab6 <_scanf_float+0x39a>
 800eafe:	f8d3 8000 	ldr.w	r8, [r3]
 800eb02:	ee10 2a10 	vmov	r2, s0
 800eb06:	ee10 0a10 	vmov	r0, s0
 800eb0a:	463b      	mov	r3, r7
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	f7f2 f80d 	bl	8000b2c <__aeabi_dcmpun>
 800eb12:	b128      	cbz	r0, 800eb20 <_scanf_float+0x404>
 800eb14:	4808      	ldr	r0, [pc, #32]	; (800eb38 <_scanf_float+0x41c>)
 800eb16:	f000 f9b7 	bl	800ee88 <nanf>
 800eb1a:	ed88 0a00 	vstr	s0, [r8]
 800eb1e:	e7cd      	b.n	800eabc <_scanf_float+0x3a0>
 800eb20:	4630      	mov	r0, r6
 800eb22:	4639      	mov	r1, r7
 800eb24:	f7f2 f860 	bl	8000be8 <__aeabi_d2f>
 800eb28:	f8c8 0000 	str.w	r0, [r8]
 800eb2c:	e7c6      	b.n	800eabc <_scanf_float+0x3a0>
 800eb2e:	2500      	movs	r5, #0
 800eb30:	e635      	b.n	800e79e <_scanf_float+0x82>
 800eb32:	bf00      	nop
 800eb34:	08013e74 	.word	0x08013e74
 800eb38:	08014205 	.word	0x08014205

0800eb3c <std>:
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	b510      	push	{r4, lr}
 800eb40:	4604      	mov	r4, r0
 800eb42:	e9c0 3300 	strd	r3, r3, [r0]
 800eb46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb4a:	6083      	str	r3, [r0, #8]
 800eb4c:	8181      	strh	r1, [r0, #12]
 800eb4e:	6643      	str	r3, [r0, #100]	; 0x64
 800eb50:	81c2      	strh	r2, [r0, #14]
 800eb52:	6183      	str	r3, [r0, #24]
 800eb54:	4619      	mov	r1, r3
 800eb56:	2208      	movs	r2, #8
 800eb58:	305c      	adds	r0, #92	; 0x5c
 800eb5a:	f000 f914 	bl	800ed86 <memset>
 800eb5e:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <std+0x58>)
 800eb60:	6263      	str	r3, [r4, #36]	; 0x24
 800eb62:	4b0d      	ldr	r3, [pc, #52]	; (800eb98 <std+0x5c>)
 800eb64:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb66:	4b0d      	ldr	r3, [pc, #52]	; (800eb9c <std+0x60>)
 800eb68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb6a:	4b0d      	ldr	r3, [pc, #52]	; (800eba0 <std+0x64>)
 800eb6c:	6323      	str	r3, [r4, #48]	; 0x30
 800eb6e:	4b0d      	ldr	r3, [pc, #52]	; (800eba4 <std+0x68>)
 800eb70:	6224      	str	r4, [r4, #32]
 800eb72:	429c      	cmp	r4, r3
 800eb74:	d006      	beq.n	800eb84 <std+0x48>
 800eb76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800eb7a:	4294      	cmp	r4, r2
 800eb7c:	d002      	beq.n	800eb84 <std+0x48>
 800eb7e:	33d0      	adds	r3, #208	; 0xd0
 800eb80:	429c      	cmp	r4, r3
 800eb82:	d105      	bne.n	800eb90 <std+0x54>
 800eb84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb8c:	f000 b978 	b.w	800ee80 <__retarget_lock_init_recursive>
 800eb90:	bd10      	pop	{r4, pc}
 800eb92:	bf00      	nop
 800eb94:	0800ed01 	.word	0x0800ed01
 800eb98:	0800ed23 	.word	0x0800ed23
 800eb9c:	0800ed5b 	.word	0x0800ed5b
 800eba0:	0800ed7f 	.word	0x0800ed7f
 800eba4:	20002214 	.word	0x20002214

0800eba8 <stdio_exit_handler>:
 800eba8:	4a02      	ldr	r2, [pc, #8]	; (800ebb4 <stdio_exit_handler+0xc>)
 800ebaa:	4903      	ldr	r1, [pc, #12]	; (800ebb8 <stdio_exit_handler+0x10>)
 800ebac:	4803      	ldr	r0, [pc, #12]	; (800ebbc <stdio_exit_handler+0x14>)
 800ebae:	f000 b869 	b.w	800ec84 <_fwalk_sglue>
 800ebb2:	bf00      	nop
 800ebb4:	2000019c 	.word	0x2000019c
 800ebb8:	080117d1 	.word	0x080117d1
 800ebbc:	200001a8 	.word	0x200001a8

0800ebc0 <cleanup_stdio>:
 800ebc0:	6841      	ldr	r1, [r0, #4]
 800ebc2:	4b0c      	ldr	r3, [pc, #48]	; (800ebf4 <cleanup_stdio+0x34>)
 800ebc4:	4299      	cmp	r1, r3
 800ebc6:	b510      	push	{r4, lr}
 800ebc8:	4604      	mov	r4, r0
 800ebca:	d001      	beq.n	800ebd0 <cleanup_stdio+0x10>
 800ebcc:	f002 fe00 	bl	80117d0 <_fflush_r>
 800ebd0:	68a1      	ldr	r1, [r4, #8]
 800ebd2:	4b09      	ldr	r3, [pc, #36]	; (800ebf8 <cleanup_stdio+0x38>)
 800ebd4:	4299      	cmp	r1, r3
 800ebd6:	d002      	beq.n	800ebde <cleanup_stdio+0x1e>
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f002 fdf9 	bl	80117d0 <_fflush_r>
 800ebde:	68e1      	ldr	r1, [r4, #12]
 800ebe0:	4b06      	ldr	r3, [pc, #24]	; (800ebfc <cleanup_stdio+0x3c>)
 800ebe2:	4299      	cmp	r1, r3
 800ebe4:	d004      	beq.n	800ebf0 <cleanup_stdio+0x30>
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebec:	f002 bdf0 	b.w	80117d0 <_fflush_r>
 800ebf0:	bd10      	pop	{r4, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20002214 	.word	0x20002214
 800ebf8:	2000227c 	.word	0x2000227c
 800ebfc:	200022e4 	.word	0x200022e4

0800ec00 <global_stdio_init.part.0>:
 800ec00:	b510      	push	{r4, lr}
 800ec02:	4b0b      	ldr	r3, [pc, #44]	; (800ec30 <global_stdio_init.part.0+0x30>)
 800ec04:	4c0b      	ldr	r4, [pc, #44]	; (800ec34 <global_stdio_init.part.0+0x34>)
 800ec06:	4a0c      	ldr	r2, [pc, #48]	; (800ec38 <global_stdio_init.part.0+0x38>)
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2104      	movs	r1, #4
 800ec10:	f7ff ff94 	bl	800eb3c <std>
 800ec14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ec18:	2201      	movs	r2, #1
 800ec1a:	2109      	movs	r1, #9
 800ec1c:	f7ff ff8e 	bl	800eb3c <std>
 800ec20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ec24:	2202      	movs	r2, #2
 800ec26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec2a:	2112      	movs	r1, #18
 800ec2c:	f7ff bf86 	b.w	800eb3c <std>
 800ec30:	2000234c 	.word	0x2000234c
 800ec34:	20002214 	.word	0x20002214
 800ec38:	0800eba9 	.word	0x0800eba9

0800ec3c <__sfp_lock_acquire>:
 800ec3c:	4801      	ldr	r0, [pc, #4]	; (800ec44 <__sfp_lock_acquire+0x8>)
 800ec3e:	f000 b920 	b.w	800ee82 <__retarget_lock_acquire_recursive>
 800ec42:	bf00      	nop
 800ec44:	20002355 	.word	0x20002355

0800ec48 <__sfp_lock_release>:
 800ec48:	4801      	ldr	r0, [pc, #4]	; (800ec50 <__sfp_lock_release+0x8>)
 800ec4a:	f000 b91b 	b.w	800ee84 <__retarget_lock_release_recursive>
 800ec4e:	bf00      	nop
 800ec50:	20002355 	.word	0x20002355

0800ec54 <__sinit>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	4604      	mov	r4, r0
 800ec58:	f7ff fff0 	bl	800ec3c <__sfp_lock_acquire>
 800ec5c:	6a23      	ldr	r3, [r4, #32]
 800ec5e:	b11b      	cbz	r3, 800ec68 <__sinit+0x14>
 800ec60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec64:	f7ff bff0 	b.w	800ec48 <__sfp_lock_release>
 800ec68:	4b04      	ldr	r3, [pc, #16]	; (800ec7c <__sinit+0x28>)
 800ec6a:	6223      	str	r3, [r4, #32]
 800ec6c:	4b04      	ldr	r3, [pc, #16]	; (800ec80 <__sinit+0x2c>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1f5      	bne.n	800ec60 <__sinit+0xc>
 800ec74:	f7ff ffc4 	bl	800ec00 <global_stdio_init.part.0>
 800ec78:	e7f2      	b.n	800ec60 <__sinit+0xc>
 800ec7a:	bf00      	nop
 800ec7c:	0800ebc1 	.word	0x0800ebc1
 800ec80:	2000234c 	.word	0x2000234c

0800ec84 <_fwalk_sglue>:
 800ec84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec88:	4607      	mov	r7, r0
 800ec8a:	4688      	mov	r8, r1
 800ec8c:	4614      	mov	r4, r2
 800ec8e:	2600      	movs	r6, #0
 800ec90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec94:	f1b9 0901 	subs.w	r9, r9, #1
 800ec98:	d505      	bpl.n	800eca6 <_fwalk_sglue+0x22>
 800ec9a:	6824      	ldr	r4, [r4, #0]
 800ec9c:	2c00      	cmp	r4, #0
 800ec9e:	d1f7      	bne.n	800ec90 <_fwalk_sglue+0xc>
 800eca0:	4630      	mov	r0, r6
 800eca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eca6:	89ab      	ldrh	r3, [r5, #12]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d907      	bls.n	800ecbc <_fwalk_sglue+0x38>
 800ecac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	d003      	beq.n	800ecbc <_fwalk_sglue+0x38>
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	47c0      	blx	r8
 800ecba:	4306      	orrs	r6, r0
 800ecbc:	3568      	adds	r5, #104	; 0x68
 800ecbe:	e7e9      	b.n	800ec94 <_fwalk_sglue+0x10>

0800ecc0 <siprintf>:
 800ecc0:	b40e      	push	{r1, r2, r3}
 800ecc2:	b500      	push	{lr}
 800ecc4:	b09c      	sub	sp, #112	; 0x70
 800ecc6:	ab1d      	add	r3, sp, #116	; 0x74
 800ecc8:	9002      	str	r0, [sp, #8]
 800ecca:	9006      	str	r0, [sp, #24]
 800eccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ecd0:	4809      	ldr	r0, [pc, #36]	; (800ecf8 <siprintf+0x38>)
 800ecd2:	9107      	str	r1, [sp, #28]
 800ecd4:	9104      	str	r1, [sp, #16]
 800ecd6:	4909      	ldr	r1, [pc, #36]	; (800ecfc <siprintf+0x3c>)
 800ecd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecdc:	9105      	str	r1, [sp, #20]
 800ecde:	6800      	ldr	r0, [r0, #0]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	a902      	add	r1, sp, #8
 800ece4:	f002 fbf0 	bl	80114c8 <_svfiprintf_r>
 800ece8:	9b02      	ldr	r3, [sp, #8]
 800ecea:	2200      	movs	r2, #0
 800ecec:	701a      	strb	r2, [r3, #0]
 800ecee:	b01c      	add	sp, #112	; 0x70
 800ecf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf4:	b003      	add	sp, #12
 800ecf6:	4770      	bx	lr
 800ecf8:	200001f4 	.word	0x200001f4
 800ecfc:	ffff0208 	.word	0xffff0208

0800ed00 <__sread>:
 800ed00:	b510      	push	{r4, lr}
 800ed02:	460c      	mov	r4, r1
 800ed04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed08:	f000 f86c 	bl	800ede4 <_read_r>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	bfab      	itete	ge
 800ed10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed12:	89a3      	ldrhlt	r3, [r4, #12]
 800ed14:	181b      	addge	r3, r3, r0
 800ed16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed1a:	bfac      	ite	ge
 800ed1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed1e:	81a3      	strhlt	r3, [r4, #12]
 800ed20:	bd10      	pop	{r4, pc}

0800ed22 <__swrite>:
 800ed22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed26:	461f      	mov	r7, r3
 800ed28:	898b      	ldrh	r3, [r1, #12]
 800ed2a:	05db      	lsls	r3, r3, #23
 800ed2c:	4605      	mov	r5, r0
 800ed2e:	460c      	mov	r4, r1
 800ed30:	4616      	mov	r6, r2
 800ed32:	d505      	bpl.n	800ed40 <__swrite+0x1e>
 800ed34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed38:	2302      	movs	r3, #2
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f000 f840 	bl	800edc0 <_lseek_r>
 800ed40:	89a3      	ldrh	r3, [r4, #12]
 800ed42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed4a:	81a3      	strh	r3, [r4, #12]
 800ed4c:	4632      	mov	r2, r6
 800ed4e:	463b      	mov	r3, r7
 800ed50:	4628      	mov	r0, r5
 800ed52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed56:	f000 b857 	b.w	800ee08 <_write_r>

0800ed5a <__sseek>:
 800ed5a:	b510      	push	{r4, lr}
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed62:	f000 f82d 	bl	800edc0 <_lseek_r>
 800ed66:	1c43      	adds	r3, r0, #1
 800ed68:	89a3      	ldrh	r3, [r4, #12]
 800ed6a:	bf15      	itete	ne
 800ed6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed76:	81a3      	strheq	r3, [r4, #12]
 800ed78:	bf18      	it	ne
 800ed7a:	81a3      	strhne	r3, [r4, #12]
 800ed7c:	bd10      	pop	{r4, pc}

0800ed7e <__sclose>:
 800ed7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed82:	f000 b80d 	b.w	800eda0 <_close_r>

0800ed86 <memset>:
 800ed86:	4402      	add	r2, r0
 800ed88:	4603      	mov	r3, r0
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d100      	bne.n	800ed90 <memset+0xa>
 800ed8e:	4770      	bx	lr
 800ed90:	f803 1b01 	strb.w	r1, [r3], #1
 800ed94:	e7f9      	b.n	800ed8a <memset+0x4>
	...

0800ed98 <_localeconv_r>:
 800ed98:	4800      	ldr	r0, [pc, #0]	; (800ed9c <_localeconv_r+0x4>)
 800ed9a:	4770      	bx	lr
 800ed9c:	200002e8 	.word	0x200002e8

0800eda0 <_close_r>:
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	4d06      	ldr	r5, [pc, #24]	; (800edbc <_close_r+0x1c>)
 800eda4:	2300      	movs	r3, #0
 800eda6:	4604      	mov	r4, r0
 800eda8:	4608      	mov	r0, r1
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	f7f4 fbe1 	bl	8003572 <_close>
 800edb0:	1c43      	adds	r3, r0, #1
 800edb2:	d102      	bne.n	800edba <_close_r+0x1a>
 800edb4:	682b      	ldr	r3, [r5, #0]
 800edb6:	b103      	cbz	r3, 800edba <_close_r+0x1a>
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	20002350 	.word	0x20002350

0800edc0 <_lseek_r>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	4d07      	ldr	r5, [pc, #28]	; (800ede0 <_lseek_r+0x20>)
 800edc4:	4604      	mov	r4, r0
 800edc6:	4608      	mov	r0, r1
 800edc8:	4611      	mov	r1, r2
 800edca:	2200      	movs	r2, #0
 800edcc:	602a      	str	r2, [r5, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	f7f4 fbf6 	bl	80035c0 <_lseek>
 800edd4:	1c43      	adds	r3, r0, #1
 800edd6:	d102      	bne.n	800edde <_lseek_r+0x1e>
 800edd8:	682b      	ldr	r3, [r5, #0]
 800edda:	b103      	cbz	r3, 800edde <_lseek_r+0x1e>
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	bd38      	pop	{r3, r4, r5, pc}
 800ede0:	20002350 	.word	0x20002350

0800ede4 <_read_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4d07      	ldr	r5, [pc, #28]	; (800ee04 <_read_r+0x20>)
 800ede8:	4604      	mov	r4, r0
 800edea:	4608      	mov	r0, r1
 800edec:	4611      	mov	r1, r2
 800edee:	2200      	movs	r2, #0
 800edf0:	602a      	str	r2, [r5, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	f7f4 fb84 	bl	8003500 <_read>
 800edf8:	1c43      	adds	r3, r0, #1
 800edfa:	d102      	bne.n	800ee02 <_read_r+0x1e>
 800edfc:	682b      	ldr	r3, [r5, #0]
 800edfe:	b103      	cbz	r3, 800ee02 <_read_r+0x1e>
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	bd38      	pop	{r3, r4, r5, pc}
 800ee04:	20002350 	.word	0x20002350

0800ee08 <_write_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4d07      	ldr	r5, [pc, #28]	; (800ee28 <_write_r+0x20>)
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	4608      	mov	r0, r1
 800ee10:	4611      	mov	r1, r2
 800ee12:	2200      	movs	r2, #0
 800ee14:	602a      	str	r2, [r5, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	f7f4 fb8f 	bl	800353a <_write>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d102      	bne.n	800ee26 <_write_r+0x1e>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	b103      	cbz	r3, 800ee26 <_write_r+0x1e>
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	20002350 	.word	0x20002350

0800ee2c <__errno>:
 800ee2c:	4b01      	ldr	r3, [pc, #4]	; (800ee34 <__errno+0x8>)
 800ee2e:	6818      	ldr	r0, [r3, #0]
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	200001f4 	.word	0x200001f4

0800ee38 <__libc_init_array>:
 800ee38:	b570      	push	{r4, r5, r6, lr}
 800ee3a:	4d0d      	ldr	r5, [pc, #52]	; (800ee70 <__libc_init_array+0x38>)
 800ee3c:	4c0d      	ldr	r4, [pc, #52]	; (800ee74 <__libc_init_array+0x3c>)
 800ee3e:	1b64      	subs	r4, r4, r5
 800ee40:	10a4      	asrs	r4, r4, #2
 800ee42:	2600      	movs	r6, #0
 800ee44:	42a6      	cmp	r6, r4
 800ee46:	d109      	bne.n	800ee5c <__libc_init_array+0x24>
 800ee48:	4d0b      	ldr	r5, [pc, #44]	; (800ee78 <__libc_init_array+0x40>)
 800ee4a:	4c0c      	ldr	r4, [pc, #48]	; (800ee7c <__libc_init_array+0x44>)
 800ee4c:	f004 ff6c 	bl	8013d28 <_init>
 800ee50:	1b64      	subs	r4, r4, r5
 800ee52:	10a4      	asrs	r4, r4, #2
 800ee54:	2600      	movs	r6, #0
 800ee56:	42a6      	cmp	r6, r4
 800ee58:	d105      	bne.n	800ee66 <__libc_init_array+0x2e>
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee60:	4798      	blx	r3
 800ee62:	3601      	adds	r6, #1
 800ee64:	e7ee      	b.n	800ee44 <__libc_init_array+0xc>
 800ee66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee6a:	4798      	blx	r3
 800ee6c:	3601      	adds	r6, #1
 800ee6e:	e7f2      	b.n	800ee56 <__libc_init_array+0x1e>
 800ee70:	08014448 	.word	0x08014448
 800ee74:	08014448 	.word	0x08014448
 800ee78:	08014448 	.word	0x08014448
 800ee7c:	0801444c 	.word	0x0801444c

0800ee80 <__retarget_lock_init_recursive>:
 800ee80:	4770      	bx	lr

0800ee82 <__retarget_lock_acquire_recursive>:
 800ee82:	4770      	bx	lr

0800ee84 <__retarget_lock_release_recursive>:
 800ee84:	4770      	bx	lr
	...

0800ee88 <nanf>:
 800ee88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ee90 <nanf+0x8>
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	7fc00000 	.word	0x7fc00000

0800ee94 <quorem>:
 800ee94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	6903      	ldr	r3, [r0, #16]
 800ee9a:	690c      	ldr	r4, [r1, #16]
 800ee9c:	42a3      	cmp	r3, r4
 800ee9e:	4607      	mov	r7, r0
 800eea0:	db7e      	blt.n	800efa0 <quorem+0x10c>
 800eea2:	3c01      	subs	r4, #1
 800eea4:	f101 0814 	add.w	r8, r1, #20
 800eea8:	f100 0514 	add.w	r5, r0, #20
 800eeac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eeb0:	9301      	str	r3, [sp, #4]
 800eeb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eeb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eeba:	3301      	adds	r3, #1
 800eebc:	429a      	cmp	r2, r3
 800eebe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eec2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eec6:	fbb2 f6f3 	udiv	r6, r2, r3
 800eeca:	d331      	bcc.n	800ef30 <quorem+0x9c>
 800eecc:	f04f 0e00 	mov.w	lr, #0
 800eed0:	4640      	mov	r0, r8
 800eed2:	46ac      	mov	ip, r5
 800eed4:	46f2      	mov	sl, lr
 800eed6:	f850 2b04 	ldr.w	r2, [r0], #4
 800eeda:	b293      	uxth	r3, r2
 800eedc:	fb06 e303 	mla	r3, r6, r3, lr
 800eee0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eee4:	0c1a      	lsrs	r2, r3, #16
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	ebaa 0303 	sub.w	r3, sl, r3
 800eeec:	f8dc a000 	ldr.w	sl, [ip]
 800eef0:	fa13 f38a 	uxtah	r3, r3, sl
 800eef4:	fb06 220e 	mla	r2, r6, lr, r2
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	9b00      	ldr	r3, [sp, #0]
 800eefc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef00:	b292      	uxth	r2, r2
 800ef02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ef06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef0a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef0e:	4581      	cmp	r9, r0
 800ef10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef14:	f84c 3b04 	str.w	r3, [ip], #4
 800ef18:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef1c:	d2db      	bcs.n	800eed6 <quorem+0x42>
 800ef1e:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef22:	b92b      	cbnz	r3, 800ef30 <quorem+0x9c>
 800ef24:	9b01      	ldr	r3, [sp, #4]
 800ef26:	3b04      	subs	r3, #4
 800ef28:	429d      	cmp	r5, r3
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	d32c      	bcc.n	800ef88 <quorem+0xf4>
 800ef2e:	613c      	str	r4, [r7, #16]
 800ef30:	4638      	mov	r0, r7
 800ef32:	f001 f9f1 	bl	8010318 <__mcmp>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	db22      	blt.n	800ef80 <quorem+0xec>
 800ef3a:	3601      	adds	r6, #1
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	2000      	movs	r0, #0
 800ef40:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef44:	f8d1 c000 	ldr.w	ip, [r1]
 800ef48:	b293      	uxth	r3, r2
 800ef4a:	1ac3      	subs	r3, r0, r3
 800ef4c:	0c12      	lsrs	r2, r2, #16
 800ef4e:	fa13 f38c 	uxtah	r3, r3, ip
 800ef52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ef56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef60:	45c1      	cmp	r9, r8
 800ef62:	f841 3b04 	str.w	r3, [r1], #4
 800ef66:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef6a:	d2e9      	bcs.n	800ef40 <quorem+0xac>
 800ef6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef74:	b922      	cbnz	r2, 800ef80 <quorem+0xec>
 800ef76:	3b04      	subs	r3, #4
 800ef78:	429d      	cmp	r5, r3
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	d30a      	bcc.n	800ef94 <quorem+0x100>
 800ef7e:	613c      	str	r4, [r7, #16]
 800ef80:	4630      	mov	r0, r6
 800ef82:	b003      	add	sp, #12
 800ef84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef88:	6812      	ldr	r2, [r2, #0]
 800ef8a:	3b04      	subs	r3, #4
 800ef8c:	2a00      	cmp	r2, #0
 800ef8e:	d1ce      	bne.n	800ef2e <quorem+0x9a>
 800ef90:	3c01      	subs	r4, #1
 800ef92:	e7c9      	b.n	800ef28 <quorem+0x94>
 800ef94:	6812      	ldr	r2, [r2, #0]
 800ef96:	3b04      	subs	r3, #4
 800ef98:	2a00      	cmp	r2, #0
 800ef9a:	d1f0      	bne.n	800ef7e <quorem+0xea>
 800ef9c:	3c01      	subs	r4, #1
 800ef9e:	e7eb      	b.n	800ef78 <quorem+0xe4>
 800efa0:	2000      	movs	r0, #0
 800efa2:	e7ee      	b.n	800ef82 <quorem+0xee>
 800efa4:	0000      	movs	r0, r0
	...

0800efa8 <_dtoa_r>:
 800efa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efac:	ed2d 8b04 	vpush	{d8-d9}
 800efb0:	69c5      	ldr	r5, [r0, #28]
 800efb2:	b093      	sub	sp, #76	; 0x4c
 800efb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800efb8:	ec57 6b10 	vmov	r6, r7, d0
 800efbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800efc0:	9107      	str	r1, [sp, #28]
 800efc2:	4604      	mov	r4, r0
 800efc4:	920a      	str	r2, [sp, #40]	; 0x28
 800efc6:	930d      	str	r3, [sp, #52]	; 0x34
 800efc8:	b975      	cbnz	r5, 800efe8 <_dtoa_r+0x40>
 800efca:	2010      	movs	r0, #16
 800efcc:	f000 fe2a 	bl	800fc24 <malloc>
 800efd0:	4602      	mov	r2, r0
 800efd2:	61e0      	str	r0, [r4, #28]
 800efd4:	b920      	cbnz	r0, 800efe0 <_dtoa_r+0x38>
 800efd6:	4bae      	ldr	r3, [pc, #696]	; (800f290 <_dtoa_r+0x2e8>)
 800efd8:	21ef      	movs	r1, #239	; 0xef
 800efda:	48ae      	ldr	r0, [pc, #696]	; (800f294 <_dtoa_r+0x2ec>)
 800efdc:	f002 fc74 	bl	80118c8 <__assert_func>
 800efe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efe4:	6005      	str	r5, [r0, #0]
 800efe6:	60c5      	str	r5, [r0, #12]
 800efe8:	69e3      	ldr	r3, [r4, #28]
 800efea:	6819      	ldr	r1, [r3, #0]
 800efec:	b151      	cbz	r1, 800f004 <_dtoa_r+0x5c>
 800efee:	685a      	ldr	r2, [r3, #4]
 800eff0:	604a      	str	r2, [r1, #4]
 800eff2:	2301      	movs	r3, #1
 800eff4:	4093      	lsls	r3, r2
 800eff6:	608b      	str	r3, [r1, #8]
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 ff07 	bl	800fe0c <_Bfree>
 800effe:	69e3      	ldr	r3, [r4, #28]
 800f000:	2200      	movs	r2, #0
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	1e3b      	subs	r3, r7, #0
 800f006:	bfbb      	ittet	lt
 800f008:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f00c:	9303      	strlt	r3, [sp, #12]
 800f00e:	2300      	movge	r3, #0
 800f010:	2201      	movlt	r2, #1
 800f012:	bfac      	ite	ge
 800f014:	f8c8 3000 	strge.w	r3, [r8]
 800f018:	f8c8 2000 	strlt.w	r2, [r8]
 800f01c:	4b9e      	ldr	r3, [pc, #632]	; (800f298 <_dtoa_r+0x2f0>)
 800f01e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f022:	ea33 0308 	bics.w	r3, r3, r8
 800f026:	d11b      	bne.n	800f060 <_dtoa_r+0xb8>
 800f028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f02a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f02e:	6013      	str	r3, [r2, #0]
 800f030:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f034:	4333      	orrs	r3, r6
 800f036:	f000 8593 	beq.w	800fb60 <_dtoa_r+0xbb8>
 800f03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f03c:	b963      	cbnz	r3, 800f058 <_dtoa_r+0xb0>
 800f03e:	4b97      	ldr	r3, [pc, #604]	; (800f29c <_dtoa_r+0x2f4>)
 800f040:	e027      	b.n	800f092 <_dtoa_r+0xea>
 800f042:	4b97      	ldr	r3, [pc, #604]	; (800f2a0 <_dtoa_r+0x2f8>)
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	3308      	adds	r3, #8
 800f048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	9800      	ldr	r0, [sp, #0]
 800f04e:	b013      	add	sp, #76	; 0x4c
 800f050:	ecbd 8b04 	vpop	{d8-d9}
 800f054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f058:	4b90      	ldr	r3, [pc, #576]	; (800f29c <_dtoa_r+0x2f4>)
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	3303      	adds	r3, #3
 800f05e:	e7f3      	b.n	800f048 <_dtoa_r+0xa0>
 800f060:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f064:	2200      	movs	r2, #0
 800f066:	ec51 0b17 	vmov	r0, r1, d7
 800f06a:	eeb0 8a47 	vmov.f32	s16, s14
 800f06e:	eef0 8a67 	vmov.f32	s17, s15
 800f072:	2300      	movs	r3, #0
 800f074:	f7f1 fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 800f078:	4681      	mov	r9, r0
 800f07a:	b160      	cbz	r0, 800f096 <_dtoa_r+0xee>
 800f07c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f07e:	2301      	movs	r3, #1
 800f080:	6013      	str	r3, [r2, #0]
 800f082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f084:	2b00      	cmp	r3, #0
 800f086:	f000 8568 	beq.w	800fb5a <_dtoa_r+0xbb2>
 800f08a:	4b86      	ldr	r3, [pc, #536]	; (800f2a4 <_dtoa_r+0x2fc>)
 800f08c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	3b01      	subs	r3, #1
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	e7da      	b.n	800f04c <_dtoa_r+0xa4>
 800f096:	aa10      	add	r2, sp, #64	; 0x40
 800f098:	a911      	add	r1, sp, #68	; 0x44
 800f09a:	4620      	mov	r0, r4
 800f09c:	eeb0 0a48 	vmov.f32	s0, s16
 800f0a0:	eef0 0a68 	vmov.f32	s1, s17
 800f0a4:	f001 fa4e 	bl	8010544 <__d2b>
 800f0a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f0ac:	4682      	mov	sl, r0
 800f0ae:	2d00      	cmp	r5, #0
 800f0b0:	d07f      	beq.n	800f1b2 <_dtoa_r+0x20a>
 800f0b2:	ee18 3a90 	vmov	r3, s17
 800f0b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f0be:	ec51 0b18 	vmov	r0, r1, d8
 800f0c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f0c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	4b75      	ldr	r3, [pc, #468]	; (800f2a8 <_dtoa_r+0x300>)
 800f0d4:	f7f1 f8d8 	bl	8000288 <__aeabi_dsub>
 800f0d8:	a367      	add	r3, pc, #412	; (adr r3, 800f278 <_dtoa_r+0x2d0>)
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f7f1 fa8b 	bl	80005f8 <__aeabi_dmul>
 800f0e2:	a367      	add	r3, pc, #412	; (adr r3, 800f280 <_dtoa_r+0x2d8>)
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	f7f1 f8d0 	bl	800028c <__adddf3>
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	460f      	mov	r7, r1
 800f0f2:	f7f1 fa17 	bl	8000524 <__aeabi_i2d>
 800f0f6:	a364      	add	r3, pc, #400	; (adr r3, 800f288 <_dtoa_r+0x2e0>)
 800f0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fc:	f7f1 fa7c 	bl	80005f8 <__aeabi_dmul>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	4630      	mov	r0, r6
 800f106:	4639      	mov	r1, r7
 800f108:	f7f1 f8c0 	bl	800028c <__adddf3>
 800f10c:	4606      	mov	r6, r0
 800f10e:	460f      	mov	r7, r1
 800f110:	f7f1 fd22 	bl	8000b58 <__aeabi_d2iz>
 800f114:	2200      	movs	r2, #0
 800f116:	4683      	mov	fp, r0
 800f118:	2300      	movs	r3, #0
 800f11a:	4630      	mov	r0, r6
 800f11c:	4639      	mov	r1, r7
 800f11e:	f7f1 fcdd 	bl	8000adc <__aeabi_dcmplt>
 800f122:	b148      	cbz	r0, 800f138 <_dtoa_r+0x190>
 800f124:	4658      	mov	r0, fp
 800f126:	f7f1 f9fd 	bl	8000524 <__aeabi_i2d>
 800f12a:	4632      	mov	r2, r6
 800f12c:	463b      	mov	r3, r7
 800f12e:	f7f1 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f132:	b908      	cbnz	r0, 800f138 <_dtoa_r+0x190>
 800f134:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f138:	f1bb 0f16 	cmp.w	fp, #22
 800f13c:	d857      	bhi.n	800f1ee <_dtoa_r+0x246>
 800f13e:	4b5b      	ldr	r3, [pc, #364]	; (800f2ac <_dtoa_r+0x304>)
 800f140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	ec51 0b18 	vmov	r0, r1, d8
 800f14c:	f7f1 fcc6 	bl	8000adc <__aeabi_dcmplt>
 800f150:	2800      	cmp	r0, #0
 800f152:	d04e      	beq.n	800f1f2 <_dtoa_r+0x24a>
 800f154:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f158:	2300      	movs	r3, #0
 800f15a:	930c      	str	r3, [sp, #48]	; 0x30
 800f15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f15e:	1b5b      	subs	r3, r3, r5
 800f160:	1e5a      	subs	r2, r3, #1
 800f162:	bf45      	ittet	mi
 800f164:	f1c3 0301 	rsbmi	r3, r3, #1
 800f168:	9305      	strmi	r3, [sp, #20]
 800f16a:	2300      	movpl	r3, #0
 800f16c:	2300      	movmi	r3, #0
 800f16e:	9206      	str	r2, [sp, #24]
 800f170:	bf54      	ite	pl
 800f172:	9305      	strpl	r3, [sp, #20]
 800f174:	9306      	strmi	r3, [sp, #24]
 800f176:	f1bb 0f00 	cmp.w	fp, #0
 800f17a:	db3c      	blt.n	800f1f6 <_dtoa_r+0x24e>
 800f17c:	9b06      	ldr	r3, [sp, #24]
 800f17e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f182:	445b      	add	r3, fp
 800f184:	9306      	str	r3, [sp, #24]
 800f186:	2300      	movs	r3, #0
 800f188:	9308      	str	r3, [sp, #32]
 800f18a:	9b07      	ldr	r3, [sp, #28]
 800f18c:	2b09      	cmp	r3, #9
 800f18e:	d868      	bhi.n	800f262 <_dtoa_r+0x2ba>
 800f190:	2b05      	cmp	r3, #5
 800f192:	bfc4      	itt	gt
 800f194:	3b04      	subgt	r3, #4
 800f196:	9307      	strgt	r3, [sp, #28]
 800f198:	9b07      	ldr	r3, [sp, #28]
 800f19a:	f1a3 0302 	sub.w	r3, r3, #2
 800f19e:	bfcc      	ite	gt
 800f1a0:	2500      	movgt	r5, #0
 800f1a2:	2501      	movle	r5, #1
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	f200 8085 	bhi.w	800f2b4 <_dtoa_r+0x30c>
 800f1aa:	e8df f003 	tbb	[pc, r3]
 800f1ae:	3b2e      	.short	0x3b2e
 800f1b0:	5839      	.short	0x5839
 800f1b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f1b6:	441d      	add	r5, r3
 800f1b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f1bc:	2b20      	cmp	r3, #32
 800f1be:	bfc1      	itttt	gt
 800f1c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800f1c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f1cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f1d0:	bfd6      	itet	le
 800f1d2:	f1c3 0320 	rsble	r3, r3, #32
 800f1d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800f1da:	fa06 f003 	lslle.w	r0, r6, r3
 800f1de:	f7f1 f991 	bl	8000504 <__aeabi_ui2d>
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f1e8:	3d01      	subs	r5, #1
 800f1ea:	920e      	str	r2, [sp, #56]	; 0x38
 800f1ec:	e76f      	b.n	800f0ce <_dtoa_r+0x126>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e7b3      	b.n	800f15a <_dtoa_r+0x1b2>
 800f1f2:	900c      	str	r0, [sp, #48]	; 0x30
 800f1f4:	e7b2      	b.n	800f15c <_dtoa_r+0x1b4>
 800f1f6:	9b05      	ldr	r3, [sp, #20]
 800f1f8:	eba3 030b 	sub.w	r3, r3, fp
 800f1fc:	9305      	str	r3, [sp, #20]
 800f1fe:	f1cb 0300 	rsb	r3, fp, #0
 800f202:	9308      	str	r3, [sp, #32]
 800f204:	2300      	movs	r3, #0
 800f206:	930b      	str	r3, [sp, #44]	; 0x2c
 800f208:	e7bf      	b.n	800f18a <_dtoa_r+0x1e2>
 800f20a:	2300      	movs	r3, #0
 800f20c:	9309      	str	r3, [sp, #36]	; 0x24
 800f20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f210:	2b00      	cmp	r3, #0
 800f212:	dc52      	bgt.n	800f2ba <_dtoa_r+0x312>
 800f214:	2301      	movs	r3, #1
 800f216:	9301      	str	r3, [sp, #4]
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	461a      	mov	r2, r3
 800f21c:	920a      	str	r2, [sp, #40]	; 0x28
 800f21e:	e00b      	b.n	800f238 <_dtoa_r+0x290>
 800f220:	2301      	movs	r3, #1
 800f222:	e7f3      	b.n	800f20c <_dtoa_r+0x264>
 800f224:	2300      	movs	r3, #0
 800f226:	9309      	str	r3, [sp, #36]	; 0x24
 800f228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22a:	445b      	add	r3, fp
 800f22c:	9301      	str	r3, [sp, #4]
 800f22e:	3301      	adds	r3, #1
 800f230:	2b01      	cmp	r3, #1
 800f232:	9304      	str	r3, [sp, #16]
 800f234:	bfb8      	it	lt
 800f236:	2301      	movlt	r3, #1
 800f238:	69e0      	ldr	r0, [r4, #28]
 800f23a:	2100      	movs	r1, #0
 800f23c:	2204      	movs	r2, #4
 800f23e:	f102 0614 	add.w	r6, r2, #20
 800f242:	429e      	cmp	r6, r3
 800f244:	d93d      	bls.n	800f2c2 <_dtoa_r+0x31a>
 800f246:	6041      	str	r1, [r0, #4]
 800f248:	4620      	mov	r0, r4
 800f24a:	f000 fd9f 	bl	800fd8c <_Balloc>
 800f24e:	9000      	str	r0, [sp, #0]
 800f250:	2800      	cmp	r0, #0
 800f252:	d139      	bne.n	800f2c8 <_dtoa_r+0x320>
 800f254:	4b16      	ldr	r3, [pc, #88]	; (800f2b0 <_dtoa_r+0x308>)
 800f256:	4602      	mov	r2, r0
 800f258:	f240 11af 	movw	r1, #431	; 0x1af
 800f25c:	e6bd      	b.n	800efda <_dtoa_r+0x32>
 800f25e:	2301      	movs	r3, #1
 800f260:	e7e1      	b.n	800f226 <_dtoa_r+0x27e>
 800f262:	2501      	movs	r5, #1
 800f264:	2300      	movs	r3, #0
 800f266:	9307      	str	r3, [sp, #28]
 800f268:	9509      	str	r5, [sp, #36]	; 0x24
 800f26a:	f04f 33ff 	mov.w	r3, #4294967295
 800f26e:	9301      	str	r3, [sp, #4]
 800f270:	9304      	str	r3, [sp, #16]
 800f272:	2200      	movs	r2, #0
 800f274:	2312      	movs	r3, #18
 800f276:	e7d1      	b.n	800f21c <_dtoa_r+0x274>
 800f278:	636f4361 	.word	0x636f4361
 800f27c:	3fd287a7 	.word	0x3fd287a7
 800f280:	8b60c8b3 	.word	0x8b60c8b3
 800f284:	3fc68a28 	.word	0x3fc68a28
 800f288:	509f79fb 	.word	0x509f79fb
 800f28c:	3fd34413 	.word	0x3fd34413
 800f290:	08013e86 	.word	0x08013e86
 800f294:	08013e9d 	.word	0x08013e9d
 800f298:	7ff00000 	.word	0x7ff00000
 800f29c:	08013e82 	.word	0x08013e82
 800f2a0:	08013e79 	.word	0x08013e79
 800f2a4:	08013e51 	.word	0x08013e51
 800f2a8:	3ff80000 	.word	0x3ff80000
 800f2ac:	08013f88 	.word	0x08013f88
 800f2b0:	08013ef5 	.word	0x08013ef5
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b8:	e7d7      	b.n	800f26a <_dtoa_r+0x2c2>
 800f2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2bc:	9301      	str	r3, [sp, #4]
 800f2be:	9304      	str	r3, [sp, #16]
 800f2c0:	e7ba      	b.n	800f238 <_dtoa_r+0x290>
 800f2c2:	3101      	adds	r1, #1
 800f2c4:	0052      	lsls	r2, r2, #1
 800f2c6:	e7ba      	b.n	800f23e <_dtoa_r+0x296>
 800f2c8:	69e3      	ldr	r3, [r4, #28]
 800f2ca:	9a00      	ldr	r2, [sp, #0]
 800f2cc:	601a      	str	r2, [r3, #0]
 800f2ce:	9b04      	ldr	r3, [sp, #16]
 800f2d0:	2b0e      	cmp	r3, #14
 800f2d2:	f200 80a8 	bhi.w	800f426 <_dtoa_r+0x47e>
 800f2d6:	2d00      	cmp	r5, #0
 800f2d8:	f000 80a5 	beq.w	800f426 <_dtoa_r+0x47e>
 800f2dc:	f1bb 0f00 	cmp.w	fp, #0
 800f2e0:	dd38      	ble.n	800f354 <_dtoa_r+0x3ac>
 800f2e2:	4bc0      	ldr	r3, [pc, #768]	; (800f5e4 <_dtoa_r+0x63c>)
 800f2e4:	f00b 020f 	and.w	r2, fp, #15
 800f2e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f2f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f2f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f2f8:	d019      	beq.n	800f32e <_dtoa_r+0x386>
 800f2fa:	4bbb      	ldr	r3, [pc, #748]	; (800f5e8 <_dtoa_r+0x640>)
 800f2fc:	ec51 0b18 	vmov	r0, r1, d8
 800f300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f304:	f7f1 faa2 	bl	800084c <__aeabi_ddiv>
 800f308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f30c:	f008 080f 	and.w	r8, r8, #15
 800f310:	2503      	movs	r5, #3
 800f312:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f5e8 <_dtoa_r+0x640>
 800f316:	f1b8 0f00 	cmp.w	r8, #0
 800f31a:	d10a      	bne.n	800f332 <_dtoa_r+0x38a>
 800f31c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f320:	4632      	mov	r2, r6
 800f322:	463b      	mov	r3, r7
 800f324:	f7f1 fa92 	bl	800084c <__aeabi_ddiv>
 800f328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f32c:	e02b      	b.n	800f386 <_dtoa_r+0x3de>
 800f32e:	2502      	movs	r5, #2
 800f330:	e7ef      	b.n	800f312 <_dtoa_r+0x36a>
 800f332:	f018 0f01 	tst.w	r8, #1
 800f336:	d008      	beq.n	800f34a <_dtoa_r+0x3a2>
 800f338:	4630      	mov	r0, r6
 800f33a:	4639      	mov	r1, r7
 800f33c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f340:	f7f1 f95a 	bl	80005f8 <__aeabi_dmul>
 800f344:	3501      	adds	r5, #1
 800f346:	4606      	mov	r6, r0
 800f348:	460f      	mov	r7, r1
 800f34a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f34e:	f109 0908 	add.w	r9, r9, #8
 800f352:	e7e0      	b.n	800f316 <_dtoa_r+0x36e>
 800f354:	f000 809f 	beq.w	800f496 <_dtoa_r+0x4ee>
 800f358:	f1cb 0600 	rsb	r6, fp, #0
 800f35c:	4ba1      	ldr	r3, [pc, #644]	; (800f5e4 <_dtoa_r+0x63c>)
 800f35e:	4fa2      	ldr	r7, [pc, #648]	; (800f5e8 <_dtoa_r+0x640>)
 800f360:	f006 020f 	and.w	r2, r6, #15
 800f364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	ec51 0b18 	vmov	r0, r1, d8
 800f370:	f7f1 f942 	bl	80005f8 <__aeabi_dmul>
 800f374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f378:	1136      	asrs	r6, r6, #4
 800f37a:	2300      	movs	r3, #0
 800f37c:	2502      	movs	r5, #2
 800f37e:	2e00      	cmp	r6, #0
 800f380:	d17e      	bne.n	800f480 <_dtoa_r+0x4d8>
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1d0      	bne.n	800f328 <_dtoa_r+0x380>
 800f386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f388:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f000 8084 	beq.w	800f49a <_dtoa_r+0x4f2>
 800f392:	4b96      	ldr	r3, [pc, #600]	; (800f5ec <_dtoa_r+0x644>)
 800f394:	2200      	movs	r2, #0
 800f396:	4640      	mov	r0, r8
 800f398:	4649      	mov	r1, r9
 800f39a:	f7f1 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d07b      	beq.n	800f49a <_dtoa_r+0x4f2>
 800f3a2:	9b04      	ldr	r3, [sp, #16]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d078      	beq.n	800f49a <_dtoa_r+0x4f2>
 800f3a8:	9b01      	ldr	r3, [sp, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	dd39      	ble.n	800f422 <_dtoa_r+0x47a>
 800f3ae:	4b90      	ldr	r3, [pc, #576]	; (800f5f0 <_dtoa_r+0x648>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	4640      	mov	r0, r8
 800f3b4:	4649      	mov	r1, r9
 800f3b6:	f7f1 f91f 	bl	80005f8 <__aeabi_dmul>
 800f3ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3be:	9e01      	ldr	r6, [sp, #4]
 800f3c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f3c4:	3501      	adds	r5, #1
 800f3c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f7f1 f8aa 	bl	8000524 <__aeabi_i2d>
 800f3d0:	4642      	mov	r2, r8
 800f3d2:	464b      	mov	r3, r9
 800f3d4:	f7f1 f910 	bl	80005f8 <__aeabi_dmul>
 800f3d8:	4b86      	ldr	r3, [pc, #536]	; (800f5f4 <_dtoa_r+0x64c>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f7f0 ff56 	bl	800028c <__adddf3>
 800f3e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3e8:	9303      	str	r3, [sp, #12]
 800f3ea:	2e00      	cmp	r6, #0
 800f3ec:	d158      	bne.n	800f4a0 <_dtoa_r+0x4f8>
 800f3ee:	4b82      	ldr	r3, [pc, #520]	; (800f5f8 <_dtoa_r+0x650>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	4640      	mov	r0, r8
 800f3f4:	4649      	mov	r1, r9
 800f3f6:	f7f0 ff47 	bl	8000288 <__aeabi_dsub>
 800f3fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3fe:	4680      	mov	r8, r0
 800f400:	4689      	mov	r9, r1
 800f402:	f7f1 fb89 	bl	8000b18 <__aeabi_dcmpgt>
 800f406:	2800      	cmp	r0, #0
 800f408:	f040 8296 	bne.w	800f938 <_dtoa_r+0x990>
 800f40c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f410:	4640      	mov	r0, r8
 800f412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f416:	4649      	mov	r1, r9
 800f418:	f7f1 fb60 	bl	8000adc <__aeabi_dcmplt>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f040 8289 	bne.w	800f934 <_dtoa_r+0x98c>
 800f422:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f2c0 814e 	blt.w	800f6ca <_dtoa_r+0x722>
 800f42e:	f1bb 0f0e 	cmp.w	fp, #14
 800f432:	f300 814a 	bgt.w	800f6ca <_dtoa_r+0x722>
 800f436:	4b6b      	ldr	r3, [pc, #428]	; (800f5e4 <_dtoa_r+0x63c>)
 800f438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f43c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f442:	2b00      	cmp	r3, #0
 800f444:	f280 80dc 	bge.w	800f600 <_dtoa_r+0x658>
 800f448:	9b04      	ldr	r3, [sp, #16]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f300 80d8 	bgt.w	800f600 <_dtoa_r+0x658>
 800f450:	f040 826f 	bne.w	800f932 <_dtoa_r+0x98a>
 800f454:	4b68      	ldr	r3, [pc, #416]	; (800f5f8 <_dtoa_r+0x650>)
 800f456:	2200      	movs	r2, #0
 800f458:	4640      	mov	r0, r8
 800f45a:	4649      	mov	r1, r9
 800f45c:	f7f1 f8cc 	bl	80005f8 <__aeabi_dmul>
 800f460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f464:	f7f1 fb4e 	bl	8000b04 <__aeabi_dcmpge>
 800f468:	9e04      	ldr	r6, [sp, #16]
 800f46a:	4637      	mov	r7, r6
 800f46c:	2800      	cmp	r0, #0
 800f46e:	f040 8245 	bne.w	800f8fc <_dtoa_r+0x954>
 800f472:	9d00      	ldr	r5, [sp, #0]
 800f474:	2331      	movs	r3, #49	; 0x31
 800f476:	f805 3b01 	strb.w	r3, [r5], #1
 800f47a:	f10b 0b01 	add.w	fp, fp, #1
 800f47e:	e241      	b.n	800f904 <_dtoa_r+0x95c>
 800f480:	07f2      	lsls	r2, r6, #31
 800f482:	d505      	bpl.n	800f490 <_dtoa_r+0x4e8>
 800f484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f488:	f7f1 f8b6 	bl	80005f8 <__aeabi_dmul>
 800f48c:	3501      	adds	r5, #1
 800f48e:	2301      	movs	r3, #1
 800f490:	1076      	asrs	r6, r6, #1
 800f492:	3708      	adds	r7, #8
 800f494:	e773      	b.n	800f37e <_dtoa_r+0x3d6>
 800f496:	2502      	movs	r5, #2
 800f498:	e775      	b.n	800f386 <_dtoa_r+0x3de>
 800f49a:	9e04      	ldr	r6, [sp, #16]
 800f49c:	465f      	mov	r7, fp
 800f49e:	e792      	b.n	800f3c6 <_dtoa_r+0x41e>
 800f4a0:	9900      	ldr	r1, [sp, #0]
 800f4a2:	4b50      	ldr	r3, [pc, #320]	; (800f5e4 <_dtoa_r+0x63c>)
 800f4a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4a8:	4431      	add	r1, r6
 800f4aa:	9102      	str	r1, [sp, #8]
 800f4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4ae:	eeb0 9a47 	vmov.f32	s18, s14
 800f4b2:	eef0 9a67 	vmov.f32	s19, s15
 800f4b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f4ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4be:	2900      	cmp	r1, #0
 800f4c0:	d044      	beq.n	800f54c <_dtoa_r+0x5a4>
 800f4c2:	494e      	ldr	r1, [pc, #312]	; (800f5fc <_dtoa_r+0x654>)
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	f7f1 f9c1 	bl	800084c <__aeabi_ddiv>
 800f4ca:	ec53 2b19 	vmov	r2, r3, d9
 800f4ce:	f7f0 fedb 	bl	8000288 <__aeabi_dsub>
 800f4d2:	9d00      	ldr	r5, [sp, #0]
 800f4d4:	ec41 0b19 	vmov	d9, r0, r1
 800f4d8:	4649      	mov	r1, r9
 800f4da:	4640      	mov	r0, r8
 800f4dc:	f7f1 fb3c 	bl	8000b58 <__aeabi_d2iz>
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	f7f1 f81f 	bl	8000524 <__aeabi_i2d>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	f7f0 fecb 	bl	8000288 <__aeabi_dsub>
 800f4f2:	3630      	adds	r6, #48	; 0x30
 800f4f4:	f805 6b01 	strb.w	r6, [r5], #1
 800f4f8:	ec53 2b19 	vmov	r2, r3, d9
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4689      	mov	r9, r1
 800f500:	f7f1 faec 	bl	8000adc <__aeabi_dcmplt>
 800f504:	2800      	cmp	r0, #0
 800f506:	d164      	bne.n	800f5d2 <_dtoa_r+0x62a>
 800f508:	4642      	mov	r2, r8
 800f50a:	464b      	mov	r3, r9
 800f50c:	4937      	ldr	r1, [pc, #220]	; (800f5ec <_dtoa_r+0x644>)
 800f50e:	2000      	movs	r0, #0
 800f510:	f7f0 feba 	bl	8000288 <__aeabi_dsub>
 800f514:	ec53 2b19 	vmov	r2, r3, d9
 800f518:	f7f1 fae0 	bl	8000adc <__aeabi_dcmplt>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	f040 80b6 	bne.w	800f68e <_dtoa_r+0x6e6>
 800f522:	9b02      	ldr	r3, [sp, #8]
 800f524:	429d      	cmp	r5, r3
 800f526:	f43f af7c 	beq.w	800f422 <_dtoa_r+0x47a>
 800f52a:	4b31      	ldr	r3, [pc, #196]	; (800f5f0 <_dtoa_r+0x648>)
 800f52c:	ec51 0b19 	vmov	r0, r1, d9
 800f530:	2200      	movs	r2, #0
 800f532:	f7f1 f861 	bl	80005f8 <__aeabi_dmul>
 800f536:	4b2e      	ldr	r3, [pc, #184]	; (800f5f0 <_dtoa_r+0x648>)
 800f538:	ec41 0b19 	vmov	d9, r0, r1
 800f53c:	2200      	movs	r2, #0
 800f53e:	4640      	mov	r0, r8
 800f540:	4649      	mov	r1, r9
 800f542:	f7f1 f859 	bl	80005f8 <__aeabi_dmul>
 800f546:	4680      	mov	r8, r0
 800f548:	4689      	mov	r9, r1
 800f54a:	e7c5      	b.n	800f4d8 <_dtoa_r+0x530>
 800f54c:	ec51 0b17 	vmov	r0, r1, d7
 800f550:	f7f1 f852 	bl	80005f8 <__aeabi_dmul>
 800f554:	9b02      	ldr	r3, [sp, #8]
 800f556:	9d00      	ldr	r5, [sp, #0]
 800f558:	930f      	str	r3, [sp, #60]	; 0x3c
 800f55a:	ec41 0b19 	vmov	d9, r0, r1
 800f55e:	4649      	mov	r1, r9
 800f560:	4640      	mov	r0, r8
 800f562:	f7f1 faf9 	bl	8000b58 <__aeabi_d2iz>
 800f566:	4606      	mov	r6, r0
 800f568:	f7f0 ffdc 	bl	8000524 <__aeabi_i2d>
 800f56c:	3630      	adds	r6, #48	; 0x30
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	4640      	mov	r0, r8
 800f574:	4649      	mov	r1, r9
 800f576:	f7f0 fe87 	bl	8000288 <__aeabi_dsub>
 800f57a:	f805 6b01 	strb.w	r6, [r5], #1
 800f57e:	9b02      	ldr	r3, [sp, #8]
 800f580:	429d      	cmp	r5, r3
 800f582:	4680      	mov	r8, r0
 800f584:	4689      	mov	r9, r1
 800f586:	f04f 0200 	mov.w	r2, #0
 800f58a:	d124      	bne.n	800f5d6 <_dtoa_r+0x62e>
 800f58c:	4b1b      	ldr	r3, [pc, #108]	; (800f5fc <_dtoa_r+0x654>)
 800f58e:	ec51 0b19 	vmov	r0, r1, d9
 800f592:	f7f0 fe7b 	bl	800028c <__adddf3>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	4640      	mov	r0, r8
 800f59c:	4649      	mov	r1, r9
 800f59e:	f7f1 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d173      	bne.n	800f68e <_dtoa_r+0x6e6>
 800f5a6:	ec53 2b19 	vmov	r2, r3, d9
 800f5aa:	4914      	ldr	r1, [pc, #80]	; (800f5fc <_dtoa_r+0x654>)
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	f7f0 fe6b 	bl	8000288 <__aeabi_dsub>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	4640      	mov	r0, r8
 800f5b8:	4649      	mov	r1, r9
 800f5ba:	f7f1 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f43f af2f 	beq.w	800f422 <_dtoa_r+0x47a>
 800f5c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f5c6:	1e6b      	subs	r3, r5, #1
 800f5c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5ce:	2b30      	cmp	r3, #48	; 0x30
 800f5d0:	d0f8      	beq.n	800f5c4 <_dtoa_r+0x61c>
 800f5d2:	46bb      	mov	fp, r7
 800f5d4:	e04a      	b.n	800f66c <_dtoa_r+0x6c4>
 800f5d6:	4b06      	ldr	r3, [pc, #24]	; (800f5f0 <_dtoa_r+0x648>)
 800f5d8:	f7f1 f80e 	bl	80005f8 <__aeabi_dmul>
 800f5dc:	4680      	mov	r8, r0
 800f5de:	4689      	mov	r9, r1
 800f5e0:	e7bd      	b.n	800f55e <_dtoa_r+0x5b6>
 800f5e2:	bf00      	nop
 800f5e4:	08013f88 	.word	0x08013f88
 800f5e8:	08013f60 	.word	0x08013f60
 800f5ec:	3ff00000 	.word	0x3ff00000
 800f5f0:	40240000 	.word	0x40240000
 800f5f4:	401c0000 	.word	0x401c0000
 800f5f8:	40140000 	.word	0x40140000
 800f5fc:	3fe00000 	.word	0x3fe00000
 800f600:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f604:	9d00      	ldr	r5, [sp, #0]
 800f606:	4642      	mov	r2, r8
 800f608:	464b      	mov	r3, r9
 800f60a:	4630      	mov	r0, r6
 800f60c:	4639      	mov	r1, r7
 800f60e:	f7f1 f91d 	bl	800084c <__aeabi_ddiv>
 800f612:	f7f1 faa1 	bl	8000b58 <__aeabi_d2iz>
 800f616:	9001      	str	r0, [sp, #4]
 800f618:	f7f0 ff84 	bl	8000524 <__aeabi_i2d>
 800f61c:	4642      	mov	r2, r8
 800f61e:	464b      	mov	r3, r9
 800f620:	f7f0 ffea 	bl	80005f8 <__aeabi_dmul>
 800f624:	4602      	mov	r2, r0
 800f626:	460b      	mov	r3, r1
 800f628:	4630      	mov	r0, r6
 800f62a:	4639      	mov	r1, r7
 800f62c:	f7f0 fe2c 	bl	8000288 <__aeabi_dsub>
 800f630:	9e01      	ldr	r6, [sp, #4]
 800f632:	9f04      	ldr	r7, [sp, #16]
 800f634:	3630      	adds	r6, #48	; 0x30
 800f636:	f805 6b01 	strb.w	r6, [r5], #1
 800f63a:	9e00      	ldr	r6, [sp, #0]
 800f63c:	1bae      	subs	r6, r5, r6
 800f63e:	42b7      	cmp	r7, r6
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	d134      	bne.n	800f6b0 <_dtoa_r+0x708>
 800f646:	f7f0 fe21 	bl	800028c <__adddf3>
 800f64a:	4642      	mov	r2, r8
 800f64c:	464b      	mov	r3, r9
 800f64e:	4606      	mov	r6, r0
 800f650:	460f      	mov	r7, r1
 800f652:	f7f1 fa61 	bl	8000b18 <__aeabi_dcmpgt>
 800f656:	b9c8      	cbnz	r0, 800f68c <_dtoa_r+0x6e4>
 800f658:	4642      	mov	r2, r8
 800f65a:	464b      	mov	r3, r9
 800f65c:	4630      	mov	r0, r6
 800f65e:	4639      	mov	r1, r7
 800f660:	f7f1 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 800f664:	b110      	cbz	r0, 800f66c <_dtoa_r+0x6c4>
 800f666:	9b01      	ldr	r3, [sp, #4]
 800f668:	07db      	lsls	r3, r3, #31
 800f66a:	d40f      	bmi.n	800f68c <_dtoa_r+0x6e4>
 800f66c:	4651      	mov	r1, sl
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 fbcc 	bl	800fe0c <_Bfree>
 800f674:	2300      	movs	r3, #0
 800f676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f678:	702b      	strb	r3, [r5, #0]
 800f67a:	f10b 0301 	add.w	r3, fp, #1
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f682:	2b00      	cmp	r3, #0
 800f684:	f43f ace2 	beq.w	800f04c <_dtoa_r+0xa4>
 800f688:	601d      	str	r5, [r3, #0]
 800f68a:	e4df      	b.n	800f04c <_dtoa_r+0xa4>
 800f68c:	465f      	mov	r7, fp
 800f68e:	462b      	mov	r3, r5
 800f690:	461d      	mov	r5, r3
 800f692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f696:	2a39      	cmp	r2, #57	; 0x39
 800f698:	d106      	bne.n	800f6a8 <_dtoa_r+0x700>
 800f69a:	9a00      	ldr	r2, [sp, #0]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d1f7      	bne.n	800f690 <_dtoa_r+0x6e8>
 800f6a0:	9900      	ldr	r1, [sp, #0]
 800f6a2:	2230      	movs	r2, #48	; 0x30
 800f6a4:	3701      	adds	r7, #1
 800f6a6:	700a      	strb	r2, [r1, #0]
 800f6a8:	781a      	ldrb	r2, [r3, #0]
 800f6aa:	3201      	adds	r2, #1
 800f6ac:	701a      	strb	r2, [r3, #0]
 800f6ae:	e790      	b.n	800f5d2 <_dtoa_r+0x62a>
 800f6b0:	4ba3      	ldr	r3, [pc, #652]	; (800f940 <_dtoa_r+0x998>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f7f0 ffa0 	bl	80005f8 <__aeabi_dmul>
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	4606      	mov	r6, r0
 800f6be:	460f      	mov	r7, r1
 800f6c0:	f7f1 fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d09e      	beq.n	800f606 <_dtoa_r+0x65e>
 800f6c8:	e7d0      	b.n	800f66c <_dtoa_r+0x6c4>
 800f6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6cc:	2a00      	cmp	r2, #0
 800f6ce:	f000 80ca 	beq.w	800f866 <_dtoa_r+0x8be>
 800f6d2:	9a07      	ldr	r2, [sp, #28]
 800f6d4:	2a01      	cmp	r2, #1
 800f6d6:	f300 80ad 	bgt.w	800f834 <_dtoa_r+0x88c>
 800f6da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6dc:	2a00      	cmp	r2, #0
 800f6de:	f000 80a5 	beq.w	800f82c <_dtoa_r+0x884>
 800f6e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f6e6:	9e08      	ldr	r6, [sp, #32]
 800f6e8:	9d05      	ldr	r5, [sp, #20]
 800f6ea:	9a05      	ldr	r2, [sp, #20]
 800f6ec:	441a      	add	r2, r3
 800f6ee:	9205      	str	r2, [sp, #20]
 800f6f0:	9a06      	ldr	r2, [sp, #24]
 800f6f2:	2101      	movs	r1, #1
 800f6f4:	441a      	add	r2, r3
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	9206      	str	r2, [sp, #24]
 800f6fa:	f000 fc87 	bl	801000c <__i2b>
 800f6fe:	4607      	mov	r7, r0
 800f700:	b165      	cbz	r5, 800f71c <_dtoa_r+0x774>
 800f702:	9b06      	ldr	r3, [sp, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd09      	ble.n	800f71c <_dtoa_r+0x774>
 800f708:	42ab      	cmp	r3, r5
 800f70a:	9a05      	ldr	r2, [sp, #20]
 800f70c:	bfa8      	it	ge
 800f70e:	462b      	movge	r3, r5
 800f710:	1ad2      	subs	r2, r2, r3
 800f712:	9205      	str	r2, [sp, #20]
 800f714:	9a06      	ldr	r2, [sp, #24]
 800f716:	1aed      	subs	r5, r5, r3
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	9306      	str	r3, [sp, #24]
 800f71c:	9b08      	ldr	r3, [sp, #32]
 800f71e:	b1f3      	cbz	r3, 800f75e <_dtoa_r+0x7b6>
 800f720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 80a3 	beq.w	800f86e <_dtoa_r+0x8c6>
 800f728:	2e00      	cmp	r6, #0
 800f72a:	dd10      	ble.n	800f74e <_dtoa_r+0x7a6>
 800f72c:	4639      	mov	r1, r7
 800f72e:	4632      	mov	r2, r6
 800f730:	4620      	mov	r0, r4
 800f732:	f000 fd2b 	bl	801018c <__pow5mult>
 800f736:	4652      	mov	r2, sl
 800f738:	4601      	mov	r1, r0
 800f73a:	4607      	mov	r7, r0
 800f73c:	4620      	mov	r0, r4
 800f73e:	f000 fc7b 	bl	8010038 <__multiply>
 800f742:	4651      	mov	r1, sl
 800f744:	4680      	mov	r8, r0
 800f746:	4620      	mov	r0, r4
 800f748:	f000 fb60 	bl	800fe0c <_Bfree>
 800f74c:	46c2      	mov	sl, r8
 800f74e:	9b08      	ldr	r3, [sp, #32]
 800f750:	1b9a      	subs	r2, r3, r6
 800f752:	d004      	beq.n	800f75e <_dtoa_r+0x7b6>
 800f754:	4651      	mov	r1, sl
 800f756:	4620      	mov	r0, r4
 800f758:	f000 fd18 	bl	801018c <__pow5mult>
 800f75c:	4682      	mov	sl, r0
 800f75e:	2101      	movs	r1, #1
 800f760:	4620      	mov	r0, r4
 800f762:	f000 fc53 	bl	801000c <__i2b>
 800f766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	4606      	mov	r6, r0
 800f76c:	f340 8081 	ble.w	800f872 <_dtoa_r+0x8ca>
 800f770:	461a      	mov	r2, r3
 800f772:	4601      	mov	r1, r0
 800f774:	4620      	mov	r0, r4
 800f776:	f000 fd09 	bl	801018c <__pow5mult>
 800f77a:	9b07      	ldr	r3, [sp, #28]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	4606      	mov	r6, r0
 800f780:	dd7a      	ble.n	800f878 <_dtoa_r+0x8d0>
 800f782:	f04f 0800 	mov.w	r8, #0
 800f786:	6933      	ldr	r3, [r6, #16]
 800f788:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f78c:	6918      	ldr	r0, [r3, #16]
 800f78e:	f000 fbef 	bl	800ff70 <__hi0bits>
 800f792:	f1c0 0020 	rsb	r0, r0, #32
 800f796:	9b06      	ldr	r3, [sp, #24]
 800f798:	4418      	add	r0, r3
 800f79a:	f010 001f 	ands.w	r0, r0, #31
 800f79e:	f000 8094 	beq.w	800f8ca <_dtoa_r+0x922>
 800f7a2:	f1c0 0320 	rsb	r3, r0, #32
 800f7a6:	2b04      	cmp	r3, #4
 800f7a8:	f340 8085 	ble.w	800f8b6 <_dtoa_r+0x90e>
 800f7ac:	9b05      	ldr	r3, [sp, #20]
 800f7ae:	f1c0 001c 	rsb	r0, r0, #28
 800f7b2:	4403      	add	r3, r0
 800f7b4:	9305      	str	r3, [sp, #20]
 800f7b6:	9b06      	ldr	r3, [sp, #24]
 800f7b8:	4403      	add	r3, r0
 800f7ba:	4405      	add	r5, r0
 800f7bc:	9306      	str	r3, [sp, #24]
 800f7be:	9b05      	ldr	r3, [sp, #20]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	dd05      	ble.n	800f7d0 <_dtoa_r+0x828>
 800f7c4:	4651      	mov	r1, sl
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f000 fd39 	bl	8010240 <__lshift>
 800f7ce:	4682      	mov	sl, r0
 800f7d0:	9b06      	ldr	r3, [sp, #24]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	dd05      	ble.n	800f7e2 <_dtoa_r+0x83a>
 800f7d6:	4631      	mov	r1, r6
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f000 fd30 	bl	8010240 <__lshift>
 800f7e0:	4606      	mov	r6, r0
 800f7e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d072      	beq.n	800f8ce <_dtoa_r+0x926>
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4650      	mov	r0, sl
 800f7ec:	f000 fd94 	bl	8010318 <__mcmp>
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	da6c      	bge.n	800f8ce <_dtoa_r+0x926>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	4651      	mov	r1, sl
 800f7f8:	220a      	movs	r2, #10
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	f000 fb28 	bl	800fe50 <__multadd>
 800f800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f802:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f806:	4682      	mov	sl, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 81b0 	beq.w	800fb6e <_dtoa_r+0xbc6>
 800f80e:	2300      	movs	r3, #0
 800f810:	4639      	mov	r1, r7
 800f812:	220a      	movs	r2, #10
 800f814:	4620      	mov	r0, r4
 800f816:	f000 fb1b 	bl	800fe50 <__multadd>
 800f81a:	9b01      	ldr	r3, [sp, #4]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	4607      	mov	r7, r0
 800f820:	f300 8096 	bgt.w	800f950 <_dtoa_r+0x9a8>
 800f824:	9b07      	ldr	r3, [sp, #28]
 800f826:	2b02      	cmp	r3, #2
 800f828:	dc59      	bgt.n	800f8de <_dtoa_r+0x936>
 800f82a:	e091      	b.n	800f950 <_dtoa_r+0x9a8>
 800f82c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f82e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f832:	e758      	b.n	800f6e6 <_dtoa_r+0x73e>
 800f834:	9b04      	ldr	r3, [sp, #16]
 800f836:	1e5e      	subs	r6, r3, #1
 800f838:	9b08      	ldr	r3, [sp, #32]
 800f83a:	42b3      	cmp	r3, r6
 800f83c:	bfbf      	itttt	lt
 800f83e:	9b08      	ldrlt	r3, [sp, #32]
 800f840:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f842:	9608      	strlt	r6, [sp, #32]
 800f844:	1af3      	sublt	r3, r6, r3
 800f846:	bfb4      	ite	lt
 800f848:	18d2      	addlt	r2, r2, r3
 800f84a:	1b9e      	subge	r6, r3, r6
 800f84c:	9b04      	ldr	r3, [sp, #16]
 800f84e:	bfbc      	itt	lt
 800f850:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f852:	2600      	movlt	r6, #0
 800f854:	2b00      	cmp	r3, #0
 800f856:	bfb7      	itett	lt
 800f858:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f85c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f860:	1a9d      	sublt	r5, r3, r2
 800f862:	2300      	movlt	r3, #0
 800f864:	e741      	b.n	800f6ea <_dtoa_r+0x742>
 800f866:	9e08      	ldr	r6, [sp, #32]
 800f868:	9d05      	ldr	r5, [sp, #20]
 800f86a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f86c:	e748      	b.n	800f700 <_dtoa_r+0x758>
 800f86e:	9a08      	ldr	r2, [sp, #32]
 800f870:	e770      	b.n	800f754 <_dtoa_r+0x7ac>
 800f872:	9b07      	ldr	r3, [sp, #28]
 800f874:	2b01      	cmp	r3, #1
 800f876:	dc19      	bgt.n	800f8ac <_dtoa_r+0x904>
 800f878:	9b02      	ldr	r3, [sp, #8]
 800f87a:	b9bb      	cbnz	r3, 800f8ac <_dtoa_r+0x904>
 800f87c:	9b03      	ldr	r3, [sp, #12]
 800f87e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f882:	b99b      	cbnz	r3, 800f8ac <_dtoa_r+0x904>
 800f884:	9b03      	ldr	r3, [sp, #12]
 800f886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f88a:	0d1b      	lsrs	r3, r3, #20
 800f88c:	051b      	lsls	r3, r3, #20
 800f88e:	b183      	cbz	r3, 800f8b2 <_dtoa_r+0x90a>
 800f890:	9b05      	ldr	r3, [sp, #20]
 800f892:	3301      	adds	r3, #1
 800f894:	9305      	str	r3, [sp, #20]
 800f896:	9b06      	ldr	r3, [sp, #24]
 800f898:	3301      	adds	r3, #1
 800f89a:	9306      	str	r3, [sp, #24]
 800f89c:	f04f 0801 	mov.w	r8, #1
 800f8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f47f af6f 	bne.w	800f786 <_dtoa_r+0x7de>
 800f8a8:	2001      	movs	r0, #1
 800f8aa:	e774      	b.n	800f796 <_dtoa_r+0x7ee>
 800f8ac:	f04f 0800 	mov.w	r8, #0
 800f8b0:	e7f6      	b.n	800f8a0 <_dtoa_r+0x8f8>
 800f8b2:	4698      	mov	r8, r3
 800f8b4:	e7f4      	b.n	800f8a0 <_dtoa_r+0x8f8>
 800f8b6:	d082      	beq.n	800f7be <_dtoa_r+0x816>
 800f8b8:	9a05      	ldr	r2, [sp, #20]
 800f8ba:	331c      	adds	r3, #28
 800f8bc:	441a      	add	r2, r3
 800f8be:	9205      	str	r2, [sp, #20]
 800f8c0:	9a06      	ldr	r2, [sp, #24]
 800f8c2:	441a      	add	r2, r3
 800f8c4:	441d      	add	r5, r3
 800f8c6:	9206      	str	r2, [sp, #24]
 800f8c8:	e779      	b.n	800f7be <_dtoa_r+0x816>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	e7f4      	b.n	800f8b8 <_dtoa_r+0x910>
 800f8ce:	9b04      	ldr	r3, [sp, #16]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	dc37      	bgt.n	800f944 <_dtoa_r+0x99c>
 800f8d4:	9b07      	ldr	r3, [sp, #28]
 800f8d6:	2b02      	cmp	r3, #2
 800f8d8:	dd34      	ble.n	800f944 <_dtoa_r+0x99c>
 800f8da:	9b04      	ldr	r3, [sp, #16]
 800f8dc:	9301      	str	r3, [sp, #4]
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	b963      	cbnz	r3, 800f8fc <_dtoa_r+0x954>
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	2205      	movs	r2, #5
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f000 fab2 	bl	800fe50 <__multadd>
 800f8ec:	4601      	mov	r1, r0
 800f8ee:	4606      	mov	r6, r0
 800f8f0:	4650      	mov	r0, sl
 800f8f2:	f000 fd11 	bl	8010318 <__mcmp>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f73f adbb 	bgt.w	800f472 <_dtoa_r+0x4ca>
 800f8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8fe:	9d00      	ldr	r5, [sp, #0]
 800f900:	ea6f 0b03 	mvn.w	fp, r3
 800f904:	f04f 0800 	mov.w	r8, #0
 800f908:	4631      	mov	r1, r6
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 fa7e 	bl	800fe0c <_Bfree>
 800f910:	2f00      	cmp	r7, #0
 800f912:	f43f aeab 	beq.w	800f66c <_dtoa_r+0x6c4>
 800f916:	f1b8 0f00 	cmp.w	r8, #0
 800f91a:	d005      	beq.n	800f928 <_dtoa_r+0x980>
 800f91c:	45b8      	cmp	r8, r7
 800f91e:	d003      	beq.n	800f928 <_dtoa_r+0x980>
 800f920:	4641      	mov	r1, r8
 800f922:	4620      	mov	r0, r4
 800f924:	f000 fa72 	bl	800fe0c <_Bfree>
 800f928:	4639      	mov	r1, r7
 800f92a:	4620      	mov	r0, r4
 800f92c:	f000 fa6e 	bl	800fe0c <_Bfree>
 800f930:	e69c      	b.n	800f66c <_dtoa_r+0x6c4>
 800f932:	2600      	movs	r6, #0
 800f934:	4637      	mov	r7, r6
 800f936:	e7e1      	b.n	800f8fc <_dtoa_r+0x954>
 800f938:	46bb      	mov	fp, r7
 800f93a:	4637      	mov	r7, r6
 800f93c:	e599      	b.n	800f472 <_dtoa_r+0x4ca>
 800f93e:	bf00      	nop
 800f940:	40240000 	.word	0x40240000
 800f944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f946:	2b00      	cmp	r3, #0
 800f948:	f000 80c8 	beq.w	800fadc <_dtoa_r+0xb34>
 800f94c:	9b04      	ldr	r3, [sp, #16]
 800f94e:	9301      	str	r3, [sp, #4]
 800f950:	2d00      	cmp	r5, #0
 800f952:	dd05      	ble.n	800f960 <_dtoa_r+0x9b8>
 800f954:	4639      	mov	r1, r7
 800f956:	462a      	mov	r2, r5
 800f958:	4620      	mov	r0, r4
 800f95a:	f000 fc71 	bl	8010240 <__lshift>
 800f95e:	4607      	mov	r7, r0
 800f960:	f1b8 0f00 	cmp.w	r8, #0
 800f964:	d05b      	beq.n	800fa1e <_dtoa_r+0xa76>
 800f966:	6879      	ldr	r1, [r7, #4]
 800f968:	4620      	mov	r0, r4
 800f96a:	f000 fa0f 	bl	800fd8c <_Balloc>
 800f96e:	4605      	mov	r5, r0
 800f970:	b928      	cbnz	r0, 800f97e <_dtoa_r+0x9d6>
 800f972:	4b83      	ldr	r3, [pc, #524]	; (800fb80 <_dtoa_r+0xbd8>)
 800f974:	4602      	mov	r2, r0
 800f976:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f97a:	f7ff bb2e 	b.w	800efda <_dtoa_r+0x32>
 800f97e:	693a      	ldr	r2, [r7, #16]
 800f980:	3202      	adds	r2, #2
 800f982:	0092      	lsls	r2, r2, #2
 800f984:	f107 010c 	add.w	r1, r7, #12
 800f988:	300c      	adds	r0, #12
 800f98a:	f001 ff85 	bl	8011898 <memcpy>
 800f98e:	2201      	movs	r2, #1
 800f990:	4629      	mov	r1, r5
 800f992:	4620      	mov	r0, r4
 800f994:	f000 fc54 	bl	8010240 <__lshift>
 800f998:	9b00      	ldr	r3, [sp, #0]
 800f99a:	3301      	adds	r3, #1
 800f99c:	9304      	str	r3, [sp, #16]
 800f99e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	9308      	str	r3, [sp, #32]
 800f9a6:	9b02      	ldr	r3, [sp, #8]
 800f9a8:	f003 0301 	and.w	r3, r3, #1
 800f9ac:	46b8      	mov	r8, r7
 800f9ae:	9306      	str	r3, [sp, #24]
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	9b04      	ldr	r3, [sp, #16]
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	4650      	mov	r0, sl
 800f9ba:	9301      	str	r3, [sp, #4]
 800f9bc:	f7ff fa6a 	bl	800ee94 <quorem>
 800f9c0:	4641      	mov	r1, r8
 800f9c2:	9002      	str	r0, [sp, #8]
 800f9c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f9c8:	4650      	mov	r0, sl
 800f9ca:	f000 fca5 	bl	8010318 <__mcmp>
 800f9ce:	463a      	mov	r2, r7
 800f9d0:	9005      	str	r0, [sp, #20]
 800f9d2:	4631      	mov	r1, r6
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f000 fcbb 	bl	8010350 <__mdiff>
 800f9da:	68c2      	ldr	r2, [r0, #12]
 800f9dc:	4605      	mov	r5, r0
 800f9de:	bb02      	cbnz	r2, 800fa22 <_dtoa_r+0xa7a>
 800f9e0:	4601      	mov	r1, r0
 800f9e2:	4650      	mov	r0, sl
 800f9e4:	f000 fc98 	bl	8010318 <__mcmp>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	9209      	str	r2, [sp, #36]	; 0x24
 800f9f0:	f000 fa0c 	bl	800fe0c <_Bfree>
 800f9f4:	9b07      	ldr	r3, [sp, #28]
 800f9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9f8:	9d04      	ldr	r5, [sp, #16]
 800f9fa:	ea43 0102 	orr.w	r1, r3, r2
 800f9fe:	9b06      	ldr	r3, [sp, #24]
 800fa00:	4319      	orrs	r1, r3
 800fa02:	d110      	bne.n	800fa26 <_dtoa_r+0xa7e>
 800fa04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa08:	d029      	beq.n	800fa5e <_dtoa_r+0xab6>
 800fa0a:	9b05      	ldr	r3, [sp, #20]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dd02      	ble.n	800fa16 <_dtoa_r+0xa6e>
 800fa10:	9b02      	ldr	r3, [sp, #8]
 800fa12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fa16:	9b01      	ldr	r3, [sp, #4]
 800fa18:	f883 9000 	strb.w	r9, [r3]
 800fa1c:	e774      	b.n	800f908 <_dtoa_r+0x960>
 800fa1e:	4638      	mov	r0, r7
 800fa20:	e7ba      	b.n	800f998 <_dtoa_r+0x9f0>
 800fa22:	2201      	movs	r2, #1
 800fa24:	e7e1      	b.n	800f9ea <_dtoa_r+0xa42>
 800fa26:	9b05      	ldr	r3, [sp, #20]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	db04      	blt.n	800fa36 <_dtoa_r+0xa8e>
 800fa2c:	9907      	ldr	r1, [sp, #28]
 800fa2e:	430b      	orrs	r3, r1
 800fa30:	9906      	ldr	r1, [sp, #24]
 800fa32:	430b      	orrs	r3, r1
 800fa34:	d120      	bne.n	800fa78 <_dtoa_r+0xad0>
 800fa36:	2a00      	cmp	r2, #0
 800fa38:	dded      	ble.n	800fa16 <_dtoa_r+0xa6e>
 800fa3a:	4651      	mov	r1, sl
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	4620      	mov	r0, r4
 800fa40:	f000 fbfe 	bl	8010240 <__lshift>
 800fa44:	4631      	mov	r1, r6
 800fa46:	4682      	mov	sl, r0
 800fa48:	f000 fc66 	bl	8010318 <__mcmp>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	dc03      	bgt.n	800fa58 <_dtoa_r+0xab0>
 800fa50:	d1e1      	bne.n	800fa16 <_dtoa_r+0xa6e>
 800fa52:	f019 0f01 	tst.w	r9, #1
 800fa56:	d0de      	beq.n	800fa16 <_dtoa_r+0xa6e>
 800fa58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa5c:	d1d8      	bne.n	800fa10 <_dtoa_r+0xa68>
 800fa5e:	9a01      	ldr	r2, [sp, #4]
 800fa60:	2339      	movs	r3, #57	; 0x39
 800fa62:	7013      	strb	r3, [r2, #0]
 800fa64:	462b      	mov	r3, r5
 800fa66:	461d      	mov	r5, r3
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa6e:	2a39      	cmp	r2, #57	; 0x39
 800fa70:	d06c      	beq.n	800fb4c <_dtoa_r+0xba4>
 800fa72:	3201      	adds	r2, #1
 800fa74:	701a      	strb	r2, [r3, #0]
 800fa76:	e747      	b.n	800f908 <_dtoa_r+0x960>
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	dd07      	ble.n	800fa8c <_dtoa_r+0xae4>
 800fa7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa80:	d0ed      	beq.n	800fa5e <_dtoa_r+0xab6>
 800fa82:	9a01      	ldr	r2, [sp, #4]
 800fa84:	f109 0301 	add.w	r3, r9, #1
 800fa88:	7013      	strb	r3, [r2, #0]
 800fa8a:	e73d      	b.n	800f908 <_dtoa_r+0x960>
 800fa8c:	9b04      	ldr	r3, [sp, #16]
 800fa8e:	9a08      	ldr	r2, [sp, #32]
 800fa90:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d043      	beq.n	800fb20 <_dtoa_r+0xb78>
 800fa98:	4651      	mov	r1, sl
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	220a      	movs	r2, #10
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 f9d6 	bl	800fe50 <__multadd>
 800faa4:	45b8      	cmp	r8, r7
 800faa6:	4682      	mov	sl, r0
 800faa8:	f04f 0300 	mov.w	r3, #0
 800faac:	f04f 020a 	mov.w	r2, #10
 800fab0:	4641      	mov	r1, r8
 800fab2:	4620      	mov	r0, r4
 800fab4:	d107      	bne.n	800fac6 <_dtoa_r+0xb1e>
 800fab6:	f000 f9cb 	bl	800fe50 <__multadd>
 800faba:	4680      	mov	r8, r0
 800fabc:	4607      	mov	r7, r0
 800fabe:	9b04      	ldr	r3, [sp, #16]
 800fac0:	3301      	adds	r3, #1
 800fac2:	9304      	str	r3, [sp, #16]
 800fac4:	e775      	b.n	800f9b2 <_dtoa_r+0xa0a>
 800fac6:	f000 f9c3 	bl	800fe50 <__multadd>
 800faca:	4639      	mov	r1, r7
 800facc:	4680      	mov	r8, r0
 800face:	2300      	movs	r3, #0
 800fad0:	220a      	movs	r2, #10
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 f9bc 	bl	800fe50 <__multadd>
 800fad8:	4607      	mov	r7, r0
 800fada:	e7f0      	b.n	800fabe <_dtoa_r+0xb16>
 800fadc:	9b04      	ldr	r3, [sp, #16]
 800fade:	9301      	str	r3, [sp, #4]
 800fae0:	9d00      	ldr	r5, [sp, #0]
 800fae2:	4631      	mov	r1, r6
 800fae4:	4650      	mov	r0, sl
 800fae6:	f7ff f9d5 	bl	800ee94 <quorem>
 800faea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800faee:	9b00      	ldr	r3, [sp, #0]
 800faf0:	f805 9b01 	strb.w	r9, [r5], #1
 800faf4:	1aea      	subs	r2, r5, r3
 800faf6:	9b01      	ldr	r3, [sp, #4]
 800faf8:	4293      	cmp	r3, r2
 800fafa:	dd07      	ble.n	800fb0c <_dtoa_r+0xb64>
 800fafc:	4651      	mov	r1, sl
 800fafe:	2300      	movs	r3, #0
 800fb00:	220a      	movs	r2, #10
 800fb02:	4620      	mov	r0, r4
 800fb04:	f000 f9a4 	bl	800fe50 <__multadd>
 800fb08:	4682      	mov	sl, r0
 800fb0a:	e7ea      	b.n	800fae2 <_dtoa_r+0xb3a>
 800fb0c:	9b01      	ldr	r3, [sp, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	bfc8      	it	gt
 800fb12:	461d      	movgt	r5, r3
 800fb14:	9b00      	ldr	r3, [sp, #0]
 800fb16:	bfd8      	it	le
 800fb18:	2501      	movle	r5, #1
 800fb1a:	441d      	add	r5, r3
 800fb1c:	f04f 0800 	mov.w	r8, #0
 800fb20:	4651      	mov	r1, sl
 800fb22:	2201      	movs	r2, #1
 800fb24:	4620      	mov	r0, r4
 800fb26:	f000 fb8b 	bl	8010240 <__lshift>
 800fb2a:	4631      	mov	r1, r6
 800fb2c:	4682      	mov	sl, r0
 800fb2e:	f000 fbf3 	bl	8010318 <__mcmp>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	dc96      	bgt.n	800fa64 <_dtoa_r+0xabc>
 800fb36:	d102      	bne.n	800fb3e <_dtoa_r+0xb96>
 800fb38:	f019 0f01 	tst.w	r9, #1
 800fb3c:	d192      	bne.n	800fa64 <_dtoa_r+0xabc>
 800fb3e:	462b      	mov	r3, r5
 800fb40:	461d      	mov	r5, r3
 800fb42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb46:	2a30      	cmp	r2, #48	; 0x30
 800fb48:	d0fa      	beq.n	800fb40 <_dtoa_r+0xb98>
 800fb4a:	e6dd      	b.n	800f908 <_dtoa_r+0x960>
 800fb4c:	9a00      	ldr	r2, [sp, #0]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d189      	bne.n	800fa66 <_dtoa_r+0xabe>
 800fb52:	f10b 0b01 	add.w	fp, fp, #1
 800fb56:	2331      	movs	r3, #49	; 0x31
 800fb58:	e796      	b.n	800fa88 <_dtoa_r+0xae0>
 800fb5a:	4b0a      	ldr	r3, [pc, #40]	; (800fb84 <_dtoa_r+0xbdc>)
 800fb5c:	f7ff ba99 	b.w	800f092 <_dtoa_r+0xea>
 800fb60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f47f aa6d 	bne.w	800f042 <_dtoa_r+0x9a>
 800fb68:	4b07      	ldr	r3, [pc, #28]	; (800fb88 <_dtoa_r+0xbe0>)
 800fb6a:	f7ff ba92 	b.w	800f092 <_dtoa_r+0xea>
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	dcb5      	bgt.n	800fae0 <_dtoa_r+0xb38>
 800fb74:	9b07      	ldr	r3, [sp, #28]
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	f73f aeb1 	bgt.w	800f8de <_dtoa_r+0x936>
 800fb7c:	e7b0      	b.n	800fae0 <_dtoa_r+0xb38>
 800fb7e:	bf00      	nop
 800fb80:	08013ef5 	.word	0x08013ef5
 800fb84:	08013e50 	.word	0x08013e50
 800fb88:	08013e79 	.word	0x08013e79

0800fb8c <_free_r>:
 800fb8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb8e:	2900      	cmp	r1, #0
 800fb90:	d044      	beq.n	800fc1c <_free_r+0x90>
 800fb92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb96:	9001      	str	r0, [sp, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	f1a1 0404 	sub.w	r4, r1, #4
 800fb9e:	bfb8      	it	lt
 800fba0:	18e4      	addlt	r4, r4, r3
 800fba2:	f000 f8e7 	bl	800fd74 <__malloc_lock>
 800fba6:	4a1e      	ldr	r2, [pc, #120]	; (800fc20 <_free_r+0x94>)
 800fba8:	9801      	ldr	r0, [sp, #4]
 800fbaa:	6813      	ldr	r3, [r2, #0]
 800fbac:	b933      	cbnz	r3, 800fbbc <_free_r+0x30>
 800fbae:	6063      	str	r3, [r4, #4]
 800fbb0:	6014      	str	r4, [r2, #0]
 800fbb2:	b003      	add	sp, #12
 800fbb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbb8:	f000 b8e2 	b.w	800fd80 <__malloc_unlock>
 800fbbc:	42a3      	cmp	r3, r4
 800fbbe:	d908      	bls.n	800fbd2 <_free_r+0x46>
 800fbc0:	6825      	ldr	r5, [r4, #0]
 800fbc2:	1961      	adds	r1, r4, r5
 800fbc4:	428b      	cmp	r3, r1
 800fbc6:	bf01      	itttt	eq
 800fbc8:	6819      	ldreq	r1, [r3, #0]
 800fbca:	685b      	ldreq	r3, [r3, #4]
 800fbcc:	1949      	addeq	r1, r1, r5
 800fbce:	6021      	streq	r1, [r4, #0]
 800fbd0:	e7ed      	b.n	800fbae <_free_r+0x22>
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	b10b      	cbz	r3, 800fbdc <_free_r+0x50>
 800fbd8:	42a3      	cmp	r3, r4
 800fbda:	d9fa      	bls.n	800fbd2 <_free_r+0x46>
 800fbdc:	6811      	ldr	r1, [r2, #0]
 800fbde:	1855      	adds	r5, r2, r1
 800fbe0:	42a5      	cmp	r5, r4
 800fbe2:	d10b      	bne.n	800fbfc <_free_r+0x70>
 800fbe4:	6824      	ldr	r4, [r4, #0]
 800fbe6:	4421      	add	r1, r4
 800fbe8:	1854      	adds	r4, r2, r1
 800fbea:	42a3      	cmp	r3, r4
 800fbec:	6011      	str	r1, [r2, #0]
 800fbee:	d1e0      	bne.n	800fbb2 <_free_r+0x26>
 800fbf0:	681c      	ldr	r4, [r3, #0]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	6053      	str	r3, [r2, #4]
 800fbf6:	440c      	add	r4, r1
 800fbf8:	6014      	str	r4, [r2, #0]
 800fbfa:	e7da      	b.n	800fbb2 <_free_r+0x26>
 800fbfc:	d902      	bls.n	800fc04 <_free_r+0x78>
 800fbfe:	230c      	movs	r3, #12
 800fc00:	6003      	str	r3, [r0, #0]
 800fc02:	e7d6      	b.n	800fbb2 <_free_r+0x26>
 800fc04:	6825      	ldr	r5, [r4, #0]
 800fc06:	1961      	adds	r1, r4, r5
 800fc08:	428b      	cmp	r3, r1
 800fc0a:	bf04      	itt	eq
 800fc0c:	6819      	ldreq	r1, [r3, #0]
 800fc0e:	685b      	ldreq	r3, [r3, #4]
 800fc10:	6063      	str	r3, [r4, #4]
 800fc12:	bf04      	itt	eq
 800fc14:	1949      	addeq	r1, r1, r5
 800fc16:	6021      	streq	r1, [r4, #0]
 800fc18:	6054      	str	r4, [r2, #4]
 800fc1a:	e7ca      	b.n	800fbb2 <_free_r+0x26>
 800fc1c:	b003      	add	sp, #12
 800fc1e:	bd30      	pop	{r4, r5, pc}
 800fc20:	20002358 	.word	0x20002358

0800fc24 <malloc>:
 800fc24:	4b02      	ldr	r3, [pc, #8]	; (800fc30 <malloc+0xc>)
 800fc26:	4601      	mov	r1, r0
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	f000 b823 	b.w	800fc74 <_malloc_r>
 800fc2e:	bf00      	nop
 800fc30:	200001f4 	.word	0x200001f4

0800fc34 <sbrk_aligned>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	4e0e      	ldr	r6, [pc, #56]	; (800fc70 <sbrk_aligned+0x3c>)
 800fc38:	460c      	mov	r4, r1
 800fc3a:	6831      	ldr	r1, [r6, #0]
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	b911      	cbnz	r1, 800fc46 <sbrk_aligned+0x12>
 800fc40:	f001 fe1a 	bl	8011878 <_sbrk_r>
 800fc44:	6030      	str	r0, [r6, #0]
 800fc46:	4621      	mov	r1, r4
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f001 fe15 	bl	8011878 <_sbrk_r>
 800fc4e:	1c43      	adds	r3, r0, #1
 800fc50:	d00a      	beq.n	800fc68 <sbrk_aligned+0x34>
 800fc52:	1cc4      	adds	r4, r0, #3
 800fc54:	f024 0403 	bic.w	r4, r4, #3
 800fc58:	42a0      	cmp	r0, r4
 800fc5a:	d007      	beq.n	800fc6c <sbrk_aligned+0x38>
 800fc5c:	1a21      	subs	r1, r4, r0
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f001 fe0a 	bl	8011878 <_sbrk_r>
 800fc64:	3001      	adds	r0, #1
 800fc66:	d101      	bne.n	800fc6c <sbrk_aligned+0x38>
 800fc68:	f04f 34ff 	mov.w	r4, #4294967295
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	bd70      	pop	{r4, r5, r6, pc}
 800fc70:	2000235c 	.word	0x2000235c

0800fc74 <_malloc_r>:
 800fc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc78:	1ccd      	adds	r5, r1, #3
 800fc7a:	f025 0503 	bic.w	r5, r5, #3
 800fc7e:	3508      	adds	r5, #8
 800fc80:	2d0c      	cmp	r5, #12
 800fc82:	bf38      	it	cc
 800fc84:	250c      	movcc	r5, #12
 800fc86:	2d00      	cmp	r5, #0
 800fc88:	4607      	mov	r7, r0
 800fc8a:	db01      	blt.n	800fc90 <_malloc_r+0x1c>
 800fc8c:	42a9      	cmp	r1, r5
 800fc8e:	d905      	bls.n	800fc9c <_malloc_r+0x28>
 800fc90:	230c      	movs	r3, #12
 800fc92:	603b      	str	r3, [r7, #0]
 800fc94:	2600      	movs	r6, #0
 800fc96:	4630      	mov	r0, r6
 800fc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fd70 <_malloc_r+0xfc>
 800fca0:	f000 f868 	bl	800fd74 <__malloc_lock>
 800fca4:	f8d8 3000 	ldr.w	r3, [r8]
 800fca8:	461c      	mov	r4, r3
 800fcaa:	bb5c      	cbnz	r4, 800fd04 <_malloc_r+0x90>
 800fcac:	4629      	mov	r1, r5
 800fcae:	4638      	mov	r0, r7
 800fcb0:	f7ff ffc0 	bl	800fc34 <sbrk_aligned>
 800fcb4:	1c43      	adds	r3, r0, #1
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	d155      	bne.n	800fd66 <_malloc_r+0xf2>
 800fcba:	f8d8 4000 	ldr.w	r4, [r8]
 800fcbe:	4626      	mov	r6, r4
 800fcc0:	2e00      	cmp	r6, #0
 800fcc2:	d145      	bne.n	800fd50 <_malloc_r+0xdc>
 800fcc4:	2c00      	cmp	r4, #0
 800fcc6:	d048      	beq.n	800fd5a <_malloc_r+0xe6>
 800fcc8:	6823      	ldr	r3, [r4, #0]
 800fcca:	4631      	mov	r1, r6
 800fccc:	4638      	mov	r0, r7
 800fcce:	eb04 0903 	add.w	r9, r4, r3
 800fcd2:	f001 fdd1 	bl	8011878 <_sbrk_r>
 800fcd6:	4581      	cmp	r9, r0
 800fcd8:	d13f      	bne.n	800fd5a <_malloc_r+0xe6>
 800fcda:	6821      	ldr	r1, [r4, #0]
 800fcdc:	1a6d      	subs	r5, r5, r1
 800fcde:	4629      	mov	r1, r5
 800fce0:	4638      	mov	r0, r7
 800fce2:	f7ff ffa7 	bl	800fc34 <sbrk_aligned>
 800fce6:	3001      	adds	r0, #1
 800fce8:	d037      	beq.n	800fd5a <_malloc_r+0xe6>
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	442b      	add	r3, r5
 800fcee:	6023      	str	r3, [r4, #0]
 800fcf0:	f8d8 3000 	ldr.w	r3, [r8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d038      	beq.n	800fd6a <_malloc_r+0xf6>
 800fcf8:	685a      	ldr	r2, [r3, #4]
 800fcfa:	42a2      	cmp	r2, r4
 800fcfc:	d12b      	bne.n	800fd56 <_malloc_r+0xe2>
 800fcfe:	2200      	movs	r2, #0
 800fd00:	605a      	str	r2, [r3, #4]
 800fd02:	e00f      	b.n	800fd24 <_malloc_r+0xb0>
 800fd04:	6822      	ldr	r2, [r4, #0]
 800fd06:	1b52      	subs	r2, r2, r5
 800fd08:	d41f      	bmi.n	800fd4a <_malloc_r+0xd6>
 800fd0a:	2a0b      	cmp	r2, #11
 800fd0c:	d917      	bls.n	800fd3e <_malloc_r+0xca>
 800fd0e:	1961      	adds	r1, r4, r5
 800fd10:	42a3      	cmp	r3, r4
 800fd12:	6025      	str	r5, [r4, #0]
 800fd14:	bf18      	it	ne
 800fd16:	6059      	strne	r1, [r3, #4]
 800fd18:	6863      	ldr	r3, [r4, #4]
 800fd1a:	bf08      	it	eq
 800fd1c:	f8c8 1000 	streq.w	r1, [r8]
 800fd20:	5162      	str	r2, [r4, r5]
 800fd22:	604b      	str	r3, [r1, #4]
 800fd24:	4638      	mov	r0, r7
 800fd26:	f104 060b 	add.w	r6, r4, #11
 800fd2a:	f000 f829 	bl	800fd80 <__malloc_unlock>
 800fd2e:	f026 0607 	bic.w	r6, r6, #7
 800fd32:	1d23      	adds	r3, r4, #4
 800fd34:	1af2      	subs	r2, r6, r3
 800fd36:	d0ae      	beq.n	800fc96 <_malloc_r+0x22>
 800fd38:	1b9b      	subs	r3, r3, r6
 800fd3a:	50a3      	str	r3, [r4, r2]
 800fd3c:	e7ab      	b.n	800fc96 <_malloc_r+0x22>
 800fd3e:	42a3      	cmp	r3, r4
 800fd40:	6862      	ldr	r2, [r4, #4]
 800fd42:	d1dd      	bne.n	800fd00 <_malloc_r+0x8c>
 800fd44:	f8c8 2000 	str.w	r2, [r8]
 800fd48:	e7ec      	b.n	800fd24 <_malloc_r+0xb0>
 800fd4a:	4623      	mov	r3, r4
 800fd4c:	6864      	ldr	r4, [r4, #4]
 800fd4e:	e7ac      	b.n	800fcaa <_malloc_r+0x36>
 800fd50:	4634      	mov	r4, r6
 800fd52:	6876      	ldr	r6, [r6, #4]
 800fd54:	e7b4      	b.n	800fcc0 <_malloc_r+0x4c>
 800fd56:	4613      	mov	r3, r2
 800fd58:	e7cc      	b.n	800fcf4 <_malloc_r+0x80>
 800fd5a:	230c      	movs	r3, #12
 800fd5c:	603b      	str	r3, [r7, #0]
 800fd5e:	4638      	mov	r0, r7
 800fd60:	f000 f80e 	bl	800fd80 <__malloc_unlock>
 800fd64:	e797      	b.n	800fc96 <_malloc_r+0x22>
 800fd66:	6025      	str	r5, [r4, #0]
 800fd68:	e7dc      	b.n	800fd24 <_malloc_r+0xb0>
 800fd6a:	605b      	str	r3, [r3, #4]
 800fd6c:	deff      	udf	#255	; 0xff
 800fd6e:	bf00      	nop
 800fd70:	20002358 	.word	0x20002358

0800fd74 <__malloc_lock>:
 800fd74:	4801      	ldr	r0, [pc, #4]	; (800fd7c <__malloc_lock+0x8>)
 800fd76:	f7ff b884 	b.w	800ee82 <__retarget_lock_acquire_recursive>
 800fd7a:	bf00      	nop
 800fd7c:	20002354 	.word	0x20002354

0800fd80 <__malloc_unlock>:
 800fd80:	4801      	ldr	r0, [pc, #4]	; (800fd88 <__malloc_unlock+0x8>)
 800fd82:	f7ff b87f 	b.w	800ee84 <__retarget_lock_release_recursive>
 800fd86:	bf00      	nop
 800fd88:	20002354 	.word	0x20002354

0800fd8c <_Balloc>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	69c6      	ldr	r6, [r0, #28]
 800fd90:	4604      	mov	r4, r0
 800fd92:	460d      	mov	r5, r1
 800fd94:	b976      	cbnz	r6, 800fdb4 <_Balloc+0x28>
 800fd96:	2010      	movs	r0, #16
 800fd98:	f7ff ff44 	bl	800fc24 <malloc>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	61e0      	str	r0, [r4, #28]
 800fda0:	b920      	cbnz	r0, 800fdac <_Balloc+0x20>
 800fda2:	4b18      	ldr	r3, [pc, #96]	; (800fe04 <_Balloc+0x78>)
 800fda4:	4818      	ldr	r0, [pc, #96]	; (800fe08 <_Balloc+0x7c>)
 800fda6:	216b      	movs	r1, #107	; 0x6b
 800fda8:	f001 fd8e 	bl	80118c8 <__assert_func>
 800fdac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdb0:	6006      	str	r6, [r0, #0]
 800fdb2:	60c6      	str	r6, [r0, #12]
 800fdb4:	69e6      	ldr	r6, [r4, #28]
 800fdb6:	68f3      	ldr	r3, [r6, #12]
 800fdb8:	b183      	cbz	r3, 800fddc <_Balloc+0x50>
 800fdba:	69e3      	ldr	r3, [r4, #28]
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fdc2:	b9b8      	cbnz	r0, 800fdf4 <_Balloc+0x68>
 800fdc4:	2101      	movs	r1, #1
 800fdc6:	fa01 f605 	lsl.w	r6, r1, r5
 800fdca:	1d72      	adds	r2, r6, #5
 800fdcc:	0092      	lsls	r2, r2, #2
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f001 fd98 	bl	8011904 <_calloc_r>
 800fdd4:	b160      	cbz	r0, 800fdf0 <_Balloc+0x64>
 800fdd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fdda:	e00e      	b.n	800fdfa <_Balloc+0x6e>
 800fddc:	2221      	movs	r2, #33	; 0x21
 800fdde:	2104      	movs	r1, #4
 800fde0:	4620      	mov	r0, r4
 800fde2:	f001 fd8f 	bl	8011904 <_calloc_r>
 800fde6:	69e3      	ldr	r3, [r4, #28]
 800fde8:	60f0      	str	r0, [r6, #12]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d1e4      	bne.n	800fdba <_Balloc+0x2e>
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	bd70      	pop	{r4, r5, r6, pc}
 800fdf4:	6802      	ldr	r2, [r0, #0]
 800fdf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe00:	e7f7      	b.n	800fdf2 <_Balloc+0x66>
 800fe02:	bf00      	nop
 800fe04:	08013e86 	.word	0x08013e86
 800fe08:	08013f06 	.word	0x08013f06

0800fe0c <_Bfree>:
 800fe0c:	b570      	push	{r4, r5, r6, lr}
 800fe0e:	69c6      	ldr	r6, [r0, #28]
 800fe10:	4605      	mov	r5, r0
 800fe12:	460c      	mov	r4, r1
 800fe14:	b976      	cbnz	r6, 800fe34 <_Bfree+0x28>
 800fe16:	2010      	movs	r0, #16
 800fe18:	f7ff ff04 	bl	800fc24 <malloc>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	61e8      	str	r0, [r5, #28]
 800fe20:	b920      	cbnz	r0, 800fe2c <_Bfree+0x20>
 800fe22:	4b09      	ldr	r3, [pc, #36]	; (800fe48 <_Bfree+0x3c>)
 800fe24:	4809      	ldr	r0, [pc, #36]	; (800fe4c <_Bfree+0x40>)
 800fe26:	218f      	movs	r1, #143	; 0x8f
 800fe28:	f001 fd4e 	bl	80118c8 <__assert_func>
 800fe2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe30:	6006      	str	r6, [r0, #0]
 800fe32:	60c6      	str	r6, [r0, #12]
 800fe34:	b13c      	cbz	r4, 800fe46 <_Bfree+0x3a>
 800fe36:	69eb      	ldr	r3, [r5, #28]
 800fe38:	6862      	ldr	r2, [r4, #4]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe40:	6021      	str	r1, [r4, #0]
 800fe42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe46:	bd70      	pop	{r4, r5, r6, pc}
 800fe48:	08013e86 	.word	0x08013e86
 800fe4c:	08013f06 	.word	0x08013f06

0800fe50 <__multadd>:
 800fe50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe54:	690d      	ldr	r5, [r1, #16]
 800fe56:	4607      	mov	r7, r0
 800fe58:	460c      	mov	r4, r1
 800fe5a:	461e      	mov	r6, r3
 800fe5c:	f101 0c14 	add.w	ip, r1, #20
 800fe60:	2000      	movs	r0, #0
 800fe62:	f8dc 3000 	ldr.w	r3, [ip]
 800fe66:	b299      	uxth	r1, r3
 800fe68:	fb02 6101 	mla	r1, r2, r1, r6
 800fe6c:	0c1e      	lsrs	r6, r3, #16
 800fe6e:	0c0b      	lsrs	r3, r1, #16
 800fe70:	fb02 3306 	mla	r3, r2, r6, r3
 800fe74:	b289      	uxth	r1, r1
 800fe76:	3001      	adds	r0, #1
 800fe78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe7c:	4285      	cmp	r5, r0
 800fe7e:	f84c 1b04 	str.w	r1, [ip], #4
 800fe82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe86:	dcec      	bgt.n	800fe62 <__multadd+0x12>
 800fe88:	b30e      	cbz	r6, 800fece <__multadd+0x7e>
 800fe8a:	68a3      	ldr	r3, [r4, #8]
 800fe8c:	42ab      	cmp	r3, r5
 800fe8e:	dc19      	bgt.n	800fec4 <__multadd+0x74>
 800fe90:	6861      	ldr	r1, [r4, #4]
 800fe92:	4638      	mov	r0, r7
 800fe94:	3101      	adds	r1, #1
 800fe96:	f7ff ff79 	bl	800fd8c <_Balloc>
 800fe9a:	4680      	mov	r8, r0
 800fe9c:	b928      	cbnz	r0, 800feaa <__multadd+0x5a>
 800fe9e:	4602      	mov	r2, r0
 800fea0:	4b0c      	ldr	r3, [pc, #48]	; (800fed4 <__multadd+0x84>)
 800fea2:	480d      	ldr	r0, [pc, #52]	; (800fed8 <__multadd+0x88>)
 800fea4:	21ba      	movs	r1, #186	; 0xba
 800fea6:	f001 fd0f 	bl	80118c8 <__assert_func>
 800feaa:	6922      	ldr	r2, [r4, #16]
 800feac:	3202      	adds	r2, #2
 800feae:	f104 010c 	add.w	r1, r4, #12
 800feb2:	0092      	lsls	r2, r2, #2
 800feb4:	300c      	adds	r0, #12
 800feb6:	f001 fcef 	bl	8011898 <memcpy>
 800feba:	4621      	mov	r1, r4
 800febc:	4638      	mov	r0, r7
 800febe:	f7ff ffa5 	bl	800fe0c <_Bfree>
 800fec2:	4644      	mov	r4, r8
 800fec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fec8:	3501      	adds	r5, #1
 800feca:	615e      	str	r6, [r3, #20]
 800fecc:	6125      	str	r5, [r4, #16]
 800fece:	4620      	mov	r0, r4
 800fed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed4:	08013ef5 	.word	0x08013ef5
 800fed8:	08013f06 	.word	0x08013f06

0800fedc <__s2b>:
 800fedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fee0:	460c      	mov	r4, r1
 800fee2:	4615      	mov	r5, r2
 800fee4:	461f      	mov	r7, r3
 800fee6:	2209      	movs	r2, #9
 800fee8:	3308      	adds	r3, #8
 800feea:	4606      	mov	r6, r0
 800feec:	fb93 f3f2 	sdiv	r3, r3, r2
 800fef0:	2100      	movs	r1, #0
 800fef2:	2201      	movs	r2, #1
 800fef4:	429a      	cmp	r2, r3
 800fef6:	db09      	blt.n	800ff0c <__s2b+0x30>
 800fef8:	4630      	mov	r0, r6
 800fefa:	f7ff ff47 	bl	800fd8c <_Balloc>
 800fefe:	b940      	cbnz	r0, 800ff12 <__s2b+0x36>
 800ff00:	4602      	mov	r2, r0
 800ff02:	4b19      	ldr	r3, [pc, #100]	; (800ff68 <__s2b+0x8c>)
 800ff04:	4819      	ldr	r0, [pc, #100]	; (800ff6c <__s2b+0x90>)
 800ff06:	21d3      	movs	r1, #211	; 0xd3
 800ff08:	f001 fcde 	bl	80118c8 <__assert_func>
 800ff0c:	0052      	lsls	r2, r2, #1
 800ff0e:	3101      	adds	r1, #1
 800ff10:	e7f0      	b.n	800fef4 <__s2b+0x18>
 800ff12:	9b08      	ldr	r3, [sp, #32]
 800ff14:	6143      	str	r3, [r0, #20]
 800ff16:	2d09      	cmp	r5, #9
 800ff18:	f04f 0301 	mov.w	r3, #1
 800ff1c:	6103      	str	r3, [r0, #16]
 800ff1e:	dd16      	ble.n	800ff4e <__s2b+0x72>
 800ff20:	f104 0909 	add.w	r9, r4, #9
 800ff24:	46c8      	mov	r8, r9
 800ff26:	442c      	add	r4, r5
 800ff28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ff2c:	4601      	mov	r1, r0
 800ff2e:	3b30      	subs	r3, #48	; 0x30
 800ff30:	220a      	movs	r2, #10
 800ff32:	4630      	mov	r0, r6
 800ff34:	f7ff ff8c 	bl	800fe50 <__multadd>
 800ff38:	45a0      	cmp	r8, r4
 800ff3a:	d1f5      	bne.n	800ff28 <__s2b+0x4c>
 800ff3c:	f1a5 0408 	sub.w	r4, r5, #8
 800ff40:	444c      	add	r4, r9
 800ff42:	1b2d      	subs	r5, r5, r4
 800ff44:	1963      	adds	r3, r4, r5
 800ff46:	42bb      	cmp	r3, r7
 800ff48:	db04      	blt.n	800ff54 <__s2b+0x78>
 800ff4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff4e:	340a      	adds	r4, #10
 800ff50:	2509      	movs	r5, #9
 800ff52:	e7f6      	b.n	800ff42 <__s2b+0x66>
 800ff54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff58:	4601      	mov	r1, r0
 800ff5a:	3b30      	subs	r3, #48	; 0x30
 800ff5c:	220a      	movs	r2, #10
 800ff5e:	4630      	mov	r0, r6
 800ff60:	f7ff ff76 	bl	800fe50 <__multadd>
 800ff64:	e7ee      	b.n	800ff44 <__s2b+0x68>
 800ff66:	bf00      	nop
 800ff68:	08013ef5 	.word	0x08013ef5
 800ff6c:	08013f06 	.word	0x08013f06

0800ff70 <__hi0bits>:
 800ff70:	0c03      	lsrs	r3, r0, #16
 800ff72:	041b      	lsls	r3, r3, #16
 800ff74:	b9d3      	cbnz	r3, 800ffac <__hi0bits+0x3c>
 800ff76:	0400      	lsls	r0, r0, #16
 800ff78:	2310      	movs	r3, #16
 800ff7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ff7e:	bf04      	itt	eq
 800ff80:	0200      	lsleq	r0, r0, #8
 800ff82:	3308      	addeq	r3, #8
 800ff84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ff88:	bf04      	itt	eq
 800ff8a:	0100      	lsleq	r0, r0, #4
 800ff8c:	3304      	addeq	r3, #4
 800ff8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ff92:	bf04      	itt	eq
 800ff94:	0080      	lsleq	r0, r0, #2
 800ff96:	3302      	addeq	r3, #2
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	db05      	blt.n	800ffa8 <__hi0bits+0x38>
 800ff9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ffa0:	f103 0301 	add.w	r3, r3, #1
 800ffa4:	bf08      	it	eq
 800ffa6:	2320      	moveq	r3, #32
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	4770      	bx	lr
 800ffac:	2300      	movs	r3, #0
 800ffae:	e7e4      	b.n	800ff7a <__hi0bits+0xa>

0800ffb0 <__lo0bits>:
 800ffb0:	6803      	ldr	r3, [r0, #0]
 800ffb2:	f013 0207 	ands.w	r2, r3, #7
 800ffb6:	d00c      	beq.n	800ffd2 <__lo0bits+0x22>
 800ffb8:	07d9      	lsls	r1, r3, #31
 800ffba:	d422      	bmi.n	8010002 <__lo0bits+0x52>
 800ffbc:	079a      	lsls	r2, r3, #30
 800ffbe:	bf49      	itett	mi
 800ffc0:	085b      	lsrmi	r3, r3, #1
 800ffc2:	089b      	lsrpl	r3, r3, #2
 800ffc4:	6003      	strmi	r3, [r0, #0]
 800ffc6:	2201      	movmi	r2, #1
 800ffc8:	bf5c      	itt	pl
 800ffca:	6003      	strpl	r3, [r0, #0]
 800ffcc:	2202      	movpl	r2, #2
 800ffce:	4610      	mov	r0, r2
 800ffd0:	4770      	bx	lr
 800ffd2:	b299      	uxth	r1, r3
 800ffd4:	b909      	cbnz	r1, 800ffda <__lo0bits+0x2a>
 800ffd6:	0c1b      	lsrs	r3, r3, #16
 800ffd8:	2210      	movs	r2, #16
 800ffda:	b2d9      	uxtb	r1, r3
 800ffdc:	b909      	cbnz	r1, 800ffe2 <__lo0bits+0x32>
 800ffde:	3208      	adds	r2, #8
 800ffe0:	0a1b      	lsrs	r3, r3, #8
 800ffe2:	0719      	lsls	r1, r3, #28
 800ffe4:	bf04      	itt	eq
 800ffe6:	091b      	lsreq	r3, r3, #4
 800ffe8:	3204      	addeq	r2, #4
 800ffea:	0799      	lsls	r1, r3, #30
 800ffec:	bf04      	itt	eq
 800ffee:	089b      	lsreq	r3, r3, #2
 800fff0:	3202      	addeq	r2, #2
 800fff2:	07d9      	lsls	r1, r3, #31
 800fff4:	d403      	bmi.n	800fffe <__lo0bits+0x4e>
 800fff6:	085b      	lsrs	r3, r3, #1
 800fff8:	f102 0201 	add.w	r2, r2, #1
 800fffc:	d003      	beq.n	8010006 <__lo0bits+0x56>
 800fffe:	6003      	str	r3, [r0, #0]
 8010000:	e7e5      	b.n	800ffce <__lo0bits+0x1e>
 8010002:	2200      	movs	r2, #0
 8010004:	e7e3      	b.n	800ffce <__lo0bits+0x1e>
 8010006:	2220      	movs	r2, #32
 8010008:	e7e1      	b.n	800ffce <__lo0bits+0x1e>
	...

0801000c <__i2b>:
 801000c:	b510      	push	{r4, lr}
 801000e:	460c      	mov	r4, r1
 8010010:	2101      	movs	r1, #1
 8010012:	f7ff febb 	bl	800fd8c <_Balloc>
 8010016:	4602      	mov	r2, r0
 8010018:	b928      	cbnz	r0, 8010026 <__i2b+0x1a>
 801001a:	4b05      	ldr	r3, [pc, #20]	; (8010030 <__i2b+0x24>)
 801001c:	4805      	ldr	r0, [pc, #20]	; (8010034 <__i2b+0x28>)
 801001e:	f240 1145 	movw	r1, #325	; 0x145
 8010022:	f001 fc51 	bl	80118c8 <__assert_func>
 8010026:	2301      	movs	r3, #1
 8010028:	6144      	str	r4, [r0, #20]
 801002a:	6103      	str	r3, [r0, #16]
 801002c:	bd10      	pop	{r4, pc}
 801002e:	bf00      	nop
 8010030:	08013ef5 	.word	0x08013ef5
 8010034:	08013f06 	.word	0x08013f06

08010038 <__multiply>:
 8010038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801003c:	4691      	mov	r9, r2
 801003e:	690a      	ldr	r2, [r1, #16]
 8010040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010044:	429a      	cmp	r2, r3
 8010046:	bfb8      	it	lt
 8010048:	460b      	movlt	r3, r1
 801004a:	460c      	mov	r4, r1
 801004c:	bfbc      	itt	lt
 801004e:	464c      	movlt	r4, r9
 8010050:	4699      	movlt	r9, r3
 8010052:	6927      	ldr	r7, [r4, #16]
 8010054:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010058:	68a3      	ldr	r3, [r4, #8]
 801005a:	6861      	ldr	r1, [r4, #4]
 801005c:	eb07 060a 	add.w	r6, r7, sl
 8010060:	42b3      	cmp	r3, r6
 8010062:	b085      	sub	sp, #20
 8010064:	bfb8      	it	lt
 8010066:	3101      	addlt	r1, #1
 8010068:	f7ff fe90 	bl	800fd8c <_Balloc>
 801006c:	b930      	cbnz	r0, 801007c <__multiply+0x44>
 801006e:	4602      	mov	r2, r0
 8010070:	4b44      	ldr	r3, [pc, #272]	; (8010184 <__multiply+0x14c>)
 8010072:	4845      	ldr	r0, [pc, #276]	; (8010188 <__multiply+0x150>)
 8010074:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010078:	f001 fc26 	bl	80118c8 <__assert_func>
 801007c:	f100 0514 	add.w	r5, r0, #20
 8010080:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010084:	462b      	mov	r3, r5
 8010086:	2200      	movs	r2, #0
 8010088:	4543      	cmp	r3, r8
 801008a:	d321      	bcc.n	80100d0 <__multiply+0x98>
 801008c:	f104 0314 	add.w	r3, r4, #20
 8010090:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010094:	f109 0314 	add.w	r3, r9, #20
 8010098:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801009c:	9202      	str	r2, [sp, #8]
 801009e:	1b3a      	subs	r2, r7, r4
 80100a0:	3a15      	subs	r2, #21
 80100a2:	f022 0203 	bic.w	r2, r2, #3
 80100a6:	3204      	adds	r2, #4
 80100a8:	f104 0115 	add.w	r1, r4, #21
 80100ac:	428f      	cmp	r7, r1
 80100ae:	bf38      	it	cc
 80100b0:	2204      	movcc	r2, #4
 80100b2:	9201      	str	r2, [sp, #4]
 80100b4:	9a02      	ldr	r2, [sp, #8]
 80100b6:	9303      	str	r3, [sp, #12]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d80c      	bhi.n	80100d6 <__multiply+0x9e>
 80100bc:	2e00      	cmp	r6, #0
 80100be:	dd03      	ble.n	80100c8 <__multiply+0x90>
 80100c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d05b      	beq.n	8010180 <__multiply+0x148>
 80100c8:	6106      	str	r6, [r0, #16]
 80100ca:	b005      	add	sp, #20
 80100cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d0:	f843 2b04 	str.w	r2, [r3], #4
 80100d4:	e7d8      	b.n	8010088 <__multiply+0x50>
 80100d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80100da:	f1ba 0f00 	cmp.w	sl, #0
 80100de:	d024      	beq.n	801012a <__multiply+0xf2>
 80100e0:	f104 0e14 	add.w	lr, r4, #20
 80100e4:	46a9      	mov	r9, r5
 80100e6:	f04f 0c00 	mov.w	ip, #0
 80100ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80100ee:	f8d9 1000 	ldr.w	r1, [r9]
 80100f2:	fa1f fb82 	uxth.w	fp, r2
 80100f6:	b289      	uxth	r1, r1
 80100f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80100fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010100:	f8d9 2000 	ldr.w	r2, [r9]
 8010104:	4461      	add	r1, ip
 8010106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801010a:	fb0a c20b 	mla	r2, sl, fp, ip
 801010e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010112:	b289      	uxth	r1, r1
 8010114:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010118:	4577      	cmp	r7, lr
 801011a:	f849 1b04 	str.w	r1, [r9], #4
 801011e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010122:	d8e2      	bhi.n	80100ea <__multiply+0xb2>
 8010124:	9a01      	ldr	r2, [sp, #4]
 8010126:	f845 c002 	str.w	ip, [r5, r2]
 801012a:	9a03      	ldr	r2, [sp, #12]
 801012c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010130:	3304      	adds	r3, #4
 8010132:	f1b9 0f00 	cmp.w	r9, #0
 8010136:	d021      	beq.n	801017c <__multiply+0x144>
 8010138:	6829      	ldr	r1, [r5, #0]
 801013a:	f104 0c14 	add.w	ip, r4, #20
 801013e:	46ae      	mov	lr, r5
 8010140:	f04f 0a00 	mov.w	sl, #0
 8010144:	f8bc b000 	ldrh.w	fp, [ip]
 8010148:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801014c:	fb09 220b 	mla	r2, r9, fp, r2
 8010150:	4452      	add	r2, sl
 8010152:	b289      	uxth	r1, r1
 8010154:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010158:	f84e 1b04 	str.w	r1, [lr], #4
 801015c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010160:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010164:	f8be 1000 	ldrh.w	r1, [lr]
 8010168:	fb09 110a 	mla	r1, r9, sl, r1
 801016c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010170:	4567      	cmp	r7, ip
 8010172:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010176:	d8e5      	bhi.n	8010144 <__multiply+0x10c>
 8010178:	9a01      	ldr	r2, [sp, #4]
 801017a:	50a9      	str	r1, [r5, r2]
 801017c:	3504      	adds	r5, #4
 801017e:	e799      	b.n	80100b4 <__multiply+0x7c>
 8010180:	3e01      	subs	r6, #1
 8010182:	e79b      	b.n	80100bc <__multiply+0x84>
 8010184:	08013ef5 	.word	0x08013ef5
 8010188:	08013f06 	.word	0x08013f06

0801018c <__pow5mult>:
 801018c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010190:	4615      	mov	r5, r2
 8010192:	f012 0203 	ands.w	r2, r2, #3
 8010196:	4606      	mov	r6, r0
 8010198:	460f      	mov	r7, r1
 801019a:	d007      	beq.n	80101ac <__pow5mult+0x20>
 801019c:	4c25      	ldr	r4, [pc, #148]	; (8010234 <__pow5mult+0xa8>)
 801019e:	3a01      	subs	r2, #1
 80101a0:	2300      	movs	r3, #0
 80101a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101a6:	f7ff fe53 	bl	800fe50 <__multadd>
 80101aa:	4607      	mov	r7, r0
 80101ac:	10ad      	asrs	r5, r5, #2
 80101ae:	d03d      	beq.n	801022c <__pow5mult+0xa0>
 80101b0:	69f4      	ldr	r4, [r6, #28]
 80101b2:	b97c      	cbnz	r4, 80101d4 <__pow5mult+0x48>
 80101b4:	2010      	movs	r0, #16
 80101b6:	f7ff fd35 	bl	800fc24 <malloc>
 80101ba:	4602      	mov	r2, r0
 80101bc:	61f0      	str	r0, [r6, #28]
 80101be:	b928      	cbnz	r0, 80101cc <__pow5mult+0x40>
 80101c0:	4b1d      	ldr	r3, [pc, #116]	; (8010238 <__pow5mult+0xac>)
 80101c2:	481e      	ldr	r0, [pc, #120]	; (801023c <__pow5mult+0xb0>)
 80101c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80101c8:	f001 fb7e 	bl	80118c8 <__assert_func>
 80101cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101d0:	6004      	str	r4, [r0, #0]
 80101d2:	60c4      	str	r4, [r0, #12]
 80101d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80101d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101dc:	b94c      	cbnz	r4, 80101f2 <__pow5mult+0x66>
 80101de:	f240 2171 	movw	r1, #625	; 0x271
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7ff ff12 	bl	801000c <__i2b>
 80101e8:	2300      	movs	r3, #0
 80101ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80101ee:	4604      	mov	r4, r0
 80101f0:	6003      	str	r3, [r0, #0]
 80101f2:	f04f 0900 	mov.w	r9, #0
 80101f6:	07eb      	lsls	r3, r5, #31
 80101f8:	d50a      	bpl.n	8010210 <__pow5mult+0x84>
 80101fa:	4639      	mov	r1, r7
 80101fc:	4622      	mov	r2, r4
 80101fe:	4630      	mov	r0, r6
 8010200:	f7ff ff1a 	bl	8010038 <__multiply>
 8010204:	4639      	mov	r1, r7
 8010206:	4680      	mov	r8, r0
 8010208:	4630      	mov	r0, r6
 801020a:	f7ff fdff 	bl	800fe0c <_Bfree>
 801020e:	4647      	mov	r7, r8
 8010210:	106d      	asrs	r5, r5, #1
 8010212:	d00b      	beq.n	801022c <__pow5mult+0xa0>
 8010214:	6820      	ldr	r0, [r4, #0]
 8010216:	b938      	cbnz	r0, 8010228 <__pow5mult+0x9c>
 8010218:	4622      	mov	r2, r4
 801021a:	4621      	mov	r1, r4
 801021c:	4630      	mov	r0, r6
 801021e:	f7ff ff0b 	bl	8010038 <__multiply>
 8010222:	6020      	str	r0, [r4, #0]
 8010224:	f8c0 9000 	str.w	r9, [r0]
 8010228:	4604      	mov	r4, r0
 801022a:	e7e4      	b.n	80101f6 <__pow5mult+0x6a>
 801022c:	4638      	mov	r0, r7
 801022e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010232:	bf00      	nop
 8010234:	08014050 	.word	0x08014050
 8010238:	08013e86 	.word	0x08013e86
 801023c:	08013f06 	.word	0x08013f06

08010240 <__lshift>:
 8010240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010244:	460c      	mov	r4, r1
 8010246:	6849      	ldr	r1, [r1, #4]
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801024e:	68a3      	ldr	r3, [r4, #8]
 8010250:	4607      	mov	r7, r0
 8010252:	4691      	mov	r9, r2
 8010254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010258:	f108 0601 	add.w	r6, r8, #1
 801025c:	42b3      	cmp	r3, r6
 801025e:	db0b      	blt.n	8010278 <__lshift+0x38>
 8010260:	4638      	mov	r0, r7
 8010262:	f7ff fd93 	bl	800fd8c <_Balloc>
 8010266:	4605      	mov	r5, r0
 8010268:	b948      	cbnz	r0, 801027e <__lshift+0x3e>
 801026a:	4602      	mov	r2, r0
 801026c:	4b28      	ldr	r3, [pc, #160]	; (8010310 <__lshift+0xd0>)
 801026e:	4829      	ldr	r0, [pc, #164]	; (8010314 <__lshift+0xd4>)
 8010270:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010274:	f001 fb28 	bl	80118c8 <__assert_func>
 8010278:	3101      	adds	r1, #1
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	e7ee      	b.n	801025c <__lshift+0x1c>
 801027e:	2300      	movs	r3, #0
 8010280:	f100 0114 	add.w	r1, r0, #20
 8010284:	f100 0210 	add.w	r2, r0, #16
 8010288:	4618      	mov	r0, r3
 801028a:	4553      	cmp	r3, sl
 801028c:	db33      	blt.n	80102f6 <__lshift+0xb6>
 801028e:	6920      	ldr	r0, [r4, #16]
 8010290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010294:	f104 0314 	add.w	r3, r4, #20
 8010298:	f019 091f 	ands.w	r9, r9, #31
 801029c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102a4:	d02b      	beq.n	80102fe <__lshift+0xbe>
 80102a6:	f1c9 0e20 	rsb	lr, r9, #32
 80102aa:	468a      	mov	sl, r1
 80102ac:	2200      	movs	r2, #0
 80102ae:	6818      	ldr	r0, [r3, #0]
 80102b0:	fa00 f009 	lsl.w	r0, r0, r9
 80102b4:	4310      	orrs	r0, r2
 80102b6:	f84a 0b04 	str.w	r0, [sl], #4
 80102ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80102be:	459c      	cmp	ip, r3
 80102c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80102c4:	d8f3      	bhi.n	80102ae <__lshift+0x6e>
 80102c6:	ebac 0304 	sub.w	r3, ip, r4
 80102ca:	3b15      	subs	r3, #21
 80102cc:	f023 0303 	bic.w	r3, r3, #3
 80102d0:	3304      	adds	r3, #4
 80102d2:	f104 0015 	add.w	r0, r4, #21
 80102d6:	4584      	cmp	ip, r0
 80102d8:	bf38      	it	cc
 80102da:	2304      	movcc	r3, #4
 80102dc:	50ca      	str	r2, [r1, r3]
 80102de:	b10a      	cbz	r2, 80102e4 <__lshift+0xa4>
 80102e0:	f108 0602 	add.w	r6, r8, #2
 80102e4:	3e01      	subs	r6, #1
 80102e6:	4638      	mov	r0, r7
 80102e8:	612e      	str	r6, [r5, #16]
 80102ea:	4621      	mov	r1, r4
 80102ec:	f7ff fd8e 	bl	800fe0c <_Bfree>
 80102f0:	4628      	mov	r0, r5
 80102f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80102fa:	3301      	adds	r3, #1
 80102fc:	e7c5      	b.n	801028a <__lshift+0x4a>
 80102fe:	3904      	subs	r1, #4
 8010300:	f853 2b04 	ldr.w	r2, [r3], #4
 8010304:	f841 2f04 	str.w	r2, [r1, #4]!
 8010308:	459c      	cmp	ip, r3
 801030a:	d8f9      	bhi.n	8010300 <__lshift+0xc0>
 801030c:	e7ea      	b.n	80102e4 <__lshift+0xa4>
 801030e:	bf00      	nop
 8010310:	08013ef5 	.word	0x08013ef5
 8010314:	08013f06 	.word	0x08013f06

08010318 <__mcmp>:
 8010318:	b530      	push	{r4, r5, lr}
 801031a:	6902      	ldr	r2, [r0, #16]
 801031c:	690c      	ldr	r4, [r1, #16]
 801031e:	1b12      	subs	r2, r2, r4
 8010320:	d10e      	bne.n	8010340 <__mcmp+0x28>
 8010322:	f100 0314 	add.w	r3, r0, #20
 8010326:	3114      	adds	r1, #20
 8010328:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801032c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010330:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010334:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010338:	42a5      	cmp	r5, r4
 801033a:	d003      	beq.n	8010344 <__mcmp+0x2c>
 801033c:	d305      	bcc.n	801034a <__mcmp+0x32>
 801033e:	2201      	movs	r2, #1
 8010340:	4610      	mov	r0, r2
 8010342:	bd30      	pop	{r4, r5, pc}
 8010344:	4283      	cmp	r3, r0
 8010346:	d3f3      	bcc.n	8010330 <__mcmp+0x18>
 8010348:	e7fa      	b.n	8010340 <__mcmp+0x28>
 801034a:	f04f 32ff 	mov.w	r2, #4294967295
 801034e:	e7f7      	b.n	8010340 <__mcmp+0x28>

08010350 <__mdiff>:
 8010350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010354:	460c      	mov	r4, r1
 8010356:	4606      	mov	r6, r0
 8010358:	4611      	mov	r1, r2
 801035a:	4620      	mov	r0, r4
 801035c:	4690      	mov	r8, r2
 801035e:	f7ff ffdb 	bl	8010318 <__mcmp>
 8010362:	1e05      	subs	r5, r0, #0
 8010364:	d110      	bne.n	8010388 <__mdiff+0x38>
 8010366:	4629      	mov	r1, r5
 8010368:	4630      	mov	r0, r6
 801036a:	f7ff fd0f 	bl	800fd8c <_Balloc>
 801036e:	b930      	cbnz	r0, 801037e <__mdiff+0x2e>
 8010370:	4b3a      	ldr	r3, [pc, #232]	; (801045c <__mdiff+0x10c>)
 8010372:	4602      	mov	r2, r0
 8010374:	f240 2137 	movw	r1, #567	; 0x237
 8010378:	4839      	ldr	r0, [pc, #228]	; (8010460 <__mdiff+0x110>)
 801037a:	f001 faa5 	bl	80118c8 <__assert_func>
 801037e:	2301      	movs	r3, #1
 8010380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010384:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010388:	bfa4      	itt	ge
 801038a:	4643      	movge	r3, r8
 801038c:	46a0      	movge	r8, r4
 801038e:	4630      	mov	r0, r6
 8010390:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010394:	bfa6      	itte	ge
 8010396:	461c      	movge	r4, r3
 8010398:	2500      	movge	r5, #0
 801039a:	2501      	movlt	r5, #1
 801039c:	f7ff fcf6 	bl	800fd8c <_Balloc>
 80103a0:	b920      	cbnz	r0, 80103ac <__mdiff+0x5c>
 80103a2:	4b2e      	ldr	r3, [pc, #184]	; (801045c <__mdiff+0x10c>)
 80103a4:	4602      	mov	r2, r0
 80103a6:	f240 2145 	movw	r1, #581	; 0x245
 80103aa:	e7e5      	b.n	8010378 <__mdiff+0x28>
 80103ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80103b0:	6926      	ldr	r6, [r4, #16]
 80103b2:	60c5      	str	r5, [r0, #12]
 80103b4:	f104 0914 	add.w	r9, r4, #20
 80103b8:	f108 0514 	add.w	r5, r8, #20
 80103bc:	f100 0e14 	add.w	lr, r0, #20
 80103c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80103c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80103c8:	f108 0210 	add.w	r2, r8, #16
 80103cc:	46f2      	mov	sl, lr
 80103ce:	2100      	movs	r1, #0
 80103d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80103d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80103d8:	fa11 f88b 	uxtah	r8, r1, fp
 80103dc:	b299      	uxth	r1, r3
 80103de:	0c1b      	lsrs	r3, r3, #16
 80103e0:	eba8 0801 	sub.w	r8, r8, r1
 80103e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80103e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80103ec:	fa1f f888 	uxth.w	r8, r8
 80103f0:	1419      	asrs	r1, r3, #16
 80103f2:	454e      	cmp	r6, r9
 80103f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80103f8:	f84a 3b04 	str.w	r3, [sl], #4
 80103fc:	d8e8      	bhi.n	80103d0 <__mdiff+0x80>
 80103fe:	1b33      	subs	r3, r6, r4
 8010400:	3b15      	subs	r3, #21
 8010402:	f023 0303 	bic.w	r3, r3, #3
 8010406:	3304      	adds	r3, #4
 8010408:	3415      	adds	r4, #21
 801040a:	42a6      	cmp	r6, r4
 801040c:	bf38      	it	cc
 801040e:	2304      	movcc	r3, #4
 8010410:	441d      	add	r5, r3
 8010412:	4473      	add	r3, lr
 8010414:	469e      	mov	lr, r3
 8010416:	462e      	mov	r6, r5
 8010418:	4566      	cmp	r6, ip
 801041a:	d30e      	bcc.n	801043a <__mdiff+0xea>
 801041c:	f10c 0203 	add.w	r2, ip, #3
 8010420:	1b52      	subs	r2, r2, r5
 8010422:	f022 0203 	bic.w	r2, r2, #3
 8010426:	3d03      	subs	r5, #3
 8010428:	45ac      	cmp	ip, r5
 801042a:	bf38      	it	cc
 801042c:	2200      	movcc	r2, #0
 801042e:	4413      	add	r3, r2
 8010430:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010434:	b17a      	cbz	r2, 8010456 <__mdiff+0x106>
 8010436:	6107      	str	r7, [r0, #16]
 8010438:	e7a4      	b.n	8010384 <__mdiff+0x34>
 801043a:	f856 8b04 	ldr.w	r8, [r6], #4
 801043e:	fa11 f288 	uxtah	r2, r1, r8
 8010442:	1414      	asrs	r4, r2, #16
 8010444:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010448:	b292      	uxth	r2, r2
 801044a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801044e:	f84e 2b04 	str.w	r2, [lr], #4
 8010452:	1421      	asrs	r1, r4, #16
 8010454:	e7e0      	b.n	8010418 <__mdiff+0xc8>
 8010456:	3f01      	subs	r7, #1
 8010458:	e7ea      	b.n	8010430 <__mdiff+0xe0>
 801045a:	bf00      	nop
 801045c:	08013ef5 	.word	0x08013ef5
 8010460:	08013f06 	.word	0x08013f06

08010464 <__ulp>:
 8010464:	b082      	sub	sp, #8
 8010466:	ed8d 0b00 	vstr	d0, [sp]
 801046a:	9a01      	ldr	r2, [sp, #4]
 801046c:	4b0f      	ldr	r3, [pc, #60]	; (80104ac <__ulp+0x48>)
 801046e:	4013      	ands	r3, r2
 8010470:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010474:	2b00      	cmp	r3, #0
 8010476:	dc08      	bgt.n	801048a <__ulp+0x26>
 8010478:	425b      	negs	r3, r3
 801047a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801047e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010482:	da04      	bge.n	801048e <__ulp+0x2a>
 8010484:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010488:	4113      	asrs	r3, r2
 801048a:	2200      	movs	r2, #0
 801048c:	e008      	b.n	80104a0 <__ulp+0x3c>
 801048e:	f1a2 0314 	sub.w	r3, r2, #20
 8010492:	2b1e      	cmp	r3, #30
 8010494:	bfda      	itte	le
 8010496:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801049a:	40da      	lsrle	r2, r3
 801049c:	2201      	movgt	r2, #1
 801049e:	2300      	movs	r3, #0
 80104a0:	4619      	mov	r1, r3
 80104a2:	4610      	mov	r0, r2
 80104a4:	ec41 0b10 	vmov	d0, r0, r1
 80104a8:	b002      	add	sp, #8
 80104aa:	4770      	bx	lr
 80104ac:	7ff00000 	.word	0x7ff00000

080104b0 <__b2d>:
 80104b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b4:	6906      	ldr	r6, [r0, #16]
 80104b6:	f100 0814 	add.w	r8, r0, #20
 80104ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80104be:	1f37      	subs	r7, r6, #4
 80104c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80104c4:	4610      	mov	r0, r2
 80104c6:	f7ff fd53 	bl	800ff70 <__hi0bits>
 80104ca:	f1c0 0320 	rsb	r3, r0, #32
 80104ce:	280a      	cmp	r0, #10
 80104d0:	600b      	str	r3, [r1, #0]
 80104d2:	491b      	ldr	r1, [pc, #108]	; (8010540 <__b2d+0x90>)
 80104d4:	dc15      	bgt.n	8010502 <__b2d+0x52>
 80104d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80104da:	fa22 f30c 	lsr.w	r3, r2, ip
 80104de:	45b8      	cmp	r8, r7
 80104e0:	ea43 0501 	orr.w	r5, r3, r1
 80104e4:	bf34      	ite	cc
 80104e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80104ea:	2300      	movcs	r3, #0
 80104ec:	3015      	adds	r0, #21
 80104ee:	fa02 f000 	lsl.w	r0, r2, r0
 80104f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80104f6:	4303      	orrs	r3, r0
 80104f8:	461c      	mov	r4, r3
 80104fa:	ec45 4b10 	vmov	d0, r4, r5
 80104fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010502:	45b8      	cmp	r8, r7
 8010504:	bf3a      	itte	cc
 8010506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801050a:	f1a6 0708 	subcc.w	r7, r6, #8
 801050e:	2300      	movcs	r3, #0
 8010510:	380b      	subs	r0, #11
 8010512:	d012      	beq.n	801053a <__b2d+0x8a>
 8010514:	f1c0 0120 	rsb	r1, r0, #32
 8010518:	fa23 f401 	lsr.w	r4, r3, r1
 801051c:	4082      	lsls	r2, r0
 801051e:	4322      	orrs	r2, r4
 8010520:	4547      	cmp	r7, r8
 8010522:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010526:	bf8c      	ite	hi
 8010528:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801052c:	2200      	movls	r2, #0
 801052e:	4083      	lsls	r3, r0
 8010530:	40ca      	lsrs	r2, r1
 8010532:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010536:	4313      	orrs	r3, r2
 8010538:	e7de      	b.n	80104f8 <__b2d+0x48>
 801053a:	ea42 0501 	orr.w	r5, r2, r1
 801053e:	e7db      	b.n	80104f8 <__b2d+0x48>
 8010540:	3ff00000 	.word	0x3ff00000

08010544 <__d2b>:
 8010544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010548:	460f      	mov	r7, r1
 801054a:	2101      	movs	r1, #1
 801054c:	ec59 8b10 	vmov	r8, r9, d0
 8010550:	4616      	mov	r6, r2
 8010552:	f7ff fc1b 	bl	800fd8c <_Balloc>
 8010556:	4604      	mov	r4, r0
 8010558:	b930      	cbnz	r0, 8010568 <__d2b+0x24>
 801055a:	4602      	mov	r2, r0
 801055c:	4b24      	ldr	r3, [pc, #144]	; (80105f0 <__d2b+0xac>)
 801055e:	4825      	ldr	r0, [pc, #148]	; (80105f4 <__d2b+0xb0>)
 8010560:	f240 310f 	movw	r1, #783	; 0x30f
 8010564:	f001 f9b0 	bl	80118c8 <__assert_func>
 8010568:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801056c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010570:	bb2d      	cbnz	r5, 80105be <__d2b+0x7a>
 8010572:	9301      	str	r3, [sp, #4]
 8010574:	f1b8 0300 	subs.w	r3, r8, #0
 8010578:	d026      	beq.n	80105c8 <__d2b+0x84>
 801057a:	4668      	mov	r0, sp
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	f7ff fd17 	bl	800ffb0 <__lo0bits>
 8010582:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010586:	b1e8      	cbz	r0, 80105c4 <__d2b+0x80>
 8010588:	f1c0 0320 	rsb	r3, r0, #32
 801058c:	fa02 f303 	lsl.w	r3, r2, r3
 8010590:	430b      	orrs	r3, r1
 8010592:	40c2      	lsrs	r2, r0
 8010594:	6163      	str	r3, [r4, #20]
 8010596:	9201      	str	r2, [sp, #4]
 8010598:	9b01      	ldr	r3, [sp, #4]
 801059a:	61a3      	str	r3, [r4, #24]
 801059c:	2b00      	cmp	r3, #0
 801059e:	bf14      	ite	ne
 80105a0:	2202      	movne	r2, #2
 80105a2:	2201      	moveq	r2, #1
 80105a4:	6122      	str	r2, [r4, #16]
 80105a6:	b1bd      	cbz	r5, 80105d8 <__d2b+0x94>
 80105a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80105ac:	4405      	add	r5, r0
 80105ae:	603d      	str	r5, [r7, #0]
 80105b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80105b4:	6030      	str	r0, [r6, #0]
 80105b6:	4620      	mov	r0, r4
 80105b8:	b003      	add	sp, #12
 80105ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105c2:	e7d6      	b.n	8010572 <__d2b+0x2e>
 80105c4:	6161      	str	r1, [r4, #20]
 80105c6:	e7e7      	b.n	8010598 <__d2b+0x54>
 80105c8:	a801      	add	r0, sp, #4
 80105ca:	f7ff fcf1 	bl	800ffb0 <__lo0bits>
 80105ce:	9b01      	ldr	r3, [sp, #4]
 80105d0:	6163      	str	r3, [r4, #20]
 80105d2:	3020      	adds	r0, #32
 80105d4:	2201      	movs	r2, #1
 80105d6:	e7e5      	b.n	80105a4 <__d2b+0x60>
 80105d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105e0:	6038      	str	r0, [r7, #0]
 80105e2:	6918      	ldr	r0, [r3, #16]
 80105e4:	f7ff fcc4 	bl	800ff70 <__hi0bits>
 80105e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80105ec:	e7e2      	b.n	80105b4 <__d2b+0x70>
 80105ee:	bf00      	nop
 80105f0:	08013ef5 	.word	0x08013ef5
 80105f4:	08013f06 	.word	0x08013f06

080105f8 <__ratio>:
 80105f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fc:	4688      	mov	r8, r1
 80105fe:	4669      	mov	r1, sp
 8010600:	4681      	mov	r9, r0
 8010602:	f7ff ff55 	bl	80104b0 <__b2d>
 8010606:	a901      	add	r1, sp, #4
 8010608:	4640      	mov	r0, r8
 801060a:	ec55 4b10 	vmov	r4, r5, d0
 801060e:	f7ff ff4f 	bl	80104b0 <__b2d>
 8010612:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010616:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801061a:	eba3 0c02 	sub.w	ip, r3, r2
 801061e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010622:	1a9b      	subs	r3, r3, r2
 8010624:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010628:	ec51 0b10 	vmov	r0, r1, d0
 801062c:	2b00      	cmp	r3, #0
 801062e:	bfd6      	itet	le
 8010630:	460a      	movle	r2, r1
 8010632:	462a      	movgt	r2, r5
 8010634:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010638:	468b      	mov	fp, r1
 801063a:	462f      	mov	r7, r5
 801063c:	bfd4      	ite	le
 801063e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010642:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010646:	4620      	mov	r0, r4
 8010648:	ee10 2a10 	vmov	r2, s0
 801064c:	465b      	mov	r3, fp
 801064e:	4639      	mov	r1, r7
 8010650:	f7f0 f8fc 	bl	800084c <__aeabi_ddiv>
 8010654:	ec41 0b10 	vmov	d0, r0, r1
 8010658:	b003      	add	sp, #12
 801065a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801065e <__copybits>:
 801065e:	3901      	subs	r1, #1
 8010660:	b570      	push	{r4, r5, r6, lr}
 8010662:	1149      	asrs	r1, r1, #5
 8010664:	6914      	ldr	r4, [r2, #16]
 8010666:	3101      	adds	r1, #1
 8010668:	f102 0314 	add.w	r3, r2, #20
 801066c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010670:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010674:	1f05      	subs	r5, r0, #4
 8010676:	42a3      	cmp	r3, r4
 8010678:	d30c      	bcc.n	8010694 <__copybits+0x36>
 801067a:	1aa3      	subs	r3, r4, r2
 801067c:	3b11      	subs	r3, #17
 801067e:	f023 0303 	bic.w	r3, r3, #3
 8010682:	3211      	adds	r2, #17
 8010684:	42a2      	cmp	r2, r4
 8010686:	bf88      	it	hi
 8010688:	2300      	movhi	r3, #0
 801068a:	4418      	add	r0, r3
 801068c:	2300      	movs	r3, #0
 801068e:	4288      	cmp	r0, r1
 8010690:	d305      	bcc.n	801069e <__copybits+0x40>
 8010692:	bd70      	pop	{r4, r5, r6, pc}
 8010694:	f853 6b04 	ldr.w	r6, [r3], #4
 8010698:	f845 6f04 	str.w	r6, [r5, #4]!
 801069c:	e7eb      	b.n	8010676 <__copybits+0x18>
 801069e:	f840 3b04 	str.w	r3, [r0], #4
 80106a2:	e7f4      	b.n	801068e <__copybits+0x30>

080106a4 <__any_on>:
 80106a4:	f100 0214 	add.w	r2, r0, #20
 80106a8:	6900      	ldr	r0, [r0, #16]
 80106aa:	114b      	asrs	r3, r1, #5
 80106ac:	4298      	cmp	r0, r3
 80106ae:	b510      	push	{r4, lr}
 80106b0:	db11      	blt.n	80106d6 <__any_on+0x32>
 80106b2:	dd0a      	ble.n	80106ca <__any_on+0x26>
 80106b4:	f011 011f 	ands.w	r1, r1, #31
 80106b8:	d007      	beq.n	80106ca <__any_on+0x26>
 80106ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80106be:	fa24 f001 	lsr.w	r0, r4, r1
 80106c2:	fa00 f101 	lsl.w	r1, r0, r1
 80106c6:	428c      	cmp	r4, r1
 80106c8:	d10b      	bne.n	80106e2 <__any_on+0x3e>
 80106ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d803      	bhi.n	80106da <__any_on+0x36>
 80106d2:	2000      	movs	r0, #0
 80106d4:	bd10      	pop	{r4, pc}
 80106d6:	4603      	mov	r3, r0
 80106d8:	e7f7      	b.n	80106ca <__any_on+0x26>
 80106da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80106de:	2900      	cmp	r1, #0
 80106e0:	d0f5      	beq.n	80106ce <__any_on+0x2a>
 80106e2:	2001      	movs	r0, #1
 80106e4:	e7f6      	b.n	80106d4 <__any_on+0x30>

080106e6 <sulp>:
 80106e6:	b570      	push	{r4, r5, r6, lr}
 80106e8:	4604      	mov	r4, r0
 80106ea:	460d      	mov	r5, r1
 80106ec:	ec45 4b10 	vmov	d0, r4, r5
 80106f0:	4616      	mov	r6, r2
 80106f2:	f7ff feb7 	bl	8010464 <__ulp>
 80106f6:	ec51 0b10 	vmov	r0, r1, d0
 80106fa:	b17e      	cbz	r6, 801071c <sulp+0x36>
 80106fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010700:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010704:	2b00      	cmp	r3, #0
 8010706:	dd09      	ble.n	801071c <sulp+0x36>
 8010708:	051b      	lsls	r3, r3, #20
 801070a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801070e:	2400      	movs	r4, #0
 8010710:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010714:	4622      	mov	r2, r4
 8010716:	462b      	mov	r3, r5
 8010718:	f7ef ff6e 	bl	80005f8 <__aeabi_dmul>
 801071c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010720 <_strtod_l>:
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	ed2d 8b02 	vpush	{d8}
 8010728:	b09b      	sub	sp, #108	; 0x6c
 801072a:	4604      	mov	r4, r0
 801072c:	9213      	str	r2, [sp, #76]	; 0x4c
 801072e:	2200      	movs	r2, #0
 8010730:	9216      	str	r2, [sp, #88]	; 0x58
 8010732:	460d      	mov	r5, r1
 8010734:	f04f 0800 	mov.w	r8, #0
 8010738:	f04f 0900 	mov.w	r9, #0
 801073c:	460a      	mov	r2, r1
 801073e:	9215      	str	r2, [sp, #84]	; 0x54
 8010740:	7811      	ldrb	r1, [r2, #0]
 8010742:	292b      	cmp	r1, #43	; 0x2b
 8010744:	d04c      	beq.n	80107e0 <_strtod_l+0xc0>
 8010746:	d83a      	bhi.n	80107be <_strtod_l+0x9e>
 8010748:	290d      	cmp	r1, #13
 801074a:	d834      	bhi.n	80107b6 <_strtod_l+0x96>
 801074c:	2908      	cmp	r1, #8
 801074e:	d834      	bhi.n	80107ba <_strtod_l+0x9a>
 8010750:	2900      	cmp	r1, #0
 8010752:	d03d      	beq.n	80107d0 <_strtod_l+0xb0>
 8010754:	2200      	movs	r2, #0
 8010756:	920a      	str	r2, [sp, #40]	; 0x28
 8010758:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801075a:	7832      	ldrb	r2, [r6, #0]
 801075c:	2a30      	cmp	r2, #48	; 0x30
 801075e:	f040 80b4 	bne.w	80108ca <_strtod_l+0x1aa>
 8010762:	7872      	ldrb	r2, [r6, #1]
 8010764:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010768:	2a58      	cmp	r2, #88	; 0x58
 801076a:	d170      	bne.n	801084e <_strtod_l+0x12e>
 801076c:	9302      	str	r3, [sp, #8]
 801076e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	ab16      	add	r3, sp, #88	; 0x58
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	4a8e      	ldr	r2, [pc, #568]	; (80109b0 <_strtod_l+0x290>)
 8010778:	ab17      	add	r3, sp, #92	; 0x5c
 801077a:	a915      	add	r1, sp, #84	; 0x54
 801077c:	4620      	mov	r0, r4
 801077e:	f001 f93f 	bl	8011a00 <__gethex>
 8010782:	f010 070f 	ands.w	r7, r0, #15
 8010786:	4605      	mov	r5, r0
 8010788:	d005      	beq.n	8010796 <_strtod_l+0x76>
 801078a:	2f06      	cmp	r7, #6
 801078c:	d12a      	bne.n	80107e4 <_strtod_l+0xc4>
 801078e:	3601      	adds	r6, #1
 8010790:	2300      	movs	r3, #0
 8010792:	9615      	str	r6, [sp, #84]	; 0x54
 8010794:	930a      	str	r3, [sp, #40]	; 0x28
 8010796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010798:	2b00      	cmp	r3, #0
 801079a:	f040 857f 	bne.w	801129c <_strtod_l+0xb7c>
 801079e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107a0:	b1db      	cbz	r3, 80107da <_strtod_l+0xba>
 80107a2:	4642      	mov	r2, r8
 80107a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80107a8:	ec43 2b10 	vmov	d0, r2, r3
 80107ac:	b01b      	add	sp, #108	; 0x6c
 80107ae:	ecbd 8b02 	vpop	{d8}
 80107b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b6:	2920      	cmp	r1, #32
 80107b8:	d1cc      	bne.n	8010754 <_strtod_l+0x34>
 80107ba:	3201      	adds	r2, #1
 80107bc:	e7bf      	b.n	801073e <_strtod_l+0x1e>
 80107be:	292d      	cmp	r1, #45	; 0x2d
 80107c0:	d1c8      	bne.n	8010754 <_strtod_l+0x34>
 80107c2:	2101      	movs	r1, #1
 80107c4:	910a      	str	r1, [sp, #40]	; 0x28
 80107c6:	1c51      	adds	r1, r2, #1
 80107c8:	9115      	str	r1, [sp, #84]	; 0x54
 80107ca:	7852      	ldrb	r2, [r2, #1]
 80107cc:	2a00      	cmp	r2, #0
 80107ce:	d1c3      	bne.n	8010758 <_strtod_l+0x38>
 80107d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107d2:	9515      	str	r5, [sp, #84]	; 0x54
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f040 855f 	bne.w	8011298 <_strtod_l+0xb78>
 80107da:	4642      	mov	r2, r8
 80107dc:	464b      	mov	r3, r9
 80107de:	e7e3      	b.n	80107a8 <_strtod_l+0x88>
 80107e0:	2100      	movs	r1, #0
 80107e2:	e7ef      	b.n	80107c4 <_strtod_l+0xa4>
 80107e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80107e6:	b13a      	cbz	r2, 80107f8 <_strtod_l+0xd8>
 80107e8:	2135      	movs	r1, #53	; 0x35
 80107ea:	a818      	add	r0, sp, #96	; 0x60
 80107ec:	f7ff ff37 	bl	801065e <__copybits>
 80107f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80107f2:	4620      	mov	r0, r4
 80107f4:	f7ff fb0a 	bl	800fe0c <_Bfree>
 80107f8:	3f01      	subs	r7, #1
 80107fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107fc:	2f04      	cmp	r7, #4
 80107fe:	d806      	bhi.n	801080e <_strtod_l+0xee>
 8010800:	e8df f007 	tbb	[pc, r7]
 8010804:	201d0314 	.word	0x201d0314
 8010808:	14          	.byte	0x14
 8010809:	00          	.byte	0x00
 801080a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801080e:	05e9      	lsls	r1, r5, #23
 8010810:	bf48      	it	mi
 8010812:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010816:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801081a:	0d1b      	lsrs	r3, r3, #20
 801081c:	051b      	lsls	r3, r3, #20
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1b9      	bne.n	8010796 <_strtod_l+0x76>
 8010822:	f7fe fb03 	bl	800ee2c <__errno>
 8010826:	2322      	movs	r3, #34	; 0x22
 8010828:	6003      	str	r3, [r0, #0]
 801082a:	e7b4      	b.n	8010796 <_strtod_l+0x76>
 801082c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010830:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010834:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010838:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801083c:	e7e7      	b.n	801080e <_strtod_l+0xee>
 801083e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80109b8 <_strtod_l+0x298>
 8010842:	e7e4      	b.n	801080e <_strtod_l+0xee>
 8010844:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010848:	f04f 38ff 	mov.w	r8, #4294967295
 801084c:	e7df      	b.n	801080e <_strtod_l+0xee>
 801084e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010850:	1c5a      	adds	r2, r3, #1
 8010852:	9215      	str	r2, [sp, #84]	; 0x54
 8010854:	785b      	ldrb	r3, [r3, #1]
 8010856:	2b30      	cmp	r3, #48	; 0x30
 8010858:	d0f9      	beq.n	801084e <_strtod_l+0x12e>
 801085a:	2b00      	cmp	r3, #0
 801085c:	d09b      	beq.n	8010796 <_strtod_l+0x76>
 801085e:	2301      	movs	r3, #1
 8010860:	f04f 0a00 	mov.w	sl, #0
 8010864:	9304      	str	r3, [sp, #16]
 8010866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010868:	930b      	str	r3, [sp, #44]	; 0x2c
 801086a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801086e:	46d3      	mov	fp, sl
 8010870:	220a      	movs	r2, #10
 8010872:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010874:	7806      	ldrb	r6, [r0, #0]
 8010876:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801087a:	b2d9      	uxtb	r1, r3
 801087c:	2909      	cmp	r1, #9
 801087e:	d926      	bls.n	80108ce <_strtod_l+0x1ae>
 8010880:	494c      	ldr	r1, [pc, #304]	; (80109b4 <_strtod_l+0x294>)
 8010882:	2201      	movs	r2, #1
 8010884:	f000 ffe6 	bl	8011854 <strncmp>
 8010888:	2800      	cmp	r0, #0
 801088a:	d030      	beq.n	80108ee <_strtod_l+0x1ce>
 801088c:	2000      	movs	r0, #0
 801088e:	4632      	mov	r2, r6
 8010890:	9005      	str	r0, [sp, #20]
 8010892:	465e      	mov	r6, fp
 8010894:	4603      	mov	r3, r0
 8010896:	2a65      	cmp	r2, #101	; 0x65
 8010898:	d001      	beq.n	801089e <_strtod_l+0x17e>
 801089a:	2a45      	cmp	r2, #69	; 0x45
 801089c:	d113      	bne.n	80108c6 <_strtod_l+0x1a6>
 801089e:	b91e      	cbnz	r6, 80108a8 <_strtod_l+0x188>
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	4302      	orrs	r2, r0
 80108a4:	d094      	beq.n	80107d0 <_strtod_l+0xb0>
 80108a6:	2600      	movs	r6, #0
 80108a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80108aa:	1c6a      	adds	r2, r5, #1
 80108ac:	9215      	str	r2, [sp, #84]	; 0x54
 80108ae:	786a      	ldrb	r2, [r5, #1]
 80108b0:	2a2b      	cmp	r2, #43	; 0x2b
 80108b2:	d074      	beq.n	801099e <_strtod_l+0x27e>
 80108b4:	2a2d      	cmp	r2, #45	; 0x2d
 80108b6:	d078      	beq.n	80109aa <_strtod_l+0x28a>
 80108b8:	f04f 0c00 	mov.w	ip, #0
 80108bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80108c0:	2909      	cmp	r1, #9
 80108c2:	d97f      	bls.n	80109c4 <_strtod_l+0x2a4>
 80108c4:	9515      	str	r5, [sp, #84]	; 0x54
 80108c6:	2700      	movs	r7, #0
 80108c8:	e09e      	b.n	8010a08 <_strtod_l+0x2e8>
 80108ca:	2300      	movs	r3, #0
 80108cc:	e7c8      	b.n	8010860 <_strtod_l+0x140>
 80108ce:	f1bb 0f08 	cmp.w	fp, #8
 80108d2:	bfd8      	it	le
 80108d4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80108d6:	f100 0001 	add.w	r0, r0, #1
 80108da:	bfda      	itte	le
 80108dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80108e0:	9309      	strle	r3, [sp, #36]	; 0x24
 80108e2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80108e6:	f10b 0b01 	add.w	fp, fp, #1
 80108ea:	9015      	str	r0, [sp, #84]	; 0x54
 80108ec:	e7c1      	b.n	8010872 <_strtod_l+0x152>
 80108ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108f0:	1c5a      	adds	r2, r3, #1
 80108f2:	9215      	str	r2, [sp, #84]	; 0x54
 80108f4:	785a      	ldrb	r2, [r3, #1]
 80108f6:	f1bb 0f00 	cmp.w	fp, #0
 80108fa:	d037      	beq.n	801096c <_strtod_l+0x24c>
 80108fc:	9005      	str	r0, [sp, #20]
 80108fe:	465e      	mov	r6, fp
 8010900:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010904:	2b09      	cmp	r3, #9
 8010906:	d912      	bls.n	801092e <_strtod_l+0x20e>
 8010908:	2301      	movs	r3, #1
 801090a:	e7c4      	b.n	8010896 <_strtod_l+0x176>
 801090c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801090e:	1c5a      	adds	r2, r3, #1
 8010910:	9215      	str	r2, [sp, #84]	; 0x54
 8010912:	785a      	ldrb	r2, [r3, #1]
 8010914:	3001      	adds	r0, #1
 8010916:	2a30      	cmp	r2, #48	; 0x30
 8010918:	d0f8      	beq.n	801090c <_strtod_l+0x1ec>
 801091a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801091e:	2b08      	cmp	r3, #8
 8010920:	f200 84c1 	bhi.w	80112a6 <_strtod_l+0xb86>
 8010924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010926:	9005      	str	r0, [sp, #20]
 8010928:	2000      	movs	r0, #0
 801092a:	930b      	str	r3, [sp, #44]	; 0x2c
 801092c:	4606      	mov	r6, r0
 801092e:	3a30      	subs	r2, #48	; 0x30
 8010930:	f100 0301 	add.w	r3, r0, #1
 8010934:	d014      	beq.n	8010960 <_strtod_l+0x240>
 8010936:	9905      	ldr	r1, [sp, #20]
 8010938:	4419      	add	r1, r3
 801093a:	9105      	str	r1, [sp, #20]
 801093c:	4633      	mov	r3, r6
 801093e:	eb00 0c06 	add.w	ip, r0, r6
 8010942:	210a      	movs	r1, #10
 8010944:	4563      	cmp	r3, ip
 8010946:	d113      	bne.n	8010970 <_strtod_l+0x250>
 8010948:	1833      	adds	r3, r6, r0
 801094a:	2b08      	cmp	r3, #8
 801094c:	f106 0601 	add.w	r6, r6, #1
 8010950:	4406      	add	r6, r0
 8010952:	dc1a      	bgt.n	801098a <_strtod_l+0x26a>
 8010954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010956:	230a      	movs	r3, #10
 8010958:	fb03 2301 	mla	r3, r3, r1, r2
 801095c:	9309      	str	r3, [sp, #36]	; 0x24
 801095e:	2300      	movs	r3, #0
 8010960:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010962:	1c51      	adds	r1, r2, #1
 8010964:	9115      	str	r1, [sp, #84]	; 0x54
 8010966:	7852      	ldrb	r2, [r2, #1]
 8010968:	4618      	mov	r0, r3
 801096a:	e7c9      	b.n	8010900 <_strtod_l+0x1e0>
 801096c:	4658      	mov	r0, fp
 801096e:	e7d2      	b.n	8010916 <_strtod_l+0x1f6>
 8010970:	2b08      	cmp	r3, #8
 8010972:	f103 0301 	add.w	r3, r3, #1
 8010976:	dc03      	bgt.n	8010980 <_strtod_l+0x260>
 8010978:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801097a:	434f      	muls	r7, r1
 801097c:	9709      	str	r7, [sp, #36]	; 0x24
 801097e:	e7e1      	b.n	8010944 <_strtod_l+0x224>
 8010980:	2b10      	cmp	r3, #16
 8010982:	bfd8      	it	le
 8010984:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010988:	e7dc      	b.n	8010944 <_strtod_l+0x224>
 801098a:	2e10      	cmp	r6, #16
 801098c:	bfdc      	itt	le
 801098e:	230a      	movle	r3, #10
 8010990:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010994:	e7e3      	b.n	801095e <_strtod_l+0x23e>
 8010996:	2300      	movs	r3, #0
 8010998:	9305      	str	r3, [sp, #20]
 801099a:	2301      	movs	r3, #1
 801099c:	e780      	b.n	80108a0 <_strtod_l+0x180>
 801099e:	f04f 0c00 	mov.w	ip, #0
 80109a2:	1caa      	adds	r2, r5, #2
 80109a4:	9215      	str	r2, [sp, #84]	; 0x54
 80109a6:	78aa      	ldrb	r2, [r5, #2]
 80109a8:	e788      	b.n	80108bc <_strtod_l+0x19c>
 80109aa:	f04f 0c01 	mov.w	ip, #1
 80109ae:	e7f8      	b.n	80109a2 <_strtod_l+0x282>
 80109b0:	08014060 	.word	0x08014060
 80109b4:	0801405c 	.word	0x0801405c
 80109b8:	7ff00000 	.word	0x7ff00000
 80109bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109be:	1c51      	adds	r1, r2, #1
 80109c0:	9115      	str	r1, [sp, #84]	; 0x54
 80109c2:	7852      	ldrb	r2, [r2, #1]
 80109c4:	2a30      	cmp	r2, #48	; 0x30
 80109c6:	d0f9      	beq.n	80109bc <_strtod_l+0x29c>
 80109c8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80109cc:	2908      	cmp	r1, #8
 80109ce:	f63f af7a 	bhi.w	80108c6 <_strtod_l+0x1a6>
 80109d2:	3a30      	subs	r2, #48	; 0x30
 80109d4:	9208      	str	r2, [sp, #32]
 80109d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109d8:	920c      	str	r2, [sp, #48]	; 0x30
 80109da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109dc:	1c57      	adds	r7, r2, #1
 80109de:	9715      	str	r7, [sp, #84]	; 0x54
 80109e0:	7852      	ldrb	r2, [r2, #1]
 80109e2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80109e6:	f1be 0f09 	cmp.w	lr, #9
 80109ea:	d938      	bls.n	8010a5e <_strtod_l+0x33e>
 80109ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109ee:	1a7f      	subs	r7, r7, r1
 80109f0:	2f08      	cmp	r7, #8
 80109f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80109f6:	dc03      	bgt.n	8010a00 <_strtod_l+0x2e0>
 80109f8:	9908      	ldr	r1, [sp, #32]
 80109fa:	428f      	cmp	r7, r1
 80109fc:	bfa8      	it	ge
 80109fe:	460f      	movge	r7, r1
 8010a00:	f1bc 0f00 	cmp.w	ip, #0
 8010a04:	d000      	beq.n	8010a08 <_strtod_l+0x2e8>
 8010a06:	427f      	negs	r7, r7
 8010a08:	2e00      	cmp	r6, #0
 8010a0a:	d14f      	bne.n	8010aac <_strtod_l+0x38c>
 8010a0c:	9904      	ldr	r1, [sp, #16]
 8010a0e:	4301      	orrs	r1, r0
 8010a10:	f47f aec1 	bne.w	8010796 <_strtod_l+0x76>
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f47f aedb 	bne.w	80107d0 <_strtod_l+0xb0>
 8010a1a:	2a69      	cmp	r2, #105	; 0x69
 8010a1c:	d029      	beq.n	8010a72 <_strtod_l+0x352>
 8010a1e:	dc26      	bgt.n	8010a6e <_strtod_l+0x34e>
 8010a20:	2a49      	cmp	r2, #73	; 0x49
 8010a22:	d026      	beq.n	8010a72 <_strtod_l+0x352>
 8010a24:	2a4e      	cmp	r2, #78	; 0x4e
 8010a26:	f47f aed3 	bne.w	80107d0 <_strtod_l+0xb0>
 8010a2a:	499b      	ldr	r1, [pc, #620]	; (8010c98 <_strtod_l+0x578>)
 8010a2c:	a815      	add	r0, sp, #84	; 0x54
 8010a2e:	f001 fa27 	bl	8011e80 <__match>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	f43f aecc 	beq.w	80107d0 <_strtod_l+0xb0>
 8010a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	2b28      	cmp	r3, #40	; 0x28
 8010a3e:	d12f      	bne.n	8010aa0 <_strtod_l+0x380>
 8010a40:	4996      	ldr	r1, [pc, #600]	; (8010c9c <_strtod_l+0x57c>)
 8010a42:	aa18      	add	r2, sp, #96	; 0x60
 8010a44:	a815      	add	r0, sp, #84	; 0x54
 8010a46:	f001 fa2f 	bl	8011ea8 <__hexnan>
 8010a4a:	2805      	cmp	r0, #5
 8010a4c:	d128      	bne.n	8010aa0 <_strtod_l+0x380>
 8010a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010a54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010a58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010a5c:	e69b      	b.n	8010796 <_strtod_l+0x76>
 8010a5e:	9f08      	ldr	r7, [sp, #32]
 8010a60:	210a      	movs	r1, #10
 8010a62:	fb01 2107 	mla	r1, r1, r7, r2
 8010a66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010a6a:	9208      	str	r2, [sp, #32]
 8010a6c:	e7b5      	b.n	80109da <_strtod_l+0x2ba>
 8010a6e:	2a6e      	cmp	r2, #110	; 0x6e
 8010a70:	e7d9      	b.n	8010a26 <_strtod_l+0x306>
 8010a72:	498b      	ldr	r1, [pc, #556]	; (8010ca0 <_strtod_l+0x580>)
 8010a74:	a815      	add	r0, sp, #84	; 0x54
 8010a76:	f001 fa03 	bl	8011e80 <__match>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	f43f aea8 	beq.w	80107d0 <_strtod_l+0xb0>
 8010a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a82:	4988      	ldr	r1, [pc, #544]	; (8010ca4 <_strtod_l+0x584>)
 8010a84:	3b01      	subs	r3, #1
 8010a86:	a815      	add	r0, sp, #84	; 0x54
 8010a88:	9315      	str	r3, [sp, #84]	; 0x54
 8010a8a:	f001 f9f9 	bl	8011e80 <__match>
 8010a8e:	b910      	cbnz	r0, 8010a96 <_strtod_l+0x376>
 8010a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a92:	3301      	adds	r3, #1
 8010a94:	9315      	str	r3, [sp, #84]	; 0x54
 8010a96:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010cb4 <_strtod_l+0x594>
 8010a9a:	f04f 0800 	mov.w	r8, #0
 8010a9e:	e67a      	b.n	8010796 <_strtod_l+0x76>
 8010aa0:	4881      	ldr	r0, [pc, #516]	; (8010ca8 <_strtod_l+0x588>)
 8010aa2:	f000 ff09 	bl	80118b8 <nan>
 8010aa6:	ec59 8b10 	vmov	r8, r9, d0
 8010aaa:	e674      	b.n	8010796 <_strtod_l+0x76>
 8010aac:	9b05      	ldr	r3, [sp, #20]
 8010aae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ab0:	1afb      	subs	r3, r7, r3
 8010ab2:	f1bb 0f00 	cmp.w	fp, #0
 8010ab6:	bf08      	it	eq
 8010ab8:	46b3      	moveq	fp, r6
 8010aba:	2e10      	cmp	r6, #16
 8010abc:	9308      	str	r3, [sp, #32]
 8010abe:	4635      	mov	r5, r6
 8010ac0:	bfa8      	it	ge
 8010ac2:	2510      	movge	r5, #16
 8010ac4:	f7ef fd1e 	bl	8000504 <__aeabi_ui2d>
 8010ac8:	2e09      	cmp	r6, #9
 8010aca:	4680      	mov	r8, r0
 8010acc:	4689      	mov	r9, r1
 8010ace:	dd13      	ble.n	8010af8 <_strtod_l+0x3d8>
 8010ad0:	4b76      	ldr	r3, [pc, #472]	; (8010cac <_strtod_l+0x58c>)
 8010ad2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010ad6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010ada:	f7ef fd8d 	bl	80005f8 <__aeabi_dmul>
 8010ade:	4680      	mov	r8, r0
 8010ae0:	4650      	mov	r0, sl
 8010ae2:	4689      	mov	r9, r1
 8010ae4:	f7ef fd0e 	bl	8000504 <__aeabi_ui2d>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	4640      	mov	r0, r8
 8010aee:	4649      	mov	r1, r9
 8010af0:	f7ef fbcc 	bl	800028c <__adddf3>
 8010af4:	4680      	mov	r8, r0
 8010af6:	4689      	mov	r9, r1
 8010af8:	2e0f      	cmp	r6, #15
 8010afa:	dc38      	bgt.n	8010b6e <_strtod_l+0x44e>
 8010afc:	9b08      	ldr	r3, [sp, #32]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	f43f ae49 	beq.w	8010796 <_strtod_l+0x76>
 8010b04:	dd24      	ble.n	8010b50 <_strtod_l+0x430>
 8010b06:	2b16      	cmp	r3, #22
 8010b08:	dc0b      	bgt.n	8010b22 <_strtod_l+0x402>
 8010b0a:	4968      	ldr	r1, [pc, #416]	; (8010cac <_strtod_l+0x58c>)
 8010b0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b14:	4642      	mov	r2, r8
 8010b16:	464b      	mov	r3, r9
 8010b18:	f7ef fd6e 	bl	80005f8 <__aeabi_dmul>
 8010b1c:	4680      	mov	r8, r0
 8010b1e:	4689      	mov	r9, r1
 8010b20:	e639      	b.n	8010796 <_strtod_l+0x76>
 8010b22:	9a08      	ldr	r2, [sp, #32]
 8010b24:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	db20      	blt.n	8010b6e <_strtod_l+0x44e>
 8010b2c:	4c5f      	ldr	r4, [pc, #380]	; (8010cac <_strtod_l+0x58c>)
 8010b2e:	f1c6 060f 	rsb	r6, r6, #15
 8010b32:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010b36:	4642      	mov	r2, r8
 8010b38:	464b      	mov	r3, r9
 8010b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b3e:	f7ef fd5b 	bl	80005f8 <__aeabi_dmul>
 8010b42:	9b08      	ldr	r3, [sp, #32]
 8010b44:	1b9e      	subs	r6, r3, r6
 8010b46:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010b4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b4e:	e7e3      	b.n	8010b18 <_strtod_l+0x3f8>
 8010b50:	9b08      	ldr	r3, [sp, #32]
 8010b52:	3316      	adds	r3, #22
 8010b54:	db0b      	blt.n	8010b6e <_strtod_l+0x44e>
 8010b56:	9b05      	ldr	r3, [sp, #20]
 8010b58:	1bdf      	subs	r7, r3, r7
 8010b5a:	4b54      	ldr	r3, [pc, #336]	; (8010cac <_strtod_l+0x58c>)
 8010b5c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b64:	4640      	mov	r0, r8
 8010b66:	4649      	mov	r1, r9
 8010b68:	f7ef fe70 	bl	800084c <__aeabi_ddiv>
 8010b6c:	e7d6      	b.n	8010b1c <_strtod_l+0x3fc>
 8010b6e:	9b08      	ldr	r3, [sp, #32]
 8010b70:	1b75      	subs	r5, r6, r5
 8010b72:	441d      	add	r5, r3
 8010b74:	2d00      	cmp	r5, #0
 8010b76:	dd70      	ble.n	8010c5a <_strtod_l+0x53a>
 8010b78:	f015 030f 	ands.w	r3, r5, #15
 8010b7c:	d00a      	beq.n	8010b94 <_strtod_l+0x474>
 8010b7e:	494b      	ldr	r1, [pc, #300]	; (8010cac <_strtod_l+0x58c>)
 8010b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b84:	4642      	mov	r2, r8
 8010b86:	464b      	mov	r3, r9
 8010b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b8c:	f7ef fd34 	bl	80005f8 <__aeabi_dmul>
 8010b90:	4680      	mov	r8, r0
 8010b92:	4689      	mov	r9, r1
 8010b94:	f035 050f 	bics.w	r5, r5, #15
 8010b98:	d04d      	beq.n	8010c36 <_strtod_l+0x516>
 8010b9a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010b9e:	dd22      	ble.n	8010be6 <_strtod_l+0x4c6>
 8010ba0:	2500      	movs	r5, #0
 8010ba2:	46ab      	mov	fp, r5
 8010ba4:	9509      	str	r5, [sp, #36]	; 0x24
 8010ba6:	9505      	str	r5, [sp, #20]
 8010ba8:	2322      	movs	r3, #34	; 0x22
 8010baa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010cb4 <_strtod_l+0x594>
 8010bae:	6023      	str	r3, [r4, #0]
 8010bb0:	f04f 0800 	mov.w	r8, #0
 8010bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f43f aded 	beq.w	8010796 <_strtod_l+0x76>
 8010bbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f7ff f924 	bl	800fe0c <_Bfree>
 8010bc4:	9905      	ldr	r1, [sp, #20]
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f7ff f920 	bl	800fe0c <_Bfree>
 8010bcc:	4659      	mov	r1, fp
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f7ff f91c 	bl	800fe0c <_Bfree>
 8010bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f7ff f918 	bl	800fe0c <_Bfree>
 8010bdc:	4629      	mov	r1, r5
 8010bde:	4620      	mov	r0, r4
 8010be0:	f7ff f914 	bl	800fe0c <_Bfree>
 8010be4:	e5d7      	b.n	8010796 <_strtod_l+0x76>
 8010be6:	4b32      	ldr	r3, [pc, #200]	; (8010cb0 <_strtod_l+0x590>)
 8010be8:	9304      	str	r3, [sp, #16]
 8010bea:	2300      	movs	r3, #0
 8010bec:	112d      	asrs	r5, r5, #4
 8010bee:	4640      	mov	r0, r8
 8010bf0:	4649      	mov	r1, r9
 8010bf2:	469a      	mov	sl, r3
 8010bf4:	2d01      	cmp	r5, #1
 8010bf6:	dc21      	bgt.n	8010c3c <_strtod_l+0x51c>
 8010bf8:	b10b      	cbz	r3, 8010bfe <_strtod_l+0x4de>
 8010bfa:	4680      	mov	r8, r0
 8010bfc:	4689      	mov	r9, r1
 8010bfe:	492c      	ldr	r1, [pc, #176]	; (8010cb0 <_strtod_l+0x590>)
 8010c00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010c04:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010c08:	4642      	mov	r2, r8
 8010c0a:	464b      	mov	r3, r9
 8010c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	4b27      	ldr	r3, [pc, #156]	; (8010cb4 <_strtod_l+0x594>)
 8010c16:	460a      	mov	r2, r1
 8010c18:	400b      	ands	r3, r1
 8010c1a:	4927      	ldr	r1, [pc, #156]	; (8010cb8 <_strtod_l+0x598>)
 8010c1c:	428b      	cmp	r3, r1
 8010c1e:	4680      	mov	r8, r0
 8010c20:	d8be      	bhi.n	8010ba0 <_strtod_l+0x480>
 8010c22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c26:	428b      	cmp	r3, r1
 8010c28:	bf86      	itte	hi
 8010c2a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010cbc <_strtod_l+0x59c>
 8010c2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010c32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010c36:	2300      	movs	r3, #0
 8010c38:	9304      	str	r3, [sp, #16]
 8010c3a:	e07b      	b.n	8010d34 <_strtod_l+0x614>
 8010c3c:	07ea      	lsls	r2, r5, #31
 8010c3e:	d505      	bpl.n	8010c4c <_strtod_l+0x52c>
 8010c40:	9b04      	ldr	r3, [sp, #16]
 8010c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c46:	f7ef fcd7 	bl	80005f8 <__aeabi_dmul>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	9a04      	ldr	r2, [sp, #16]
 8010c4e:	3208      	adds	r2, #8
 8010c50:	f10a 0a01 	add.w	sl, sl, #1
 8010c54:	106d      	asrs	r5, r5, #1
 8010c56:	9204      	str	r2, [sp, #16]
 8010c58:	e7cc      	b.n	8010bf4 <_strtod_l+0x4d4>
 8010c5a:	d0ec      	beq.n	8010c36 <_strtod_l+0x516>
 8010c5c:	426d      	negs	r5, r5
 8010c5e:	f015 020f 	ands.w	r2, r5, #15
 8010c62:	d00a      	beq.n	8010c7a <_strtod_l+0x55a>
 8010c64:	4b11      	ldr	r3, [pc, #68]	; (8010cac <_strtod_l+0x58c>)
 8010c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	4649      	mov	r1, r9
 8010c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c72:	f7ef fdeb 	bl	800084c <__aeabi_ddiv>
 8010c76:	4680      	mov	r8, r0
 8010c78:	4689      	mov	r9, r1
 8010c7a:	112d      	asrs	r5, r5, #4
 8010c7c:	d0db      	beq.n	8010c36 <_strtod_l+0x516>
 8010c7e:	2d1f      	cmp	r5, #31
 8010c80:	dd1e      	ble.n	8010cc0 <_strtod_l+0x5a0>
 8010c82:	2500      	movs	r5, #0
 8010c84:	46ab      	mov	fp, r5
 8010c86:	9509      	str	r5, [sp, #36]	; 0x24
 8010c88:	9505      	str	r5, [sp, #20]
 8010c8a:	2322      	movs	r3, #34	; 0x22
 8010c8c:	f04f 0800 	mov.w	r8, #0
 8010c90:	f04f 0900 	mov.w	r9, #0
 8010c94:	6023      	str	r3, [r4, #0]
 8010c96:	e78d      	b.n	8010bb4 <_strtod_l+0x494>
 8010c98:	08013e4d 	.word	0x08013e4d
 8010c9c:	08014074 	.word	0x08014074
 8010ca0:	08013e45 	.word	0x08013e45
 8010ca4:	08013e7c 	.word	0x08013e7c
 8010ca8:	08014205 	.word	0x08014205
 8010cac:	08013f88 	.word	0x08013f88
 8010cb0:	08013f60 	.word	0x08013f60
 8010cb4:	7ff00000 	.word	0x7ff00000
 8010cb8:	7ca00000 	.word	0x7ca00000
 8010cbc:	7fefffff 	.word	0x7fefffff
 8010cc0:	f015 0310 	ands.w	r3, r5, #16
 8010cc4:	bf18      	it	ne
 8010cc6:	236a      	movne	r3, #106	; 0x6a
 8010cc8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801106c <_strtod_l+0x94c>
 8010ccc:	9304      	str	r3, [sp, #16]
 8010cce:	4640      	mov	r0, r8
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	07ea      	lsls	r2, r5, #31
 8010cd6:	d504      	bpl.n	8010ce2 <_strtod_l+0x5c2>
 8010cd8:	e9da 2300 	ldrd	r2, r3, [sl]
 8010cdc:	f7ef fc8c 	bl	80005f8 <__aeabi_dmul>
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	106d      	asrs	r5, r5, #1
 8010ce4:	f10a 0a08 	add.w	sl, sl, #8
 8010ce8:	d1f4      	bne.n	8010cd4 <_strtod_l+0x5b4>
 8010cea:	b10b      	cbz	r3, 8010cf0 <_strtod_l+0x5d0>
 8010cec:	4680      	mov	r8, r0
 8010cee:	4689      	mov	r9, r1
 8010cf0:	9b04      	ldr	r3, [sp, #16]
 8010cf2:	b1bb      	cbz	r3, 8010d24 <_strtod_l+0x604>
 8010cf4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010cf8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	4649      	mov	r1, r9
 8010d00:	dd10      	ble.n	8010d24 <_strtod_l+0x604>
 8010d02:	2b1f      	cmp	r3, #31
 8010d04:	f340 811e 	ble.w	8010f44 <_strtod_l+0x824>
 8010d08:	2b34      	cmp	r3, #52	; 0x34
 8010d0a:	bfde      	ittt	le
 8010d0c:	f04f 33ff 	movle.w	r3, #4294967295
 8010d10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010d14:	4093      	lslle	r3, r2
 8010d16:	f04f 0800 	mov.w	r8, #0
 8010d1a:	bfcc      	ite	gt
 8010d1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010d20:	ea03 0901 	andle.w	r9, r3, r1
 8010d24:	2200      	movs	r2, #0
 8010d26:	2300      	movs	r3, #0
 8010d28:	4640      	mov	r0, r8
 8010d2a:	4649      	mov	r1, r9
 8010d2c:	f7ef fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d1a6      	bne.n	8010c82 <_strtod_l+0x562>
 8010d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d3a:	4633      	mov	r3, r6
 8010d3c:	465a      	mov	r2, fp
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f7ff f8cc 	bl	800fedc <__s2b>
 8010d44:	9009      	str	r0, [sp, #36]	; 0x24
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f43f af2a 	beq.w	8010ba0 <_strtod_l+0x480>
 8010d4c:	9a08      	ldr	r2, [sp, #32]
 8010d4e:	9b05      	ldr	r3, [sp, #20]
 8010d50:	2a00      	cmp	r2, #0
 8010d52:	eba3 0307 	sub.w	r3, r3, r7
 8010d56:	bfa8      	it	ge
 8010d58:	2300      	movge	r3, #0
 8010d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d5c:	2500      	movs	r5, #0
 8010d5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010d62:	9312      	str	r3, [sp, #72]	; 0x48
 8010d64:	46ab      	mov	fp, r5
 8010d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d68:	4620      	mov	r0, r4
 8010d6a:	6859      	ldr	r1, [r3, #4]
 8010d6c:	f7ff f80e 	bl	800fd8c <_Balloc>
 8010d70:	9005      	str	r0, [sp, #20]
 8010d72:	2800      	cmp	r0, #0
 8010d74:	f43f af18 	beq.w	8010ba8 <_strtod_l+0x488>
 8010d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d7a:	691a      	ldr	r2, [r3, #16]
 8010d7c:	3202      	adds	r2, #2
 8010d7e:	f103 010c 	add.w	r1, r3, #12
 8010d82:	0092      	lsls	r2, r2, #2
 8010d84:	300c      	adds	r0, #12
 8010d86:	f000 fd87 	bl	8011898 <memcpy>
 8010d8a:	ec49 8b10 	vmov	d0, r8, r9
 8010d8e:	aa18      	add	r2, sp, #96	; 0x60
 8010d90:	a917      	add	r1, sp, #92	; 0x5c
 8010d92:	4620      	mov	r0, r4
 8010d94:	f7ff fbd6 	bl	8010544 <__d2b>
 8010d98:	ec49 8b18 	vmov	d8, r8, r9
 8010d9c:	9016      	str	r0, [sp, #88]	; 0x58
 8010d9e:	2800      	cmp	r0, #0
 8010da0:	f43f af02 	beq.w	8010ba8 <_strtod_l+0x488>
 8010da4:	2101      	movs	r1, #1
 8010da6:	4620      	mov	r0, r4
 8010da8:	f7ff f930 	bl	801000c <__i2b>
 8010dac:	4683      	mov	fp, r0
 8010dae:	2800      	cmp	r0, #0
 8010db0:	f43f aefa 	beq.w	8010ba8 <_strtod_l+0x488>
 8010db4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010db6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010db8:	2e00      	cmp	r6, #0
 8010dba:	bfab      	itete	ge
 8010dbc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010dbe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010dc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010dc2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010dc6:	bfac      	ite	ge
 8010dc8:	eb06 0a03 	addge.w	sl, r6, r3
 8010dcc:	1b9f      	sublt	r7, r3, r6
 8010dce:	9b04      	ldr	r3, [sp, #16]
 8010dd0:	1af6      	subs	r6, r6, r3
 8010dd2:	4416      	add	r6, r2
 8010dd4:	4ba0      	ldr	r3, [pc, #640]	; (8011058 <_strtod_l+0x938>)
 8010dd6:	3e01      	subs	r6, #1
 8010dd8:	429e      	cmp	r6, r3
 8010dda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010dde:	f280 80c4 	bge.w	8010f6a <_strtod_l+0x84a>
 8010de2:	1b9b      	subs	r3, r3, r6
 8010de4:	2b1f      	cmp	r3, #31
 8010de6:	eba2 0203 	sub.w	r2, r2, r3
 8010dea:	f04f 0101 	mov.w	r1, #1
 8010dee:	f300 80b0 	bgt.w	8010f52 <_strtod_l+0x832>
 8010df2:	fa01 f303 	lsl.w	r3, r1, r3
 8010df6:	930e      	str	r3, [sp, #56]	; 0x38
 8010df8:	2300      	movs	r3, #0
 8010dfa:	930d      	str	r3, [sp, #52]	; 0x34
 8010dfc:	eb0a 0602 	add.w	r6, sl, r2
 8010e00:	9b04      	ldr	r3, [sp, #16]
 8010e02:	45b2      	cmp	sl, r6
 8010e04:	4417      	add	r7, r2
 8010e06:	441f      	add	r7, r3
 8010e08:	4653      	mov	r3, sl
 8010e0a:	bfa8      	it	ge
 8010e0c:	4633      	movge	r3, r6
 8010e0e:	42bb      	cmp	r3, r7
 8010e10:	bfa8      	it	ge
 8010e12:	463b      	movge	r3, r7
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	bfc2      	ittt	gt
 8010e18:	1af6      	subgt	r6, r6, r3
 8010e1a:	1aff      	subgt	r7, r7, r3
 8010e1c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	dd17      	ble.n	8010e56 <_strtod_l+0x736>
 8010e26:	4659      	mov	r1, fp
 8010e28:	461a      	mov	r2, r3
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f7ff f9ae 	bl	801018c <__pow5mult>
 8010e30:	4683      	mov	fp, r0
 8010e32:	2800      	cmp	r0, #0
 8010e34:	f43f aeb8 	beq.w	8010ba8 <_strtod_l+0x488>
 8010e38:	4601      	mov	r1, r0
 8010e3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f7ff f8fb 	bl	8010038 <__multiply>
 8010e42:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e44:	2800      	cmp	r0, #0
 8010e46:	f43f aeaf 	beq.w	8010ba8 <_strtod_l+0x488>
 8010e4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f7fe ffdd 	bl	800fe0c <_Bfree>
 8010e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e54:	9316      	str	r3, [sp, #88]	; 0x58
 8010e56:	2e00      	cmp	r6, #0
 8010e58:	f300 808c 	bgt.w	8010f74 <_strtod_l+0x854>
 8010e5c:	9b08      	ldr	r3, [sp, #32]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	dd08      	ble.n	8010e74 <_strtod_l+0x754>
 8010e62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e64:	9905      	ldr	r1, [sp, #20]
 8010e66:	4620      	mov	r0, r4
 8010e68:	f7ff f990 	bl	801018c <__pow5mult>
 8010e6c:	9005      	str	r0, [sp, #20]
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	f43f ae9a 	beq.w	8010ba8 <_strtod_l+0x488>
 8010e74:	2f00      	cmp	r7, #0
 8010e76:	dd08      	ble.n	8010e8a <_strtod_l+0x76a>
 8010e78:	9905      	ldr	r1, [sp, #20]
 8010e7a:	463a      	mov	r2, r7
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f7ff f9df 	bl	8010240 <__lshift>
 8010e82:	9005      	str	r0, [sp, #20]
 8010e84:	2800      	cmp	r0, #0
 8010e86:	f43f ae8f 	beq.w	8010ba8 <_strtod_l+0x488>
 8010e8a:	f1ba 0f00 	cmp.w	sl, #0
 8010e8e:	dd08      	ble.n	8010ea2 <_strtod_l+0x782>
 8010e90:	4659      	mov	r1, fp
 8010e92:	4652      	mov	r2, sl
 8010e94:	4620      	mov	r0, r4
 8010e96:	f7ff f9d3 	bl	8010240 <__lshift>
 8010e9a:	4683      	mov	fp, r0
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	f43f ae83 	beq.w	8010ba8 <_strtod_l+0x488>
 8010ea2:	9a05      	ldr	r2, [sp, #20]
 8010ea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f7ff fa52 	bl	8010350 <__mdiff>
 8010eac:	4605      	mov	r5, r0
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	f43f ae7a 	beq.w	8010ba8 <_strtod_l+0x488>
 8010eb4:	68c3      	ldr	r3, [r0, #12]
 8010eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010eb8:	2300      	movs	r3, #0
 8010eba:	60c3      	str	r3, [r0, #12]
 8010ebc:	4659      	mov	r1, fp
 8010ebe:	f7ff fa2b 	bl	8010318 <__mcmp>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	da60      	bge.n	8010f88 <_strtod_l+0x868>
 8010ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ec8:	ea53 0308 	orrs.w	r3, r3, r8
 8010ecc:	f040 8084 	bne.w	8010fd8 <_strtod_l+0x8b8>
 8010ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d17f      	bne.n	8010fd8 <_strtod_l+0x8b8>
 8010ed8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010edc:	0d1b      	lsrs	r3, r3, #20
 8010ede:	051b      	lsls	r3, r3, #20
 8010ee0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010ee4:	d978      	bls.n	8010fd8 <_strtod_l+0x8b8>
 8010ee6:	696b      	ldr	r3, [r5, #20]
 8010ee8:	b913      	cbnz	r3, 8010ef0 <_strtod_l+0x7d0>
 8010eea:	692b      	ldr	r3, [r5, #16]
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	dd73      	ble.n	8010fd8 <_strtod_l+0x8b8>
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f7ff f9a3 	bl	8010240 <__lshift>
 8010efa:	4659      	mov	r1, fp
 8010efc:	4605      	mov	r5, r0
 8010efe:	f7ff fa0b 	bl	8010318 <__mcmp>
 8010f02:	2800      	cmp	r0, #0
 8010f04:	dd68      	ble.n	8010fd8 <_strtod_l+0x8b8>
 8010f06:	9904      	ldr	r1, [sp, #16]
 8010f08:	4a54      	ldr	r2, [pc, #336]	; (801105c <_strtod_l+0x93c>)
 8010f0a:	464b      	mov	r3, r9
 8010f0c:	2900      	cmp	r1, #0
 8010f0e:	f000 8084 	beq.w	801101a <_strtod_l+0x8fa>
 8010f12:	ea02 0109 	and.w	r1, r2, r9
 8010f16:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f1a:	dc7e      	bgt.n	801101a <_strtod_l+0x8fa>
 8010f1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f20:	f77f aeb3 	ble.w	8010c8a <_strtod_l+0x56a>
 8010f24:	4b4e      	ldr	r3, [pc, #312]	; (8011060 <_strtod_l+0x940>)
 8010f26:	4640      	mov	r0, r8
 8010f28:	4649      	mov	r1, r9
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f7ef fb64 	bl	80005f8 <__aeabi_dmul>
 8010f30:	4b4a      	ldr	r3, [pc, #296]	; (801105c <_strtod_l+0x93c>)
 8010f32:	400b      	ands	r3, r1
 8010f34:	4680      	mov	r8, r0
 8010f36:	4689      	mov	r9, r1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f47f ae3f 	bne.w	8010bbc <_strtod_l+0x49c>
 8010f3e:	2322      	movs	r3, #34	; 0x22
 8010f40:	6023      	str	r3, [r4, #0]
 8010f42:	e63b      	b.n	8010bbc <_strtod_l+0x49c>
 8010f44:	f04f 32ff 	mov.w	r2, #4294967295
 8010f48:	fa02 f303 	lsl.w	r3, r2, r3
 8010f4c:	ea03 0808 	and.w	r8, r3, r8
 8010f50:	e6e8      	b.n	8010d24 <_strtod_l+0x604>
 8010f52:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010f56:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010f5a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010f5e:	36e2      	adds	r6, #226	; 0xe2
 8010f60:	fa01 f306 	lsl.w	r3, r1, r6
 8010f64:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010f68:	e748      	b.n	8010dfc <_strtod_l+0x6dc>
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010f72:	e743      	b.n	8010dfc <_strtod_l+0x6dc>
 8010f74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010f76:	4632      	mov	r2, r6
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f7ff f961 	bl	8010240 <__lshift>
 8010f7e:	9016      	str	r0, [sp, #88]	; 0x58
 8010f80:	2800      	cmp	r0, #0
 8010f82:	f47f af6b 	bne.w	8010e5c <_strtod_l+0x73c>
 8010f86:	e60f      	b.n	8010ba8 <_strtod_l+0x488>
 8010f88:	46ca      	mov	sl, r9
 8010f8a:	d171      	bne.n	8011070 <_strtod_l+0x950>
 8010f8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f92:	b352      	cbz	r2, 8010fea <_strtod_l+0x8ca>
 8010f94:	4a33      	ldr	r2, [pc, #204]	; (8011064 <_strtod_l+0x944>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d12a      	bne.n	8010ff0 <_strtod_l+0x8d0>
 8010f9a:	9b04      	ldr	r3, [sp, #16]
 8010f9c:	4641      	mov	r1, r8
 8010f9e:	b1fb      	cbz	r3, 8010fe0 <_strtod_l+0x8c0>
 8010fa0:	4b2e      	ldr	r3, [pc, #184]	; (801105c <_strtod_l+0x93c>)
 8010fa2:	ea09 0303 	and.w	r3, r9, r3
 8010fa6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010faa:	f04f 32ff 	mov.w	r2, #4294967295
 8010fae:	d81a      	bhi.n	8010fe6 <_strtod_l+0x8c6>
 8010fb0:	0d1b      	lsrs	r3, r3, #20
 8010fb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fba:	4299      	cmp	r1, r3
 8010fbc:	d118      	bne.n	8010ff0 <_strtod_l+0x8d0>
 8010fbe:	4b2a      	ldr	r3, [pc, #168]	; (8011068 <_strtod_l+0x948>)
 8010fc0:	459a      	cmp	sl, r3
 8010fc2:	d102      	bne.n	8010fca <_strtod_l+0x8aa>
 8010fc4:	3101      	adds	r1, #1
 8010fc6:	f43f adef 	beq.w	8010ba8 <_strtod_l+0x488>
 8010fca:	4b24      	ldr	r3, [pc, #144]	; (801105c <_strtod_l+0x93c>)
 8010fcc:	ea0a 0303 	and.w	r3, sl, r3
 8010fd0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010fd4:	f04f 0800 	mov.w	r8, #0
 8010fd8:	9b04      	ldr	r3, [sp, #16]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1a2      	bne.n	8010f24 <_strtod_l+0x804>
 8010fde:	e5ed      	b.n	8010bbc <_strtod_l+0x49c>
 8010fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe4:	e7e9      	b.n	8010fba <_strtod_l+0x89a>
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	e7e7      	b.n	8010fba <_strtod_l+0x89a>
 8010fea:	ea53 0308 	orrs.w	r3, r3, r8
 8010fee:	d08a      	beq.n	8010f06 <_strtod_l+0x7e6>
 8010ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ff2:	b1e3      	cbz	r3, 801102e <_strtod_l+0x90e>
 8010ff4:	ea13 0f0a 	tst.w	r3, sl
 8010ff8:	d0ee      	beq.n	8010fd8 <_strtod_l+0x8b8>
 8010ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ffc:	9a04      	ldr	r2, [sp, #16]
 8010ffe:	4640      	mov	r0, r8
 8011000:	4649      	mov	r1, r9
 8011002:	b1c3      	cbz	r3, 8011036 <_strtod_l+0x916>
 8011004:	f7ff fb6f 	bl	80106e6 <sulp>
 8011008:	4602      	mov	r2, r0
 801100a:	460b      	mov	r3, r1
 801100c:	ec51 0b18 	vmov	r0, r1, d8
 8011010:	f7ef f93c 	bl	800028c <__adddf3>
 8011014:	4680      	mov	r8, r0
 8011016:	4689      	mov	r9, r1
 8011018:	e7de      	b.n	8010fd8 <_strtod_l+0x8b8>
 801101a:	4013      	ands	r3, r2
 801101c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011020:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011024:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011028:	f04f 38ff 	mov.w	r8, #4294967295
 801102c:	e7d4      	b.n	8010fd8 <_strtod_l+0x8b8>
 801102e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011030:	ea13 0f08 	tst.w	r3, r8
 8011034:	e7e0      	b.n	8010ff8 <_strtod_l+0x8d8>
 8011036:	f7ff fb56 	bl	80106e6 <sulp>
 801103a:	4602      	mov	r2, r0
 801103c:	460b      	mov	r3, r1
 801103e:	ec51 0b18 	vmov	r0, r1, d8
 8011042:	f7ef f921 	bl	8000288 <__aeabi_dsub>
 8011046:	2200      	movs	r2, #0
 8011048:	2300      	movs	r3, #0
 801104a:	4680      	mov	r8, r0
 801104c:	4689      	mov	r9, r1
 801104e:	f7ef fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011052:	2800      	cmp	r0, #0
 8011054:	d0c0      	beq.n	8010fd8 <_strtod_l+0x8b8>
 8011056:	e618      	b.n	8010c8a <_strtod_l+0x56a>
 8011058:	fffffc02 	.word	0xfffffc02
 801105c:	7ff00000 	.word	0x7ff00000
 8011060:	39500000 	.word	0x39500000
 8011064:	000fffff 	.word	0x000fffff
 8011068:	7fefffff 	.word	0x7fefffff
 801106c:	08014088 	.word	0x08014088
 8011070:	4659      	mov	r1, fp
 8011072:	4628      	mov	r0, r5
 8011074:	f7ff fac0 	bl	80105f8 <__ratio>
 8011078:	ec57 6b10 	vmov	r6, r7, d0
 801107c:	ee10 0a10 	vmov	r0, s0
 8011080:	2200      	movs	r2, #0
 8011082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011086:	4639      	mov	r1, r7
 8011088:	f7ef fd32 	bl	8000af0 <__aeabi_dcmple>
 801108c:	2800      	cmp	r0, #0
 801108e:	d071      	beq.n	8011174 <_strtod_l+0xa54>
 8011090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011092:	2b00      	cmp	r3, #0
 8011094:	d17c      	bne.n	8011190 <_strtod_l+0xa70>
 8011096:	f1b8 0f00 	cmp.w	r8, #0
 801109a:	d15a      	bne.n	8011152 <_strtod_l+0xa32>
 801109c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d15d      	bne.n	8011160 <_strtod_l+0xa40>
 80110a4:	4b90      	ldr	r3, [pc, #576]	; (80112e8 <_strtod_l+0xbc8>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	4630      	mov	r0, r6
 80110aa:	4639      	mov	r1, r7
 80110ac:	f7ef fd16 	bl	8000adc <__aeabi_dcmplt>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d15c      	bne.n	801116e <_strtod_l+0xa4e>
 80110b4:	4630      	mov	r0, r6
 80110b6:	4639      	mov	r1, r7
 80110b8:	4b8c      	ldr	r3, [pc, #560]	; (80112ec <_strtod_l+0xbcc>)
 80110ba:	2200      	movs	r2, #0
 80110bc:	f7ef fa9c 	bl	80005f8 <__aeabi_dmul>
 80110c0:	4606      	mov	r6, r0
 80110c2:	460f      	mov	r7, r1
 80110c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80110c8:	9606      	str	r6, [sp, #24]
 80110ca:	9307      	str	r3, [sp, #28]
 80110cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80110d4:	4b86      	ldr	r3, [pc, #536]	; (80112f0 <_strtod_l+0xbd0>)
 80110d6:	ea0a 0303 	and.w	r3, sl, r3
 80110da:	930d      	str	r3, [sp, #52]	; 0x34
 80110dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110de:	4b85      	ldr	r3, [pc, #532]	; (80112f4 <_strtod_l+0xbd4>)
 80110e0:	429a      	cmp	r2, r3
 80110e2:	f040 8090 	bne.w	8011206 <_strtod_l+0xae6>
 80110e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80110ea:	ec49 8b10 	vmov	d0, r8, r9
 80110ee:	f7ff f9b9 	bl	8010464 <__ulp>
 80110f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110f6:	ec51 0b10 	vmov	r0, r1, d0
 80110fa:	f7ef fa7d 	bl	80005f8 <__aeabi_dmul>
 80110fe:	4642      	mov	r2, r8
 8011100:	464b      	mov	r3, r9
 8011102:	f7ef f8c3 	bl	800028c <__adddf3>
 8011106:	460b      	mov	r3, r1
 8011108:	4979      	ldr	r1, [pc, #484]	; (80112f0 <_strtod_l+0xbd0>)
 801110a:	4a7b      	ldr	r2, [pc, #492]	; (80112f8 <_strtod_l+0xbd8>)
 801110c:	4019      	ands	r1, r3
 801110e:	4291      	cmp	r1, r2
 8011110:	4680      	mov	r8, r0
 8011112:	d944      	bls.n	801119e <_strtod_l+0xa7e>
 8011114:	ee18 2a90 	vmov	r2, s17
 8011118:	4b78      	ldr	r3, [pc, #480]	; (80112fc <_strtod_l+0xbdc>)
 801111a:	429a      	cmp	r2, r3
 801111c:	d104      	bne.n	8011128 <_strtod_l+0xa08>
 801111e:	ee18 3a10 	vmov	r3, s16
 8011122:	3301      	adds	r3, #1
 8011124:	f43f ad40 	beq.w	8010ba8 <_strtod_l+0x488>
 8011128:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80112fc <_strtod_l+0xbdc>
 801112c:	f04f 38ff 	mov.w	r8, #4294967295
 8011130:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011132:	4620      	mov	r0, r4
 8011134:	f7fe fe6a 	bl	800fe0c <_Bfree>
 8011138:	9905      	ldr	r1, [sp, #20]
 801113a:	4620      	mov	r0, r4
 801113c:	f7fe fe66 	bl	800fe0c <_Bfree>
 8011140:	4659      	mov	r1, fp
 8011142:	4620      	mov	r0, r4
 8011144:	f7fe fe62 	bl	800fe0c <_Bfree>
 8011148:	4629      	mov	r1, r5
 801114a:	4620      	mov	r0, r4
 801114c:	f7fe fe5e 	bl	800fe0c <_Bfree>
 8011150:	e609      	b.n	8010d66 <_strtod_l+0x646>
 8011152:	f1b8 0f01 	cmp.w	r8, #1
 8011156:	d103      	bne.n	8011160 <_strtod_l+0xa40>
 8011158:	f1b9 0f00 	cmp.w	r9, #0
 801115c:	f43f ad95 	beq.w	8010c8a <_strtod_l+0x56a>
 8011160:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80112b8 <_strtod_l+0xb98>
 8011164:	4f60      	ldr	r7, [pc, #384]	; (80112e8 <_strtod_l+0xbc8>)
 8011166:	ed8d 7b06 	vstr	d7, [sp, #24]
 801116a:	2600      	movs	r6, #0
 801116c:	e7ae      	b.n	80110cc <_strtod_l+0x9ac>
 801116e:	4f5f      	ldr	r7, [pc, #380]	; (80112ec <_strtod_l+0xbcc>)
 8011170:	2600      	movs	r6, #0
 8011172:	e7a7      	b.n	80110c4 <_strtod_l+0x9a4>
 8011174:	4b5d      	ldr	r3, [pc, #372]	; (80112ec <_strtod_l+0xbcc>)
 8011176:	4630      	mov	r0, r6
 8011178:	4639      	mov	r1, r7
 801117a:	2200      	movs	r2, #0
 801117c:	f7ef fa3c 	bl	80005f8 <__aeabi_dmul>
 8011180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011182:	4606      	mov	r6, r0
 8011184:	460f      	mov	r7, r1
 8011186:	2b00      	cmp	r3, #0
 8011188:	d09c      	beq.n	80110c4 <_strtod_l+0x9a4>
 801118a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801118e:	e79d      	b.n	80110cc <_strtod_l+0x9ac>
 8011190:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80112c0 <_strtod_l+0xba0>
 8011194:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011198:	ec57 6b17 	vmov	r6, r7, d7
 801119c:	e796      	b.n	80110cc <_strtod_l+0x9ac>
 801119e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80111a2:	9b04      	ldr	r3, [sp, #16]
 80111a4:	46ca      	mov	sl, r9
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d1c2      	bne.n	8011130 <_strtod_l+0xa10>
 80111aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111b0:	0d1b      	lsrs	r3, r3, #20
 80111b2:	051b      	lsls	r3, r3, #20
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d1bb      	bne.n	8011130 <_strtod_l+0xa10>
 80111b8:	4630      	mov	r0, r6
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7ef fd7c 	bl	8000cb8 <__aeabi_d2lz>
 80111c0:	f7ef f9ec 	bl	800059c <__aeabi_l2d>
 80111c4:	4602      	mov	r2, r0
 80111c6:	460b      	mov	r3, r1
 80111c8:	4630      	mov	r0, r6
 80111ca:	4639      	mov	r1, r7
 80111cc:	f7ef f85c 	bl	8000288 <__aeabi_dsub>
 80111d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111d6:	ea43 0308 	orr.w	r3, r3, r8
 80111da:	4313      	orrs	r3, r2
 80111dc:	4606      	mov	r6, r0
 80111de:	460f      	mov	r7, r1
 80111e0:	d054      	beq.n	801128c <_strtod_l+0xb6c>
 80111e2:	a339      	add	r3, pc, #228	; (adr r3, 80112c8 <_strtod_l+0xba8>)
 80111e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e8:	f7ef fc78 	bl	8000adc <__aeabi_dcmplt>
 80111ec:	2800      	cmp	r0, #0
 80111ee:	f47f ace5 	bne.w	8010bbc <_strtod_l+0x49c>
 80111f2:	a337      	add	r3, pc, #220	; (adr r3, 80112d0 <_strtod_l+0xbb0>)
 80111f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f8:	4630      	mov	r0, r6
 80111fa:	4639      	mov	r1, r7
 80111fc:	f7ef fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 8011200:	2800      	cmp	r0, #0
 8011202:	d095      	beq.n	8011130 <_strtod_l+0xa10>
 8011204:	e4da      	b.n	8010bbc <_strtod_l+0x49c>
 8011206:	9b04      	ldr	r3, [sp, #16]
 8011208:	b333      	cbz	r3, 8011258 <_strtod_l+0xb38>
 801120a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801120c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011210:	d822      	bhi.n	8011258 <_strtod_l+0xb38>
 8011212:	a331      	add	r3, pc, #196	; (adr r3, 80112d8 <_strtod_l+0xbb8>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	4630      	mov	r0, r6
 801121a:	4639      	mov	r1, r7
 801121c:	f7ef fc68 	bl	8000af0 <__aeabi_dcmple>
 8011220:	b1a0      	cbz	r0, 801124c <_strtod_l+0xb2c>
 8011222:	4639      	mov	r1, r7
 8011224:	4630      	mov	r0, r6
 8011226:	f7ef fcbf 	bl	8000ba8 <__aeabi_d2uiz>
 801122a:	2801      	cmp	r0, #1
 801122c:	bf38      	it	cc
 801122e:	2001      	movcc	r0, #1
 8011230:	f7ef f968 	bl	8000504 <__aeabi_ui2d>
 8011234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011236:	4606      	mov	r6, r0
 8011238:	460f      	mov	r7, r1
 801123a:	bb23      	cbnz	r3, 8011286 <_strtod_l+0xb66>
 801123c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011240:	9010      	str	r0, [sp, #64]	; 0x40
 8011242:	9311      	str	r3, [sp, #68]	; 0x44
 8011244:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011248:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801124c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801124e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011250:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011254:	1a9b      	subs	r3, r3, r2
 8011256:	930f      	str	r3, [sp, #60]	; 0x3c
 8011258:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801125c:	eeb0 0a48 	vmov.f32	s0, s16
 8011260:	eef0 0a68 	vmov.f32	s1, s17
 8011264:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011268:	f7ff f8fc 	bl	8010464 <__ulp>
 801126c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011270:	ec53 2b10 	vmov	r2, r3, d0
 8011274:	f7ef f9c0 	bl	80005f8 <__aeabi_dmul>
 8011278:	ec53 2b18 	vmov	r2, r3, d8
 801127c:	f7ef f806 	bl	800028c <__adddf3>
 8011280:	4680      	mov	r8, r0
 8011282:	4689      	mov	r9, r1
 8011284:	e78d      	b.n	80111a2 <_strtod_l+0xa82>
 8011286:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801128a:	e7db      	b.n	8011244 <_strtod_l+0xb24>
 801128c:	a314      	add	r3, pc, #80	; (adr r3, 80112e0 <_strtod_l+0xbc0>)
 801128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011292:	f7ef fc23 	bl	8000adc <__aeabi_dcmplt>
 8011296:	e7b3      	b.n	8011200 <_strtod_l+0xae0>
 8011298:	2300      	movs	r3, #0
 801129a:	930a      	str	r3, [sp, #40]	; 0x28
 801129c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801129e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80112a0:	6013      	str	r3, [r2, #0]
 80112a2:	f7ff ba7c 	b.w	801079e <_strtod_l+0x7e>
 80112a6:	2a65      	cmp	r2, #101	; 0x65
 80112a8:	f43f ab75 	beq.w	8010996 <_strtod_l+0x276>
 80112ac:	2a45      	cmp	r2, #69	; 0x45
 80112ae:	f43f ab72 	beq.w	8010996 <_strtod_l+0x276>
 80112b2:	2301      	movs	r3, #1
 80112b4:	f7ff bbaa 	b.w	8010a0c <_strtod_l+0x2ec>
 80112b8:	00000000 	.word	0x00000000
 80112bc:	bff00000 	.word	0xbff00000
 80112c0:	00000000 	.word	0x00000000
 80112c4:	3ff00000 	.word	0x3ff00000
 80112c8:	94a03595 	.word	0x94a03595
 80112cc:	3fdfffff 	.word	0x3fdfffff
 80112d0:	35afe535 	.word	0x35afe535
 80112d4:	3fe00000 	.word	0x3fe00000
 80112d8:	ffc00000 	.word	0xffc00000
 80112dc:	41dfffff 	.word	0x41dfffff
 80112e0:	94a03595 	.word	0x94a03595
 80112e4:	3fcfffff 	.word	0x3fcfffff
 80112e8:	3ff00000 	.word	0x3ff00000
 80112ec:	3fe00000 	.word	0x3fe00000
 80112f0:	7ff00000 	.word	0x7ff00000
 80112f4:	7fe00000 	.word	0x7fe00000
 80112f8:	7c9fffff 	.word	0x7c9fffff
 80112fc:	7fefffff 	.word	0x7fefffff

08011300 <_strtod_r>:
 8011300:	4b01      	ldr	r3, [pc, #4]	; (8011308 <_strtod_r+0x8>)
 8011302:	f7ff ba0d 	b.w	8010720 <_strtod_l>
 8011306:	bf00      	nop
 8011308:	200001f8 	.word	0x200001f8

0801130c <_strtol_l.constprop.0>:
 801130c:	2b01      	cmp	r3, #1
 801130e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011312:	d001      	beq.n	8011318 <_strtol_l.constprop.0+0xc>
 8011314:	2b24      	cmp	r3, #36	; 0x24
 8011316:	d906      	bls.n	8011326 <_strtol_l.constprop.0+0x1a>
 8011318:	f7fd fd88 	bl	800ee2c <__errno>
 801131c:	2316      	movs	r3, #22
 801131e:	6003      	str	r3, [r0, #0]
 8011320:	2000      	movs	r0, #0
 8011322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011326:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801140c <_strtol_l.constprop.0+0x100>
 801132a:	460d      	mov	r5, r1
 801132c:	462e      	mov	r6, r5
 801132e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011332:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011336:	f017 0708 	ands.w	r7, r7, #8
 801133a:	d1f7      	bne.n	801132c <_strtol_l.constprop.0+0x20>
 801133c:	2c2d      	cmp	r4, #45	; 0x2d
 801133e:	d132      	bne.n	80113a6 <_strtol_l.constprop.0+0x9a>
 8011340:	782c      	ldrb	r4, [r5, #0]
 8011342:	2701      	movs	r7, #1
 8011344:	1cb5      	adds	r5, r6, #2
 8011346:	2b00      	cmp	r3, #0
 8011348:	d05b      	beq.n	8011402 <_strtol_l.constprop.0+0xf6>
 801134a:	2b10      	cmp	r3, #16
 801134c:	d109      	bne.n	8011362 <_strtol_l.constprop.0+0x56>
 801134e:	2c30      	cmp	r4, #48	; 0x30
 8011350:	d107      	bne.n	8011362 <_strtol_l.constprop.0+0x56>
 8011352:	782c      	ldrb	r4, [r5, #0]
 8011354:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011358:	2c58      	cmp	r4, #88	; 0x58
 801135a:	d14d      	bne.n	80113f8 <_strtol_l.constprop.0+0xec>
 801135c:	786c      	ldrb	r4, [r5, #1]
 801135e:	2310      	movs	r3, #16
 8011360:	3502      	adds	r5, #2
 8011362:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011366:	f108 38ff 	add.w	r8, r8, #4294967295
 801136a:	f04f 0e00 	mov.w	lr, #0
 801136e:	fbb8 f9f3 	udiv	r9, r8, r3
 8011372:	4676      	mov	r6, lr
 8011374:	fb03 8a19 	mls	sl, r3, r9, r8
 8011378:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801137c:	f1bc 0f09 	cmp.w	ip, #9
 8011380:	d816      	bhi.n	80113b0 <_strtol_l.constprop.0+0xa4>
 8011382:	4664      	mov	r4, ip
 8011384:	42a3      	cmp	r3, r4
 8011386:	dd24      	ble.n	80113d2 <_strtol_l.constprop.0+0xc6>
 8011388:	f1be 3fff 	cmp.w	lr, #4294967295
 801138c:	d008      	beq.n	80113a0 <_strtol_l.constprop.0+0x94>
 801138e:	45b1      	cmp	r9, r6
 8011390:	d31c      	bcc.n	80113cc <_strtol_l.constprop.0+0xc0>
 8011392:	d101      	bne.n	8011398 <_strtol_l.constprop.0+0x8c>
 8011394:	45a2      	cmp	sl, r4
 8011396:	db19      	blt.n	80113cc <_strtol_l.constprop.0+0xc0>
 8011398:	fb06 4603 	mla	r6, r6, r3, r4
 801139c:	f04f 0e01 	mov.w	lr, #1
 80113a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113a4:	e7e8      	b.n	8011378 <_strtol_l.constprop.0+0x6c>
 80113a6:	2c2b      	cmp	r4, #43	; 0x2b
 80113a8:	bf04      	itt	eq
 80113aa:	782c      	ldrbeq	r4, [r5, #0]
 80113ac:	1cb5      	addeq	r5, r6, #2
 80113ae:	e7ca      	b.n	8011346 <_strtol_l.constprop.0+0x3a>
 80113b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80113b4:	f1bc 0f19 	cmp.w	ip, #25
 80113b8:	d801      	bhi.n	80113be <_strtol_l.constprop.0+0xb2>
 80113ba:	3c37      	subs	r4, #55	; 0x37
 80113bc:	e7e2      	b.n	8011384 <_strtol_l.constprop.0+0x78>
 80113be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80113c2:	f1bc 0f19 	cmp.w	ip, #25
 80113c6:	d804      	bhi.n	80113d2 <_strtol_l.constprop.0+0xc6>
 80113c8:	3c57      	subs	r4, #87	; 0x57
 80113ca:	e7db      	b.n	8011384 <_strtol_l.constprop.0+0x78>
 80113cc:	f04f 3eff 	mov.w	lr, #4294967295
 80113d0:	e7e6      	b.n	80113a0 <_strtol_l.constprop.0+0x94>
 80113d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80113d6:	d105      	bne.n	80113e4 <_strtol_l.constprop.0+0xd8>
 80113d8:	2322      	movs	r3, #34	; 0x22
 80113da:	6003      	str	r3, [r0, #0]
 80113dc:	4646      	mov	r6, r8
 80113de:	b942      	cbnz	r2, 80113f2 <_strtol_l.constprop.0+0xe6>
 80113e0:	4630      	mov	r0, r6
 80113e2:	e79e      	b.n	8011322 <_strtol_l.constprop.0+0x16>
 80113e4:	b107      	cbz	r7, 80113e8 <_strtol_l.constprop.0+0xdc>
 80113e6:	4276      	negs	r6, r6
 80113e8:	2a00      	cmp	r2, #0
 80113ea:	d0f9      	beq.n	80113e0 <_strtol_l.constprop.0+0xd4>
 80113ec:	f1be 0f00 	cmp.w	lr, #0
 80113f0:	d000      	beq.n	80113f4 <_strtol_l.constprop.0+0xe8>
 80113f2:	1e69      	subs	r1, r5, #1
 80113f4:	6011      	str	r1, [r2, #0]
 80113f6:	e7f3      	b.n	80113e0 <_strtol_l.constprop.0+0xd4>
 80113f8:	2430      	movs	r4, #48	; 0x30
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d1b1      	bne.n	8011362 <_strtol_l.constprop.0+0x56>
 80113fe:	2308      	movs	r3, #8
 8011400:	e7af      	b.n	8011362 <_strtol_l.constprop.0+0x56>
 8011402:	2c30      	cmp	r4, #48	; 0x30
 8011404:	d0a5      	beq.n	8011352 <_strtol_l.constprop.0+0x46>
 8011406:	230a      	movs	r3, #10
 8011408:	e7ab      	b.n	8011362 <_strtol_l.constprop.0+0x56>
 801140a:	bf00      	nop
 801140c:	080140b1 	.word	0x080140b1

08011410 <_strtol_r>:
 8011410:	f7ff bf7c 	b.w	801130c <_strtol_l.constprop.0>

08011414 <__ssputs_r>:
 8011414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011418:	688e      	ldr	r6, [r1, #8]
 801141a:	461f      	mov	r7, r3
 801141c:	42be      	cmp	r6, r7
 801141e:	680b      	ldr	r3, [r1, #0]
 8011420:	4682      	mov	sl, r0
 8011422:	460c      	mov	r4, r1
 8011424:	4690      	mov	r8, r2
 8011426:	d82c      	bhi.n	8011482 <__ssputs_r+0x6e>
 8011428:	898a      	ldrh	r2, [r1, #12]
 801142a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801142e:	d026      	beq.n	801147e <__ssputs_r+0x6a>
 8011430:	6965      	ldr	r5, [r4, #20]
 8011432:	6909      	ldr	r1, [r1, #16]
 8011434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011438:	eba3 0901 	sub.w	r9, r3, r1
 801143c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011440:	1c7b      	adds	r3, r7, #1
 8011442:	444b      	add	r3, r9
 8011444:	106d      	asrs	r5, r5, #1
 8011446:	429d      	cmp	r5, r3
 8011448:	bf38      	it	cc
 801144a:	461d      	movcc	r5, r3
 801144c:	0553      	lsls	r3, r2, #21
 801144e:	d527      	bpl.n	80114a0 <__ssputs_r+0x8c>
 8011450:	4629      	mov	r1, r5
 8011452:	f7fe fc0f 	bl	800fc74 <_malloc_r>
 8011456:	4606      	mov	r6, r0
 8011458:	b360      	cbz	r0, 80114b4 <__ssputs_r+0xa0>
 801145a:	6921      	ldr	r1, [r4, #16]
 801145c:	464a      	mov	r2, r9
 801145e:	f000 fa1b 	bl	8011898 <memcpy>
 8011462:	89a3      	ldrh	r3, [r4, #12]
 8011464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801146c:	81a3      	strh	r3, [r4, #12]
 801146e:	6126      	str	r6, [r4, #16]
 8011470:	6165      	str	r5, [r4, #20]
 8011472:	444e      	add	r6, r9
 8011474:	eba5 0509 	sub.w	r5, r5, r9
 8011478:	6026      	str	r6, [r4, #0]
 801147a:	60a5      	str	r5, [r4, #8]
 801147c:	463e      	mov	r6, r7
 801147e:	42be      	cmp	r6, r7
 8011480:	d900      	bls.n	8011484 <__ssputs_r+0x70>
 8011482:	463e      	mov	r6, r7
 8011484:	6820      	ldr	r0, [r4, #0]
 8011486:	4632      	mov	r2, r6
 8011488:	4641      	mov	r1, r8
 801148a:	f000 f9c9 	bl	8011820 <memmove>
 801148e:	68a3      	ldr	r3, [r4, #8]
 8011490:	1b9b      	subs	r3, r3, r6
 8011492:	60a3      	str	r3, [r4, #8]
 8011494:	6823      	ldr	r3, [r4, #0]
 8011496:	4433      	add	r3, r6
 8011498:	6023      	str	r3, [r4, #0]
 801149a:	2000      	movs	r0, #0
 801149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a0:	462a      	mov	r2, r5
 80114a2:	f000 fdae 	bl	8012002 <_realloc_r>
 80114a6:	4606      	mov	r6, r0
 80114a8:	2800      	cmp	r0, #0
 80114aa:	d1e0      	bne.n	801146e <__ssputs_r+0x5a>
 80114ac:	6921      	ldr	r1, [r4, #16]
 80114ae:	4650      	mov	r0, sl
 80114b0:	f7fe fb6c 	bl	800fb8c <_free_r>
 80114b4:	230c      	movs	r3, #12
 80114b6:	f8ca 3000 	str.w	r3, [sl]
 80114ba:	89a3      	ldrh	r3, [r4, #12]
 80114bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114c0:	81a3      	strh	r3, [r4, #12]
 80114c2:	f04f 30ff 	mov.w	r0, #4294967295
 80114c6:	e7e9      	b.n	801149c <__ssputs_r+0x88>

080114c8 <_svfiprintf_r>:
 80114c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114cc:	4698      	mov	r8, r3
 80114ce:	898b      	ldrh	r3, [r1, #12]
 80114d0:	061b      	lsls	r3, r3, #24
 80114d2:	b09d      	sub	sp, #116	; 0x74
 80114d4:	4607      	mov	r7, r0
 80114d6:	460d      	mov	r5, r1
 80114d8:	4614      	mov	r4, r2
 80114da:	d50e      	bpl.n	80114fa <_svfiprintf_r+0x32>
 80114dc:	690b      	ldr	r3, [r1, #16]
 80114de:	b963      	cbnz	r3, 80114fa <_svfiprintf_r+0x32>
 80114e0:	2140      	movs	r1, #64	; 0x40
 80114e2:	f7fe fbc7 	bl	800fc74 <_malloc_r>
 80114e6:	6028      	str	r0, [r5, #0]
 80114e8:	6128      	str	r0, [r5, #16]
 80114ea:	b920      	cbnz	r0, 80114f6 <_svfiprintf_r+0x2e>
 80114ec:	230c      	movs	r3, #12
 80114ee:	603b      	str	r3, [r7, #0]
 80114f0:	f04f 30ff 	mov.w	r0, #4294967295
 80114f4:	e0d0      	b.n	8011698 <_svfiprintf_r+0x1d0>
 80114f6:	2340      	movs	r3, #64	; 0x40
 80114f8:	616b      	str	r3, [r5, #20]
 80114fa:	2300      	movs	r3, #0
 80114fc:	9309      	str	r3, [sp, #36]	; 0x24
 80114fe:	2320      	movs	r3, #32
 8011500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011504:	f8cd 800c 	str.w	r8, [sp, #12]
 8011508:	2330      	movs	r3, #48	; 0x30
 801150a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80116b0 <_svfiprintf_r+0x1e8>
 801150e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011512:	f04f 0901 	mov.w	r9, #1
 8011516:	4623      	mov	r3, r4
 8011518:	469a      	mov	sl, r3
 801151a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801151e:	b10a      	cbz	r2, 8011524 <_svfiprintf_r+0x5c>
 8011520:	2a25      	cmp	r2, #37	; 0x25
 8011522:	d1f9      	bne.n	8011518 <_svfiprintf_r+0x50>
 8011524:	ebba 0b04 	subs.w	fp, sl, r4
 8011528:	d00b      	beq.n	8011542 <_svfiprintf_r+0x7a>
 801152a:	465b      	mov	r3, fp
 801152c:	4622      	mov	r2, r4
 801152e:	4629      	mov	r1, r5
 8011530:	4638      	mov	r0, r7
 8011532:	f7ff ff6f 	bl	8011414 <__ssputs_r>
 8011536:	3001      	adds	r0, #1
 8011538:	f000 80a9 	beq.w	801168e <_svfiprintf_r+0x1c6>
 801153c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801153e:	445a      	add	r2, fp
 8011540:	9209      	str	r2, [sp, #36]	; 0x24
 8011542:	f89a 3000 	ldrb.w	r3, [sl]
 8011546:	2b00      	cmp	r3, #0
 8011548:	f000 80a1 	beq.w	801168e <_svfiprintf_r+0x1c6>
 801154c:	2300      	movs	r3, #0
 801154e:	f04f 32ff 	mov.w	r2, #4294967295
 8011552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011556:	f10a 0a01 	add.w	sl, sl, #1
 801155a:	9304      	str	r3, [sp, #16]
 801155c:	9307      	str	r3, [sp, #28]
 801155e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011562:	931a      	str	r3, [sp, #104]	; 0x68
 8011564:	4654      	mov	r4, sl
 8011566:	2205      	movs	r2, #5
 8011568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801156c:	4850      	ldr	r0, [pc, #320]	; (80116b0 <_svfiprintf_r+0x1e8>)
 801156e:	f7ee fe2f 	bl	80001d0 <memchr>
 8011572:	9a04      	ldr	r2, [sp, #16]
 8011574:	b9d8      	cbnz	r0, 80115ae <_svfiprintf_r+0xe6>
 8011576:	06d0      	lsls	r0, r2, #27
 8011578:	bf44      	itt	mi
 801157a:	2320      	movmi	r3, #32
 801157c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011580:	0711      	lsls	r1, r2, #28
 8011582:	bf44      	itt	mi
 8011584:	232b      	movmi	r3, #43	; 0x2b
 8011586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801158a:	f89a 3000 	ldrb.w	r3, [sl]
 801158e:	2b2a      	cmp	r3, #42	; 0x2a
 8011590:	d015      	beq.n	80115be <_svfiprintf_r+0xf6>
 8011592:	9a07      	ldr	r2, [sp, #28]
 8011594:	4654      	mov	r4, sl
 8011596:	2000      	movs	r0, #0
 8011598:	f04f 0c0a 	mov.w	ip, #10
 801159c:	4621      	mov	r1, r4
 801159e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115a2:	3b30      	subs	r3, #48	; 0x30
 80115a4:	2b09      	cmp	r3, #9
 80115a6:	d94d      	bls.n	8011644 <_svfiprintf_r+0x17c>
 80115a8:	b1b0      	cbz	r0, 80115d8 <_svfiprintf_r+0x110>
 80115aa:	9207      	str	r2, [sp, #28]
 80115ac:	e014      	b.n	80115d8 <_svfiprintf_r+0x110>
 80115ae:	eba0 0308 	sub.w	r3, r0, r8
 80115b2:	fa09 f303 	lsl.w	r3, r9, r3
 80115b6:	4313      	orrs	r3, r2
 80115b8:	9304      	str	r3, [sp, #16]
 80115ba:	46a2      	mov	sl, r4
 80115bc:	e7d2      	b.n	8011564 <_svfiprintf_r+0x9c>
 80115be:	9b03      	ldr	r3, [sp, #12]
 80115c0:	1d19      	adds	r1, r3, #4
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	9103      	str	r1, [sp, #12]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	bfbb      	ittet	lt
 80115ca:	425b      	neglt	r3, r3
 80115cc:	f042 0202 	orrlt.w	r2, r2, #2
 80115d0:	9307      	strge	r3, [sp, #28]
 80115d2:	9307      	strlt	r3, [sp, #28]
 80115d4:	bfb8      	it	lt
 80115d6:	9204      	strlt	r2, [sp, #16]
 80115d8:	7823      	ldrb	r3, [r4, #0]
 80115da:	2b2e      	cmp	r3, #46	; 0x2e
 80115dc:	d10c      	bne.n	80115f8 <_svfiprintf_r+0x130>
 80115de:	7863      	ldrb	r3, [r4, #1]
 80115e0:	2b2a      	cmp	r3, #42	; 0x2a
 80115e2:	d134      	bne.n	801164e <_svfiprintf_r+0x186>
 80115e4:	9b03      	ldr	r3, [sp, #12]
 80115e6:	1d1a      	adds	r2, r3, #4
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	9203      	str	r2, [sp, #12]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	bfb8      	it	lt
 80115f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80115f4:	3402      	adds	r4, #2
 80115f6:	9305      	str	r3, [sp, #20]
 80115f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80116c0 <_svfiprintf_r+0x1f8>
 80115fc:	7821      	ldrb	r1, [r4, #0]
 80115fe:	2203      	movs	r2, #3
 8011600:	4650      	mov	r0, sl
 8011602:	f7ee fde5 	bl	80001d0 <memchr>
 8011606:	b138      	cbz	r0, 8011618 <_svfiprintf_r+0x150>
 8011608:	9b04      	ldr	r3, [sp, #16]
 801160a:	eba0 000a 	sub.w	r0, r0, sl
 801160e:	2240      	movs	r2, #64	; 0x40
 8011610:	4082      	lsls	r2, r0
 8011612:	4313      	orrs	r3, r2
 8011614:	3401      	adds	r4, #1
 8011616:	9304      	str	r3, [sp, #16]
 8011618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801161c:	4825      	ldr	r0, [pc, #148]	; (80116b4 <_svfiprintf_r+0x1ec>)
 801161e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011622:	2206      	movs	r2, #6
 8011624:	f7ee fdd4 	bl	80001d0 <memchr>
 8011628:	2800      	cmp	r0, #0
 801162a:	d038      	beq.n	801169e <_svfiprintf_r+0x1d6>
 801162c:	4b22      	ldr	r3, [pc, #136]	; (80116b8 <_svfiprintf_r+0x1f0>)
 801162e:	bb1b      	cbnz	r3, 8011678 <_svfiprintf_r+0x1b0>
 8011630:	9b03      	ldr	r3, [sp, #12]
 8011632:	3307      	adds	r3, #7
 8011634:	f023 0307 	bic.w	r3, r3, #7
 8011638:	3308      	adds	r3, #8
 801163a:	9303      	str	r3, [sp, #12]
 801163c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801163e:	4433      	add	r3, r6
 8011640:	9309      	str	r3, [sp, #36]	; 0x24
 8011642:	e768      	b.n	8011516 <_svfiprintf_r+0x4e>
 8011644:	fb0c 3202 	mla	r2, ip, r2, r3
 8011648:	460c      	mov	r4, r1
 801164a:	2001      	movs	r0, #1
 801164c:	e7a6      	b.n	801159c <_svfiprintf_r+0xd4>
 801164e:	2300      	movs	r3, #0
 8011650:	3401      	adds	r4, #1
 8011652:	9305      	str	r3, [sp, #20]
 8011654:	4619      	mov	r1, r3
 8011656:	f04f 0c0a 	mov.w	ip, #10
 801165a:	4620      	mov	r0, r4
 801165c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011660:	3a30      	subs	r2, #48	; 0x30
 8011662:	2a09      	cmp	r2, #9
 8011664:	d903      	bls.n	801166e <_svfiprintf_r+0x1a6>
 8011666:	2b00      	cmp	r3, #0
 8011668:	d0c6      	beq.n	80115f8 <_svfiprintf_r+0x130>
 801166a:	9105      	str	r1, [sp, #20]
 801166c:	e7c4      	b.n	80115f8 <_svfiprintf_r+0x130>
 801166e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011672:	4604      	mov	r4, r0
 8011674:	2301      	movs	r3, #1
 8011676:	e7f0      	b.n	801165a <_svfiprintf_r+0x192>
 8011678:	ab03      	add	r3, sp, #12
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	462a      	mov	r2, r5
 801167e:	4b0f      	ldr	r3, [pc, #60]	; (80116bc <_svfiprintf_r+0x1f4>)
 8011680:	a904      	add	r1, sp, #16
 8011682:	4638      	mov	r0, r7
 8011684:	f7fc fc84 	bl	800df90 <_printf_float>
 8011688:	1c42      	adds	r2, r0, #1
 801168a:	4606      	mov	r6, r0
 801168c:	d1d6      	bne.n	801163c <_svfiprintf_r+0x174>
 801168e:	89ab      	ldrh	r3, [r5, #12]
 8011690:	065b      	lsls	r3, r3, #25
 8011692:	f53f af2d 	bmi.w	80114f0 <_svfiprintf_r+0x28>
 8011696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011698:	b01d      	add	sp, #116	; 0x74
 801169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169e:	ab03      	add	r3, sp, #12
 80116a0:	9300      	str	r3, [sp, #0]
 80116a2:	462a      	mov	r2, r5
 80116a4:	4b05      	ldr	r3, [pc, #20]	; (80116bc <_svfiprintf_r+0x1f4>)
 80116a6:	a904      	add	r1, sp, #16
 80116a8:	4638      	mov	r0, r7
 80116aa:	f7fc ff15 	bl	800e4d8 <_printf_i>
 80116ae:	e7eb      	b.n	8011688 <_svfiprintf_r+0x1c0>
 80116b0:	080141b1 	.word	0x080141b1
 80116b4:	080141bb 	.word	0x080141bb
 80116b8:	0800df91 	.word	0x0800df91
 80116bc:	08011415 	.word	0x08011415
 80116c0:	080141b7 	.word	0x080141b7

080116c4 <__sflush_r>:
 80116c4:	898a      	ldrh	r2, [r1, #12]
 80116c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116ca:	4605      	mov	r5, r0
 80116cc:	0710      	lsls	r0, r2, #28
 80116ce:	460c      	mov	r4, r1
 80116d0:	d458      	bmi.n	8011784 <__sflush_r+0xc0>
 80116d2:	684b      	ldr	r3, [r1, #4]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	dc05      	bgt.n	80116e4 <__sflush_r+0x20>
 80116d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116da:	2b00      	cmp	r3, #0
 80116dc:	dc02      	bgt.n	80116e4 <__sflush_r+0x20>
 80116de:	2000      	movs	r0, #0
 80116e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116e6:	2e00      	cmp	r6, #0
 80116e8:	d0f9      	beq.n	80116de <__sflush_r+0x1a>
 80116ea:	2300      	movs	r3, #0
 80116ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116f0:	682f      	ldr	r7, [r5, #0]
 80116f2:	6a21      	ldr	r1, [r4, #32]
 80116f4:	602b      	str	r3, [r5, #0]
 80116f6:	d032      	beq.n	801175e <__sflush_r+0x9a>
 80116f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116fa:	89a3      	ldrh	r3, [r4, #12]
 80116fc:	075a      	lsls	r2, r3, #29
 80116fe:	d505      	bpl.n	801170c <__sflush_r+0x48>
 8011700:	6863      	ldr	r3, [r4, #4]
 8011702:	1ac0      	subs	r0, r0, r3
 8011704:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011706:	b10b      	cbz	r3, 801170c <__sflush_r+0x48>
 8011708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801170a:	1ac0      	subs	r0, r0, r3
 801170c:	2300      	movs	r3, #0
 801170e:	4602      	mov	r2, r0
 8011710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011712:	6a21      	ldr	r1, [r4, #32]
 8011714:	4628      	mov	r0, r5
 8011716:	47b0      	blx	r6
 8011718:	1c43      	adds	r3, r0, #1
 801171a:	89a3      	ldrh	r3, [r4, #12]
 801171c:	d106      	bne.n	801172c <__sflush_r+0x68>
 801171e:	6829      	ldr	r1, [r5, #0]
 8011720:	291d      	cmp	r1, #29
 8011722:	d82b      	bhi.n	801177c <__sflush_r+0xb8>
 8011724:	4a29      	ldr	r2, [pc, #164]	; (80117cc <__sflush_r+0x108>)
 8011726:	410a      	asrs	r2, r1
 8011728:	07d6      	lsls	r6, r2, #31
 801172a:	d427      	bmi.n	801177c <__sflush_r+0xb8>
 801172c:	2200      	movs	r2, #0
 801172e:	6062      	str	r2, [r4, #4]
 8011730:	04d9      	lsls	r1, r3, #19
 8011732:	6922      	ldr	r2, [r4, #16]
 8011734:	6022      	str	r2, [r4, #0]
 8011736:	d504      	bpl.n	8011742 <__sflush_r+0x7e>
 8011738:	1c42      	adds	r2, r0, #1
 801173a:	d101      	bne.n	8011740 <__sflush_r+0x7c>
 801173c:	682b      	ldr	r3, [r5, #0]
 801173e:	b903      	cbnz	r3, 8011742 <__sflush_r+0x7e>
 8011740:	6560      	str	r0, [r4, #84]	; 0x54
 8011742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011744:	602f      	str	r7, [r5, #0]
 8011746:	2900      	cmp	r1, #0
 8011748:	d0c9      	beq.n	80116de <__sflush_r+0x1a>
 801174a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801174e:	4299      	cmp	r1, r3
 8011750:	d002      	beq.n	8011758 <__sflush_r+0x94>
 8011752:	4628      	mov	r0, r5
 8011754:	f7fe fa1a 	bl	800fb8c <_free_r>
 8011758:	2000      	movs	r0, #0
 801175a:	6360      	str	r0, [r4, #52]	; 0x34
 801175c:	e7c0      	b.n	80116e0 <__sflush_r+0x1c>
 801175e:	2301      	movs	r3, #1
 8011760:	4628      	mov	r0, r5
 8011762:	47b0      	blx	r6
 8011764:	1c41      	adds	r1, r0, #1
 8011766:	d1c8      	bne.n	80116fa <__sflush_r+0x36>
 8011768:	682b      	ldr	r3, [r5, #0]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d0c5      	beq.n	80116fa <__sflush_r+0x36>
 801176e:	2b1d      	cmp	r3, #29
 8011770:	d001      	beq.n	8011776 <__sflush_r+0xb2>
 8011772:	2b16      	cmp	r3, #22
 8011774:	d101      	bne.n	801177a <__sflush_r+0xb6>
 8011776:	602f      	str	r7, [r5, #0]
 8011778:	e7b1      	b.n	80116de <__sflush_r+0x1a>
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011780:	81a3      	strh	r3, [r4, #12]
 8011782:	e7ad      	b.n	80116e0 <__sflush_r+0x1c>
 8011784:	690f      	ldr	r7, [r1, #16]
 8011786:	2f00      	cmp	r7, #0
 8011788:	d0a9      	beq.n	80116de <__sflush_r+0x1a>
 801178a:	0793      	lsls	r3, r2, #30
 801178c:	680e      	ldr	r6, [r1, #0]
 801178e:	bf08      	it	eq
 8011790:	694b      	ldreq	r3, [r1, #20]
 8011792:	600f      	str	r7, [r1, #0]
 8011794:	bf18      	it	ne
 8011796:	2300      	movne	r3, #0
 8011798:	eba6 0807 	sub.w	r8, r6, r7
 801179c:	608b      	str	r3, [r1, #8]
 801179e:	f1b8 0f00 	cmp.w	r8, #0
 80117a2:	dd9c      	ble.n	80116de <__sflush_r+0x1a>
 80117a4:	6a21      	ldr	r1, [r4, #32]
 80117a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80117a8:	4643      	mov	r3, r8
 80117aa:	463a      	mov	r2, r7
 80117ac:	4628      	mov	r0, r5
 80117ae:	47b0      	blx	r6
 80117b0:	2800      	cmp	r0, #0
 80117b2:	dc06      	bgt.n	80117c2 <__sflush_r+0xfe>
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117ba:	81a3      	strh	r3, [r4, #12]
 80117bc:	f04f 30ff 	mov.w	r0, #4294967295
 80117c0:	e78e      	b.n	80116e0 <__sflush_r+0x1c>
 80117c2:	4407      	add	r7, r0
 80117c4:	eba8 0800 	sub.w	r8, r8, r0
 80117c8:	e7e9      	b.n	801179e <__sflush_r+0xda>
 80117ca:	bf00      	nop
 80117cc:	dfbffffe 	.word	0xdfbffffe

080117d0 <_fflush_r>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	690b      	ldr	r3, [r1, #16]
 80117d4:	4605      	mov	r5, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	b913      	cbnz	r3, 80117e0 <_fflush_r+0x10>
 80117da:	2500      	movs	r5, #0
 80117dc:	4628      	mov	r0, r5
 80117de:	bd38      	pop	{r3, r4, r5, pc}
 80117e0:	b118      	cbz	r0, 80117ea <_fflush_r+0x1a>
 80117e2:	6a03      	ldr	r3, [r0, #32]
 80117e4:	b90b      	cbnz	r3, 80117ea <_fflush_r+0x1a>
 80117e6:	f7fd fa35 	bl	800ec54 <__sinit>
 80117ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d0f3      	beq.n	80117da <_fflush_r+0xa>
 80117f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117f4:	07d0      	lsls	r0, r2, #31
 80117f6:	d404      	bmi.n	8011802 <_fflush_r+0x32>
 80117f8:	0599      	lsls	r1, r3, #22
 80117fa:	d402      	bmi.n	8011802 <_fflush_r+0x32>
 80117fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117fe:	f7fd fb40 	bl	800ee82 <__retarget_lock_acquire_recursive>
 8011802:	4628      	mov	r0, r5
 8011804:	4621      	mov	r1, r4
 8011806:	f7ff ff5d 	bl	80116c4 <__sflush_r>
 801180a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801180c:	07da      	lsls	r2, r3, #31
 801180e:	4605      	mov	r5, r0
 8011810:	d4e4      	bmi.n	80117dc <_fflush_r+0xc>
 8011812:	89a3      	ldrh	r3, [r4, #12]
 8011814:	059b      	lsls	r3, r3, #22
 8011816:	d4e1      	bmi.n	80117dc <_fflush_r+0xc>
 8011818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801181a:	f7fd fb33 	bl	800ee84 <__retarget_lock_release_recursive>
 801181e:	e7dd      	b.n	80117dc <_fflush_r+0xc>

08011820 <memmove>:
 8011820:	4288      	cmp	r0, r1
 8011822:	b510      	push	{r4, lr}
 8011824:	eb01 0402 	add.w	r4, r1, r2
 8011828:	d902      	bls.n	8011830 <memmove+0x10>
 801182a:	4284      	cmp	r4, r0
 801182c:	4623      	mov	r3, r4
 801182e:	d807      	bhi.n	8011840 <memmove+0x20>
 8011830:	1e43      	subs	r3, r0, #1
 8011832:	42a1      	cmp	r1, r4
 8011834:	d008      	beq.n	8011848 <memmove+0x28>
 8011836:	f811 2b01 	ldrb.w	r2, [r1], #1
 801183a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801183e:	e7f8      	b.n	8011832 <memmove+0x12>
 8011840:	4402      	add	r2, r0
 8011842:	4601      	mov	r1, r0
 8011844:	428a      	cmp	r2, r1
 8011846:	d100      	bne.n	801184a <memmove+0x2a>
 8011848:	bd10      	pop	{r4, pc}
 801184a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801184e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011852:	e7f7      	b.n	8011844 <memmove+0x24>

08011854 <strncmp>:
 8011854:	b510      	push	{r4, lr}
 8011856:	b16a      	cbz	r2, 8011874 <strncmp+0x20>
 8011858:	3901      	subs	r1, #1
 801185a:	1884      	adds	r4, r0, r2
 801185c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011860:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011864:	429a      	cmp	r2, r3
 8011866:	d103      	bne.n	8011870 <strncmp+0x1c>
 8011868:	42a0      	cmp	r0, r4
 801186a:	d001      	beq.n	8011870 <strncmp+0x1c>
 801186c:	2a00      	cmp	r2, #0
 801186e:	d1f5      	bne.n	801185c <strncmp+0x8>
 8011870:	1ad0      	subs	r0, r2, r3
 8011872:	bd10      	pop	{r4, pc}
 8011874:	4610      	mov	r0, r2
 8011876:	e7fc      	b.n	8011872 <strncmp+0x1e>

08011878 <_sbrk_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d06      	ldr	r5, [pc, #24]	; (8011894 <_sbrk_r+0x1c>)
 801187c:	2300      	movs	r3, #0
 801187e:	4604      	mov	r4, r0
 8011880:	4608      	mov	r0, r1
 8011882:	602b      	str	r3, [r5, #0]
 8011884:	f7f1 feaa 	bl	80035dc <_sbrk>
 8011888:	1c43      	adds	r3, r0, #1
 801188a:	d102      	bne.n	8011892 <_sbrk_r+0x1a>
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	b103      	cbz	r3, 8011892 <_sbrk_r+0x1a>
 8011890:	6023      	str	r3, [r4, #0]
 8011892:	bd38      	pop	{r3, r4, r5, pc}
 8011894:	20002350 	.word	0x20002350

08011898 <memcpy>:
 8011898:	440a      	add	r2, r1
 801189a:	4291      	cmp	r1, r2
 801189c:	f100 33ff 	add.w	r3, r0, #4294967295
 80118a0:	d100      	bne.n	80118a4 <memcpy+0xc>
 80118a2:	4770      	bx	lr
 80118a4:	b510      	push	{r4, lr}
 80118a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118ae:	4291      	cmp	r1, r2
 80118b0:	d1f9      	bne.n	80118a6 <memcpy+0xe>
 80118b2:	bd10      	pop	{r4, pc}
 80118b4:	0000      	movs	r0, r0
	...

080118b8 <nan>:
 80118b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80118c0 <nan+0x8>
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	00000000 	.word	0x00000000
 80118c4:	7ff80000 	.word	0x7ff80000

080118c8 <__assert_func>:
 80118c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118ca:	4614      	mov	r4, r2
 80118cc:	461a      	mov	r2, r3
 80118ce:	4b09      	ldr	r3, [pc, #36]	; (80118f4 <__assert_func+0x2c>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	4605      	mov	r5, r0
 80118d4:	68d8      	ldr	r0, [r3, #12]
 80118d6:	b14c      	cbz	r4, 80118ec <__assert_func+0x24>
 80118d8:	4b07      	ldr	r3, [pc, #28]	; (80118f8 <__assert_func+0x30>)
 80118da:	9100      	str	r1, [sp, #0]
 80118dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118e0:	4906      	ldr	r1, [pc, #24]	; (80118fc <__assert_func+0x34>)
 80118e2:	462b      	mov	r3, r5
 80118e4:	f000 fbca 	bl	801207c <fiprintf>
 80118e8:	f000 fbda 	bl	80120a0 <abort>
 80118ec:	4b04      	ldr	r3, [pc, #16]	; (8011900 <__assert_func+0x38>)
 80118ee:	461c      	mov	r4, r3
 80118f0:	e7f3      	b.n	80118da <__assert_func+0x12>
 80118f2:	bf00      	nop
 80118f4:	200001f4 	.word	0x200001f4
 80118f8:	080141ca 	.word	0x080141ca
 80118fc:	080141d7 	.word	0x080141d7
 8011900:	08014205 	.word	0x08014205

08011904 <_calloc_r>:
 8011904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011906:	fba1 2402 	umull	r2, r4, r1, r2
 801190a:	b94c      	cbnz	r4, 8011920 <_calloc_r+0x1c>
 801190c:	4611      	mov	r1, r2
 801190e:	9201      	str	r2, [sp, #4]
 8011910:	f7fe f9b0 	bl	800fc74 <_malloc_r>
 8011914:	9a01      	ldr	r2, [sp, #4]
 8011916:	4605      	mov	r5, r0
 8011918:	b930      	cbnz	r0, 8011928 <_calloc_r+0x24>
 801191a:	4628      	mov	r0, r5
 801191c:	b003      	add	sp, #12
 801191e:	bd30      	pop	{r4, r5, pc}
 8011920:	220c      	movs	r2, #12
 8011922:	6002      	str	r2, [r0, #0]
 8011924:	2500      	movs	r5, #0
 8011926:	e7f8      	b.n	801191a <_calloc_r+0x16>
 8011928:	4621      	mov	r1, r4
 801192a:	f7fd fa2c 	bl	800ed86 <memset>
 801192e:	e7f4      	b.n	801191a <_calloc_r+0x16>

08011930 <rshift>:
 8011930:	6903      	ldr	r3, [r0, #16]
 8011932:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801193a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801193e:	f100 0414 	add.w	r4, r0, #20
 8011942:	dd45      	ble.n	80119d0 <rshift+0xa0>
 8011944:	f011 011f 	ands.w	r1, r1, #31
 8011948:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801194c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011950:	d10c      	bne.n	801196c <rshift+0x3c>
 8011952:	f100 0710 	add.w	r7, r0, #16
 8011956:	4629      	mov	r1, r5
 8011958:	42b1      	cmp	r1, r6
 801195a:	d334      	bcc.n	80119c6 <rshift+0x96>
 801195c:	1a9b      	subs	r3, r3, r2
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	1eea      	subs	r2, r5, #3
 8011962:	4296      	cmp	r6, r2
 8011964:	bf38      	it	cc
 8011966:	2300      	movcc	r3, #0
 8011968:	4423      	add	r3, r4
 801196a:	e015      	b.n	8011998 <rshift+0x68>
 801196c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011970:	f1c1 0820 	rsb	r8, r1, #32
 8011974:	40cf      	lsrs	r7, r1
 8011976:	f105 0e04 	add.w	lr, r5, #4
 801197a:	46a1      	mov	r9, r4
 801197c:	4576      	cmp	r6, lr
 801197e:	46f4      	mov	ip, lr
 8011980:	d815      	bhi.n	80119ae <rshift+0x7e>
 8011982:	1a9a      	subs	r2, r3, r2
 8011984:	0092      	lsls	r2, r2, #2
 8011986:	3a04      	subs	r2, #4
 8011988:	3501      	adds	r5, #1
 801198a:	42ae      	cmp	r6, r5
 801198c:	bf38      	it	cc
 801198e:	2200      	movcc	r2, #0
 8011990:	18a3      	adds	r3, r4, r2
 8011992:	50a7      	str	r7, [r4, r2]
 8011994:	b107      	cbz	r7, 8011998 <rshift+0x68>
 8011996:	3304      	adds	r3, #4
 8011998:	1b1a      	subs	r2, r3, r4
 801199a:	42a3      	cmp	r3, r4
 801199c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80119a0:	bf08      	it	eq
 80119a2:	2300      	moveq	r3, #0
 80119a4:	6102      	str	r2, [r0, #16]
 80119a6:	bf08      	it	eq
 80119a8:	6143      	streq	r3, [r0, #20]
 80119aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119ae:	f8dc c000 	ldr.w	ip, [ip]
 80119b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80119b6:	ea4c 0707 	orr.w	r7, ip, r7
 80119ba:	f849 7b04 	str.w	r7, [r9], #4
 80119be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80119c2:	40cf      	lsrs	r7, r1
 80119c4:	e7da      	b.n	801197c <rshift+0x4c>
 80119c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80119ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80119ce:	e7c3      	b.n	8011958 <rshift+0x28>
 80119d0:	4623      	mov	r3, r4
 80119d2:	e7e1      	b.n	8011998 <rshift+0x68>

080119d4 <__hexdig_fun>:
 80119d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80119d8:	2b09      	cmp	r3, #9
 80119da:	d802      	bhi.n	80119e2 <__hexdig_fun+0xe>
 80119dc:	3820      	subs	r0, #32
 80119de:	b2c0      	uxtb	r0, r0
 80119e0:	4770      	bx	lr
 80119e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80119e6:	2b05      	cmp	r3, #5
 80119e8:	d801      	bhi.n	80119ee <__hexdig_fun+0x1a>
 80119ea:	3847      	subs	r0, #71	; 0x47
 80119ec:	e7f7      	b.n	80119de <__hexdig_fun+0xa>
 80119ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80119f2:	2b05      	cmp	r3, #5
 80119f4:	d801      	bhi.n	80119fa <__hexdig_fun+0x26>
 80119f6:	3827      	subs	r0, #39	; 0x27
 80119f8:	e7f1      	b.n	80119de <__hexdig_fun+0xa>
 80119fa:	2000      	movs	r0, #0
 80119fc:	4770      	bx	lr
	...

08011a00 <__gethex>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	4617      	mov	r7, r2
 8011a06:	680a      	ldr	r2, [r1, #0]
 8011a08:	b085      	sub	sp, #20
 8011a0a:	f102 0b02 	add.w	fp, r2, #2
 8011a0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011a12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011a16:	4681      	mov	r9, r0
 8011a18:	468a      	mov	sl, r1
 8011a1a:	9302      	str	r3, [sp, #8]
 8011a1c:	32fe      	adds	r2, #254	; 0xfe
 8011a1e:	eb02 030b 	add.w	r3, r2, fp
 8011a22:	46d8      	mov	r8, fp
 8011a24:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011a28:	9301      	str	r3, [sp, #4]
 8011a2a:	2830      	cmp	r0, #48	; 0x30
 8011a2c:	d0f7      	beq.n	8011a1e <__gethex+0x1e>
 8011a2e:	f7ff ffd1 	bl	80119d4 <__hexdig_fun>
 8011a32:	4604      	mov	r4, r0
 8011a34:	2800      	cmp	r0, #0
 8011a36:	d138      	bne.n	8011aaa <__gethex+0xaa>
 8011a38:	49a7      	ldr	r1, [pc, #668]	; (8011cd8 <__gethex+0x2d8>)
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	4640      	mov	r0, r8
 8011a3e:	f7ff ff09 	bl	8011854 <strncmp>
 8011a42:	4606      	mov	r6, r0
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d169      	bne.n	8011b1c <__gethex+0x11c>
 8011a48:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011a4c:	465d      	mov	r5, fp
 8011a4e:	f7ff ffc1 	bl	80119d4 <__hexdig_fun>
 8011a52:	2800      	cmp	r0, #0
 8011a54:	d064      	beq.n	8011b20 <__gethex+0x120>
 8011a56:	465a      	mov	r2, fp
 8011a58:	7810      	ldrb	r0, [r2, #0]
 8011a5a:	2830      	cmp	r0, #48	; 0x30
 8011a5c:	4690      	mov	r8, r2
 8011a5e:	f102 0201 	add.w	r2, r2, #1
 8011a62:	d0f9      	beq.n	8011a58 <__gethex+0x58>
 8011a64:	f7ff ffb6 	bl	80119d4 <__hexdig_fun>
 8011a68:	2301      	movs	r3, #1
 8011a6a:	fab0 f480 	clz	r4, r0
 8011a6e:	0964      	lsrs	r4, r4, #5
 8011a70:	465e      	mov	r6, fp
 8011a72:	9301      	str	r3, [sp, #4]
 8011a74:	4642      	mov	r2, r8
 8011a76:	4615      	mov	r5, r2
 8011a78:	3201      	adds	r2, #1
 8011a7a:	7828      	ldrb	r0, [r5, #0]
 8011a7c:	f7ff ffaa 	bl	80119d4 <__hexdig_fun>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d1f8      	bne.n	8011a76 <__gethex+0x76>
 8011a84:	4994      	ldr	r1, [pc, #592]	; (8011cd8 <__gethex+0x2d8>)
 8011a86:	2201      	movs	r2, #1
 8011a88:	4628      	mov	r0, r5
 8011a8a:	f7ff fee3 	bl	8011854 <strncmp>
 8011a8e:	b978      	cbnz	r0, 8011ab0 <__gethex+0xb0>
 8011a90:	b946      	cbnz	r6, 8011aa4 <__gethex+0xa4>
 8011a92:	1c6e      	adds	r6, r5, #1
 8011a94:	4632      	mov	r2, r6
 8011a96:	4615      	mov	r5, r2
 8011a98:	3201      	adds	r2, #1
 8011a9a:	7828      	ldrb	r0, [r5, #0]
 8011a9c:	f7ff ff9a 	bl	80119d4 <__hexdig_fun>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d1f8      	bne.n	8011a96 <__gethex+0x96>
 8011aa4:	1b73      	subs	r3, r6, r5
 8011aa6:	009e      	lsls	r6, r3, #2
 8011aa8:	e004      	b.n	8011ab4 <__gethex+0xb4>
 8011aaa:	2400      	movs	r4, #0
 8011aac:	4626      	mov	r6, r4
 8011aae:	e7e1      	b.n	8011a74 <__gethex+0x74>
 8011ab0:	2e00      	cmp	r6, #0
 8011ab2:	d1f7      	bne.n	8011aa4 <__gethex+0xa4>
 8011ab4:	782b      	ldrb	r3, [r5, #0]
 8011ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011aba:	2b50      	cmp	r3, #80	; 0x50
 8011abc:	d13d      	bne.n	8011b3a <__gethex+0x13a>
 8011abe:	786b      	ldrb	r3, [r5, #1]
 8011ac0:	2b2b      	cmp	r3, #43	; 0x2b
 8011ac2:	d02f      	beq.n	8011b24 <__gethex+0x124>
 8011ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8011ac6:	d031      	beq.n	8011b2c <__gethex+0x12c>
 8011ac8:	1c69      	adds	r1, r5, #1
 8011aca:	f04f 0b00 	mov.w	fp, #0
 8011ace:	7808      	ldrb	r0, [r1, #0]
 8011ad0:	f7ff ff80 	bl	80119d4 <__hexdig_fun>
 8011ad4:	1e42      	subs	r2, r0, #1
 8011ad6:	b2d2      	uxtb	r2, r2
 8011ad8:	2a18      	cmp	r2, #24
 8011ada:	d82e      	bhi.n	8011b3a <__gethex+0x13a>
 8011adc:	f1a0 0210 	sub.w	r2, r0, #16
 8011ae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011ae4:	f7ff ff76 	bl	80119d4 <__hexdig_fun>
 8011ae8:	f100 3cff 	add.w	ip, r0, #4294967295
 8011aec:	fa5f fc8c 	uxtb.w	ip, ip
 8011af0:	f1bc 0f18 	cmp.w	ip, #24
 8011af4:	d91d      	bls.n	8011b32 <__gethex+0x132>
 8011af6:	f1bb 0f00 	cmp.w	fp, #0
 8011afa:	d000      	beq.n	8011afe <__gethex+0xfe>
 8011afc:	4252      	negs	r2, r2
 8011afe:	4416      	add	r6, r2
 8011b00:	f8ca 1000 	str.w	r1, [sl]
 8011b04:	b1dc      	cbz	r4, 8011b3e <__gethex+0x13e>
 8011b06:	9b01      	ldr	r3, [sp, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	bf14      	ite	ne
 8011b0c:	f04f 0800 	movne.w	r8, #0
 8011b10:	f04f 0806 	moveq.w	r8, #6
 8011b14:	4640      	mov	r0, r8
 8011b16:	b005      	add	sp, #20
 8011b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1c:	4645      	mov	r5, r8
 8011b1e:	4626      	mov	r6, r4
 8011b20:	2401      	movs	r4, #1
 8011b22:	e7c7      	b.n	8011ab4 <__gethex+0xb4>
 8011b24:	f04f 0b00 	mov.w	fp, #0
 8011b28:	1ca9      	adds	r1, r5, #2
 8011b2a:	e7d0      	b.n	8011ace <__gethex+0xce>
 8011b2c:	f04f 0b01 	mov.w	fp, #1
 8011b30:	e7fa      	b.n	8011b28 <__gethex+0x128>
 8011b32:	230a      	movs	r3, #10
 8011b34:	fb03 0002 	mla	r0, r3, r2, r0
 8011b38:	e7d0      	b.n	8011adc <__gethex+0xdc>
 8011b3a:	4629      	mov	r1, r5
 8011b3c:	e7e0      	b.n	8011b00 <__gethex+0x100>
 8011b3e:	eba5 0308 	sub.w	r3, r5, r8
 8011b42:	3b01      	subs	r3, #1
 8011b44:	4621      	mov	r1, r4
 8011b46:	2b07      	cmp	r3, #7
 8011b48:	dc0a      	bgt.n	8011b60 <__gethex+0x160>
 8011b4a:	4648      	mov	r0, r9
 8011b4c:	f7fe f91e 	bl	800fd8c <_Balloc>
 8011b50:	4604      	mov	r4, r0
 8011b52:	b940      	cbnz	r0, 8011b66 <__gethex+0x166>
 8011b54:	4b61      	ldr	r3, [pc, #388]	; (8011cdc <__gethex+0x2dc>)
 8011b56:	4602      	mov	r2, r0
 8011b58:	21e4      	movs	r1, #228	; 0xe4
 8011b5a:	4861      	ldr	r0, [pc, #388]	; (8011ce0 <__gethex+0x2e0>)
 8011b5c:	f7ff feb4 	bl	80118c8 <__assert_func>
 8011b60:	3101      	adds	r1, #1
 8011b62:	105b      	asrs	r3, r3, #1
 8011b64:	e7ef      	b.n	8011b46 <__gethex+0x146>
 8011b66:	f100 0a14 	add.w	sl, r0, #20
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	495a      	ldr	r1, [pc, #360]	; (8011cd8 <__gethex+0x2d8>)
 8011b6e:	f8cd a004 	str.w	sl, [sp, #4]
 8011b72:	469b      	mov	fp, r3
 8011b74:	45a8      	cmp	r8, r5
 8011b76:	d342      	bcc.n	8011bfe <__gethex+0x1fe>
 8011b78:	9801      	ldr	r0, [sp, #4]
 8011b7a:	f840 bb04 	str.w	fp, [r0], #4
 8011b7e:	eba0 000a 	sub.w	r0, r0, sl
 8011b82:	1080      	asrs	r0, r0, #2
 8011b84:	6120      	str	r0, [r4, #16]
 8011b86:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011b8a:	4658      	mov	r0, fp
 8011b8c:	f7fe f9f0 	bl	800ff70 <__hi0bits>
 8011b90:	683d      	ldr	r5, [r7, #0]
 8011b92:	eba8 0000 	sub.w	r0, r8, r0
 8011b96:	42a8      	cmp	r0, r5
 8011b98:	dd59      	ble.n	8011c4e <__gethex+0x24e>
 8011b9a:	eba0 0805 	sub.w	r8, r0, r5
 8011b9e:	4641      	mov	r1, r8
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f7fe fd7f 	bl	80106a4 <__any_on>
 8011ba6:	4683      	mov	fp, r0
 8011ba8:	b1b8      	cbz	r0, 8011bda <__gethex+0x1da>
 8011baa:	f108 33ff 	add.w	r3, r8, #4294967295
 8011bae:	1159      	asrs	r1, r3, #5
 8011bb0:	f003 021f 	and.w	r2, r3, #31
 8011bb4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011bb8:	f04f 0b01 	mov.w	fp, #1
 8011bbc:	fa0b f202 	lsl.w	r2, fp, r2
 8011bc0:	420a      	tst	r2, r1
 8011bc2:	d00a      	beq.n	8011bda <__gethex+0x1da>
 8011bc4:	455b      	cmp	r3, fp
 8011bc6:	dd06      	ble.n	8011bd6 <__gethex+0x1d6>
 8011bc8:	f1a8 0102 	sub.w	r1, r8, #2
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f7fe fd69 	bl	80106a4 <__any_on>
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d138      	bne.n	8011c48 <__gethex+0x248>
 8011bd6:	f04f 0b02 	mov.w	fp, #2
 8011bda:	4641      	mov	r1, r8
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f7ff fea7 	bl	8011930 <rshift>
 8011be2:	4446      	add	r6, r8
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	42b3      	cmp	r3, r6
 8011be8:	da41      	bge.n	8011c6e <__gethex+0x26e>
 8011bea:	4621      	mov	r1, r4
 8011bec:	4648      	mov	r0, r9
 8011bee:	f7fe f90d 	bl	800fe0c <_Bfree>
 8011bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	6013      	str	r3, [r2, #0]
 8011bf8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011bfc:	e78a      	b.n	8011b14 <__gethex+0x114>
 8011bfe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011c02:	2a2e      	cmp	r2, #46	; 0x2e
 8011c04:	d014      	beq.n	8011c30 <__gethex+0x230>
 8011c06:	2b20      	cmp	r3, #32
 8011c08:	d106      	bne.n	8011c18 <__gethex+0x218>
 8011c0a:	9b01      	ldr	r3, [sp, #4]
 8011c0c:	f843 bb04 	str.w	fp, [r3], #4
 8011c10:	f04f 0b00 	mov.w	fp, #0
 8011c14:	9301      	str	r3, [sp, #4]
 8011c16:	465b      	mov	r3, fp
 8011c18:	7828      	ldrb	r0, [r5, #0]
 8011c1a:	9303      	str	r3, [sp, #12]
 8011c1c:	f7ff feda 	bl	80119d4 <__hexdig_fun>
 8011c20:	9b03      	ldr	r3, [sp, #12]
 8011c22:	f000 000f 	and.w	r0, r0, #15
 8011c26:	4098      	lsls	r0, r3
 8011c28:	ea4b 0b00 	orr.w	fp, fp, r0
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	e7a1      	b.n	8011b74 <__gethex+0x174>
 8011c30:	45a8      	cmp	r8, r5
 8011c32:	d8e8      	bhi.n	8011c06 <__gethex+0x206>
 8011c34:	2201      	movs	r2, #1
 8011c36:	4628      	mov	r0, r5
 8011c38:	9303      	str	r3, [sp, #12]
 8011c3a:	f7ff fe0b 	bl	8011854 <strncmp>
 8011c3e:	4926      	ldr	r1, [pc, #152]	; (8011cd8 <__gethex+0x2d8>)
 8011c40:	9b03      	ldr	r3, [sp, #12]
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d1df      	bne.n	8011c06 <__gethex+0x206>
 8011c46:	e795      	b.n	8011b74 <__gethex+0x174>
 8011c48:	f04f 0b03 	mov.w	fp, #3
 8011c4c:	e7c5      	b.n	8011bda <__gethex+0x1da>
 8011c4e:	da0b      	bge.n	8011c68 <__gethex+0x268>
 8011c50:	eba5 0800 	sub.w	r8, r5, r0
 8011c54:	4621      	mov	r1, r4
 8011c56:	4642      	mov	r2, r8
 8011c58:	4648      	mov	r0, r9
 8011c5a:	f7fe faf1 	bl	8010240 <__lshift>
 8011c5e:	eba6 0608 	sub.w	r6, r6, r8
 8011c62:	4604      	mov	r4, r0
 8011c64:	f100 0a14 	add.w	sl, r0, #20
 8011c68:	f04f 0b00 	mov.w	fp, #0
 8011c6c:	e7ba      	b.n	8011be4 <__gethex+0x1e4>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	42b3      	cmp	r3, r6
 8011c72:	dd73      	ble.n	8011d5c <__gethex+0x35c>
 8011c74:	1b9e      	subs	r6, r3, r6
 8011c76:	42b5      	cmp	r5, r6
 8011c78:	dc34      	bgt.n	8011ce4 <__gethex+0x2e4>
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	d023      	beq.n	8011cc8 <__gethex+0x2c8>
 8011c80:	2b03      	cmp	r3, #3
 8011c82:	d025      	beq.n	8011cd0 <__gethex+0x2d0>
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d115      	bne.n	8011cb4 <__gethex+0x2b4>
 8011c88:	42b5      	cmp	r5, r6
 8011c8a:	d113      	bne.n	8011cb4 <__gethex+0x2b4>
 8011c8c:	2d01      	cmp	r5, #1
 8011c8e:	d10b      	bne.n	8011ca8 <__gethex+0x2a8>
 8011c90:	9a02      	ldr	r2, [sp, #8]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6013      	str	r3, [r2, #0]
 8011c96:	2301      	movs	r3, #1
 8011c98:	6123      	str	r3, [r4, #16]
 8011c9a:	f8ca 3000 	str.w	r3, [sl]
 8011c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ca0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011ca4:	601c      	str	r4, [r3, #0]
 8011ca6:	e735      	b.n	8011b14 <__gethex+0x114>
 8011ca8:	1e69      	subs	r1, r5, #1
 8011caa:	4620      	mov	r0, r4
 8011cac:	f7fe fcfa 	bl	80106a4 <__any_on>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d1ed      	bne.n	8011c90 <__gethex+0x290>
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	4648      	mov	r0, r9
 8011cb8:	f7fe f8a8 	bl	800fe0c <_Bfree>
 8011cbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	6013      	str	r3, [r2, #0]
 8011cc2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011cc6:	e725      	b.n	8011b14 <__gethex+0x114>
 8011cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1f2      	bne.n	8011cb4 <__gethex+0x2b4>
 8011cce:	e7df      	b.n	8011c90 <__gethex+0x290>
 8011cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1dc      	bne.n	8011c90 <__gethex+0x290>
 8011cd6:	e7ed      	b.n	8011cb4 <__gethex+0x2b4>
 8011cd8:	0801405c 	.word	0x0801405c
 8011cdc:	08013ef5 	.word	0x08013ef5
 8011ce0:	08014206 	.word	0x08014206
 8011ce4:	f106 38ff 	add.w	r8, r6, #4294967295
 8011ce8:	f1bb 0f00 	cmp.w	fp, #0
 8011cec:	d133      	bne.n	8011d56 <__gethex+0x356>
 8011cee:	f1b8 0f00 	cmp.w	r8, #0
 8011cf2:	d004      	beq.n	8011cfe <__gethex+0x2fe>
 8011cf4:	4641      	mov	r1, r8
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	f7fe fcd4 	bl	80106a4 <__any_on>
 8011cfc:	4683      	mov	fp, r0
 8011cfe:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011d02:	2301      	movs	r3, #1
 8011d04:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011d08:	f008 081f 	and.w	r8, r8, #31
 8011d0c:	fa03 f308 	lsl.w	r3, r3, r8
 8011d10:	4213      	tst	r3, r2
 8011d12:	4631      	mov	r1, r6
 8011d14:	4620      	mov	r0, r4
 8011d16:	bf18      	it	ne
 8011d18:	f04b 0b02 	orrne.w	fp, fp, #2
 8011d1c:	1bad      	subs	r5, r5, r6
 8011d1e:	f7ff fe07 	bl	8011930 <rshift>
 8011d22:	687e      	ldr	r6, [r7, #4]
 8011d24:	f04f 0802 	mov.w	r8, #2
 8011d28:	f1bb 0f00 	cmp.w	fp, #0
 8011d2c:	d04a      	beq.n	8011dc4 <__gethex+0x3c4>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	d016      	beq.n	8011d62 <__gethex+0x362>
 8011d34:	2b03      	cmp	r3, #3
 8011d36:	d018      	beq.n	8011d6a <__gethex+0x36a>
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d109      	bne.n	8011d50 <__gethex+0x350>
 8011d3c:	f01b 0f02 	tst.w	fp, #2
 8011d40:	d006      	beq.n	8011d50 <__gethex+0x350>
 8011d42:	f8da 3000 	ldr.w	r3, [sl]
 8011d46:	ea4b 0b03 	orr.w	fp, fp, r3
 8011d4a:	f01b 0f01 	tst.w	fp, #1
 8011d4e:	d10f      	bne.n	8011d70 <__gethex+0x370>
 8011d50:	f048 0810 	orr.w	r8, r8, #16
 8011d54:	e036      	b.n	8011dc4 <__gethex+0x3c4>
 8011d56:	f04f 0b01 	mov.w	fp, #1
 8011d5a:	e7d0      	b.n	8011cfe <__gethex+0x2fe>
 8011d5c:	f04f 0801 	mov.w	r8, #1
 8011d60:	e7e2      	b.n	8011d28 <__gethex+0x328>
 8011d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d64:	f1c3 0301 	rsb	r3, r3, #1
 8011d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d0ef      	beq.n	8011d50 <__gethex+0x350>
 8011d70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011d74:	f104 0214 	add.w	r2, r4, #20
 8011d78:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011d82:	2300      	movs	r3, #0
 8011d84:	4694      	mov	ip, r2
 8011d86:	f852 1b04 	ldr.w	r1, [r2], #4
 8011d8a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011d8e:	d01e      	beq.n	8011dce <__gethex+0x3ce>
 8011d90:	3101      	adds	r1, #1
 8011d92:	f8cc 1000 	str.w	r1, [ip]
 8011d96:	f1b8 0f02 	cmp.w	r8, #2
 8011d9a:	f104 0214 	add.w	r2, r4, #20
 8011d9e:	d13d      	bne.n	8011e1c <__gethex+0x41c>
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	3b01      	subs	r3, #1
 8011da4:	42ab      	cmp	r3, r5
 8011da6:	d10b      	bne.n	8011dc0 <__gethex+0x3c0>
 8011da8:	1169      	asrs	r1, r5, #5
 8011daa:	2301      	movs	r3, #1
 8011dac:	f005 051f 	and.w	r5, r5, #31
 8011db0:	fa03 f505 	lsl.w	r5, r3, r5
 8011db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011db8:	421d      	tst	r5, r3
 8011dba:	bf18      	it	ne
 8011dbc:	f04f 0801 	movne.w	r8, #1
 8011dc0:	f048 0820 	orr.w	r8, r8, #32
 8011dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dc6:	601c      	str	r4, [r3, #0]
 8011dc8:	9b02      	ldr	r3, [sp, #8]
 8011dca:	601e      	str	r6, [r3, #0]
 8011dcc:	e6a2      	b.n	8011b14 <__gethex+0x114>
 8011dce:	4290      	cmp	r0, r2
 8011dd0:	f842 3c04 	str.w	r3, [r2, #-4]
 8011dd4:	d8d6      	bhi.n	8011d84 <__gethex+0x384>
 8011dd6:	68a2      	ldr	r2, [r4, #8]
 8011dd8:	4593      	cmp	fp, r2
 8011dda:	db17      	blt.n	8011e0c <__gethex+0x40c>
 8011ddc:	6861      	ldr	r1, [r4, #4]
 8011dde:	4648      	mov	r0, r9
 8011de0:	3101      	adds	r1, #1
 8011de2:	f7fd ffd3 	bl	800fd8c <_Balloc>
 8011de6:	4682      	mov	sl, r0
 8011de8:	b918      	cbnz	r0, 8011df2 <__gethex+0x3f2>
 8011dea:	4b1b      	ldr	r3, [pc, #108]	; (8011e58 <__gethex+0x458>)
 8011dec:	4602      	mov	r2, r0
 8011dee:	2184      	movs	r1, #132	; 0x84
 8011df0:	e6b3      	b.n	8011b5a <__gethex+0x15a>
 8011df2:	6922      	ldr	r2, [r4, #16]
 8011df4:	3202      	adds	r2, #2
 8011df6:	f104 010c 	add.w	r1, r4, #12
 8011dfa:	0092      	lsls	r2, r2, #2
 8011dfc:	300c      	adds	r0, #12
 8011dfe:	f7ff fd4b 	bl	8011898 <memcpy>
 8011e02:	4621      	mov	r1, r4
 8011e04:	4648      	mov	r0, r9
 8011e06:	f7fe f801 	bl	800fe0c <_Bfree>
 8011e0a:	4654      	mov	r4, sl
 8011e0c:	6922      	ldr	r2, [r4, #16]
 8011e0e:	1c51      	adds	r1, r2, #1
 8011e10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011e14:	6121      	str	r1, [r4, #16]
 8011e16:	2101      	movs	r1, #1
 8011e18:	6151      	str	r1, [r2, #20]
 8011e1a:	e7bc      	b.n	8011d96 <__gethex+0x396>
 8011e1c:	6921      	ldr	r1, [r4, #16]
 8011e1e:	4559      	cmp	r1, fp
 8011e20:	dd0b      	ble.n	8011e3a <__gethex+0x43a>
 8011e22:	2101      	movs	r1, #1
 8011e24:	4620      	mov	r0, r4
 8011e26:	f7ff fd83 	bl	8011930 <rshift>
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	3601      	adds	r6, #1
 8011e2e:	42b3      	cmp	r3, r6
 8011e30:	f6ff aedb 	blt.w	8011bea <__gethex+0x1ea>
 8011e34:	f04f 0801 	mov.w	r8, #1
 8011e38:	e7c2      	b.n	8011dc0 <__gethex+0x3c0>
 8011e3a:	f015 051f 	ands.w	r5, r5, #31
 8011e3e:	d0f9      	beq.n	8011e34 <__gethex+0x434>
 8011e40:	9b01      	ldr	r3, [sp, #4]
 8011e42:	441a      	add	r2, r3
 8011e44:	f1c5 0520 	rsb	r5, r5, #32
 8011e48:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011e4c:	f7fe f890 	bl	800ff70 <__hi0bits>
 8011e50:	42a8      	cmp	r0, r5
 8011e52:	dbe6      	blt.n	8011e22 <__gethex+0x422>
 8011e54:	e7ee      	b.n	8011e34 <__gethex+0x434>
 8011e56:	bf00      	nop
 8011e58:	08013ef5 	.word	0x08013ef5

08011e5c <L_shift>:
 8011e5c:	f1c2 0208 	rsb	r2, r2, #8
 8011e60:	0092      	lsls	r2, r2, #2
 8011e62:	b570      	push	{r4, r5, r6, lr}
 8011e64:	f1c2 0620 	rsb	r6, r2, #32
 8011e68:	6843      	ldr	r3, [r0, #4]
 8011e6a:	6804      	ldr	r4, [r0, #0]
 8011e6c:	fa03 f506 	lsl.w	r5, r3, r6
 8011e70:	432c      	orrs	r4, r5
 8011e72:	40d3      	lsrs	r3, r2
 8011e74:	6004      	str	r4, [r0, #0]
 8011e76:	f840 3f04 	str.w	r3, [r0, #4]!
 8011e7a:	4288      	cmp	r0, r1
 8011e7c:	d3f4      	bcc.n	8011e68 <L_shift+0xc>
 8011e7e:	bd70      	pop	{r4, r5, r6, pc}

08011e80 <__match>:
 8011e80:	b530      	push	{r4, r5, lr}
 8011e82:	6803      	ldr	r3, [r0, #0]
 8011e84:	3301      	adds	r3, #1
 8011e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e8a:	b914      	cbnz	r4, 8011e92 <__match+0x12>
 8011e8c:	6003      	str	r3, [r0, #0]
 8011e8e:	2001      	movs	r0, #1
 8011e90:	bd30      	pop	{r4, r5, pc}
 8011e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011e9a:	2d19      	cmp	r5, #25
 8011e9c:	bf98      	it	ls
 8011e9e:	3220      	addls	r2, #32
 8011ea0:	42a2      	cmp	r2, r4
 8011ea2:	d0f0      	beq.n	8011e86 <__match+0x6>
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	e7f3      	b.n	8011e90 <__match+0x10>

08011ea8 <__hexnan>:
 8011ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eac:	680b      	ldr	r3, [r1, #0]
 8011eae:	6801      	ldr	r1, [r0, #0]
 8011eb0:	115e      	asrs	r6, r3, #5
 8011eb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011eb6:	f013 031f 	ands.w	r3, r3, #31
 8011eba:	b087      	sub	sp, #28
 8011ebc:	bf18      	it	ne
 8011ebe:	3604      	addne	r6, #4
 8011ec0:	2500      	movs	r5, #0
 8011ec2:	1f37      	subs	r7, r6, #4
 8011ec4:	4682      	mov	sl, r0
 8011ec6:	4690      	mov	r8, r2
 8011ec8:	9301      	str	r3, [sp, #4]
 8011eca:	f846 5c04 	str.w	r5, [r6, #-4]
 8011ece:	46b9      	mov	r9, r7
 8011ed0:	463c      	mov	r4, r7
 8011ed2:	9502      	str	r5, [sp, #8]
 8011ed4:	46ab      	mov	fp, r5
 8011ed6:	784a      	ldrb	r2, [r1, #1]
 8011ed8:	1c4b      	adds	r3, r1, #1
 8011eda:	9303      	str	r3, [sp, #12]
 8011edc:	b342      	cbz	r2, 8011f30 <__hexnan+0x88>
 8011ede:	4610      	mov	r0, r2
 8011ee0:	9105      	str	r1, [sp, #20]
 8011ee2:	9204      	str	r2, [sp, #16]
 8011ee4:	f7ff fd76 	bl	80119d4 <__hexdig_fun>
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	d14f      	bne.n	8011f8c <__hexnan+0xe4>
 8011eec:	9a04      	ldr	r2, [sp, #16]
 8011eee:	9905      	ldr	r1, [sp, #20]
 8011ef0:	2a20      	cmp	r2, #32
 8011ef2:	d818      	bhi.n	8011f26 <__hexnan+0x7e>
 8011ef4:	9b02      	ldr	r3, [sp, #8]
 8011ef6:	459b      	cmp	fp, r3
 8011ef8:	dd13      	ble.n	8011f22 <__hexnan+0x7a>
 8011efa:	454c      	cmp	r4, r9
 8011efc:	d206      	bcs.n	8011f0c <__hexnan+0x64>
 8011efe:	2d07      	cmp	r5, #7
 8011f00:	dc04      	bgt.n	8011f0c <__hexnan+0x64>
 8011f02:	462a      	mov	r2, r5
 8011f04:	4649      	mov	r1, r9
 8011f06:	4620      	mov	r0, r4
 8011f08:	f7ff ffa8 	bl	8011e5c <L_shift>
 8011f0c:	4544      	cmp	r4, r8
 8011f0e:	d950      	bls.n	8011fb2 <__hexnan+0x10a>
 8011f10:	2300      	movs	r3, #0
 8011f12:	f1a4 0904 	sub.w	r9, r4, #4
 8011f16:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f1a:	f8cd b008 	str.w	fp, [sp, #8]
 8011f1e:	464c      	mov	r4, r9
 8011f20:	461d      	mov	r5, r3
 8011f22:	9903      	ldr	r1, [sp, #12]
 8011f24:	e7d7      	b.n	8011ed6 <__hexnan+0x2e>
 8011f26:	2a29      	cmp	r2, #41	; 0x29
 8011f28:	d155      	bne.n	8011fd6 <__hexnan+0x12e>
 8011f2a:	3102      	adds	r1, #2
 8011f2c:	f8ca 1000 	str.w	r1, [sl]
 8011f30:	f1bb 0f00 	cmp.w	fp, #0
 8011f34:	d04f      	beq.n	8011fd6 <__hexnan+0x12e>
 8011f36:	454c      	cmp	r4, r9
 8011f38:	d206      	bcs.n	8011f48 <__hexnan+0xa0>
 8011f3a:	2d07      	cmp	r5, #7
 8011f3c:	dc04      	bgt.n	8011f48 <__hexnan+0xa0>
 8011f3e:	462a      	mov	r2, r5
 8011f40:	4649      	mov	r1, r9
 8011f42:	4620      	mov	r0, r4
 8011f44:	f7ff ff8a 	bl	8011e5c <L_shift>
 8011f48:	4544      	cmp	r4, r8
 8011f4a:	d934      	bls.n	8011fb6 <__hexnan+0x10e>
 8011f4c:	f1a8 0204 	sub.w	r2, r8, #4
 8011f50:	4623      	mov	r3, r4
 8011f52:	f853 1b04 	ldr.w	r1, [r3], #4
 8011f56:	f842 1f04 	str.w	r1, [r2, #4]!
 8011f5a:	429f      	cmp	r7, r3
 8011f5c:	d2f9      	bcs.n	8011f52 <__hexnan+0xaa>
 8011f5e:	1b3b      	subs	r3, r7, r4
 8011f60:	f023 0303 	bic.w	r3, r3, #3
 8011f64:	3304      	adds	r3, #4
 8011f66:	3e03      	subs	r6, #3
 8011f68:	3401      	adds	r4, #1
 8011f6a:	42a6      	cmp	r6, r4
 8011f6c:	bf38      	it	cc
 8011f6e:	2304      	movcc	r3, #4
 8011f70:	4443      	add	r3, r8
 8011f72:	2200      	movs	r2, #0
 8011f74:	f843 2b04 	str.w	r2, [r3], #4
 8011f78:	429f      	cmp	r7, r3
 8011f7a:	d2fb      	bcs.n	8011f74 <__hexnan+0xcc>
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	b91b      	cbnz	r3, 8011f88 <__hexnan+0xe0>
 8011f80:	4547      	cmp	r7, r8
 8011f82:	d126      	bne.n	8011fd2 <__hexnan+0x12a>
 8011f84:	2301      	movs	r3, #1
 8011f86:	603b      	str	r3, [r7, #0]
 8011f88:	2005      	movs	r0, #5
 8011f8a:	e025      	b.n	8011fd8 <__hexnan+0x130>
 8011f8c:	3501      	adds	r5, #1
 8011f8e:	2d08      	cmp	r5, #8
 8011f90:	f10b 0b01 	add.w	fp, fp, #1
 8011f94:	dd06      	ble.n	8011fa4 <__hexnan+0xfc>
 8011f96:	4544      	cmp	r4, r8
 8011f98:	d9c3      	bls.n	8011f22 <__hexnan+0x7a>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fa0:	2501      	movs	r5, #1
 8011fa2:	3c04      	subs	r4, #4
 8011fa4:	6822      	ldr	r2, [r4, #0]
 8011fa6:	f000 000f 	and.w	r0, r0, #15
 8011faa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011fae:	6020      	str	r0, [r4, #0]
 8011fb0:	e7b7      	b.n	8011f22 <__hexnan+0x7a>
 8011fb2:	2508      	movs	r5, #8
 8011fb4:	e7b5      	b.n	8011f22 <__hexnan+0x7a>
 8011fb6:	9b01      	ldr	r3, [sp, #4]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d0df      	beq.n	8011f7c <__hexnan+0xd4>
 8011fbc:	f1c3 0320 	rsb	r3, r3, #32
 8011fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011fc4:	40da      	lsrs	r2, r3
 8011fc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011fca:	4013      	ands	r3, r2
 8011fcc:	f846 3c04 	str.w	r3, [r6, #-4]
 8011fd0:	e7d4      	b.n	8011f7c <__hexnan+0xd4>
 8011fd2:	3f04      	subs	r7, #4
 8011fd4:	e7d2      	b.n	8011f7c <__hexnan+0xd4>
 8011fd6:	2004      	movs	r0, #4
 8011fd8:	b007      	add	sp, #28
 8011fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011fde <__ascii_mbtowc>:
 8011fde:	b082      	sub	sp, #8
 8011fe0:	b901      	cbnz	r1, 8011fe4 <__ascii_mbtowc+0x6>
 8011fe2:	a901      	add	r1, sp, #4
 8011fe4:	b142      	cbz	r2, 8011ff8 <__ascii_mbtowc+0x1a>
 8011fe6:	b14b      	cbz	r3, 8011ffc <__ascii_mbtowc+0x1e>
 8011fe8:	7813      	ldrb	r3, [r2, #0]
 8011fea:	600b      	str	r3, [r1, #0]
 8011fec:	7812      	ldrb	r2, [r2, #0]
 8011fee:	1e10      	subs	r0, r2, #0
 8011ff0:	bf18      	it	ne
 8011ff2:	2001      	movne	r0, #1
 8011ff4:	b002      	add	sp, #8
 8011ff6:	4770      	bx	lr
 8011ff8:	4610      	mov	r0, r2
 8011ffa:	e7fb      	b.n	8011ff4 <__ascii_mbtowc+0x16>
 8011ffc:	f06f 0001 	mvn.w	r0, #1
 8012000:	e7f8      	b.n	8011ff4 <__ascii_mbtowc+0x16>

08012002 <_realloc_r>:
 8012002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012006:	4680      	mov	r8, r0
 8012008:	4614      	mov	r4, r2
 801200a:	460e      	mov	r6, r1
 801200c:	b921      	cbnz	r1, 8012018 <_realloc_r+0x16>
 801200e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012012:	4611      	mov	r1, r2
 8012014:	f7fd be2e 	b.w	800fc74 <_malloc_r>
 8012018:	b92a      	cbnz	r2, 8012026 <_realloc_r+0x24>
 801201a:	f7fd fdb7 	bl	800fb8c <_free_r>
 801201e:	4625      	mov	r5, r4
 8012020:	4628      	mov	r0, r5
 8012022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012026:	f000 f842 	bl	80120ae <_malloc_usable_size_r>
 801202a:	4284      	cmp	r4, r0
 801202c:	4607      	mov	r7, r0
 801202e:	d802      	bhi.n	8012036 <_realloc_r+0x34>
 8012030:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012034:	d812      	bhi.n	801205c <_realloc_r+0x5a>
 8012036:	4621      	mov	r1, r4
 8012038:	4640      	mov	r0, r8
 801203a:	f7fd fe1b 	bl	800fc74 <_malloc_r>
 801203e:	4605      	mov	r5, r0
 8012040:	2800      	cmp	r0, #0
 8012042:	d0ed      	beq.n	8012020 <_realloc_r+0x1e>
 8012044:	42bc      	cmp	r4, r7
 8012046:	4622      	mov	r2, r4
 8012048:	4631      	mov	r1, r6
 801204a:	bf28      	it	cs
 801204c:	463a      	movcs	r2, r7
 801204e:	f7ff fc23 	bl	8011898 <memcpy>
 8012052:	4631      	mov	r1, r6
 8012054:	4640      	mov	r0, r8
 8012056:	f7fd fd99 	bl	800fb8c <_free_r>
 801205a:	e7e1      	b.n	8012020 <_realloc_r+0x1e>
 801205c:	4635      	mov	r5, r6
 801205e:	e7df      	b.n	8012020 <_realloc_r+0x1e>

08012060 <__ascii_wctomb>:
 8012060:	b149      	cbz	r1, 8012076 <__ascii_wctomb+0x16>
 8012062:	2aff      	cmp	r2, #255	; 0xff
 8012064:	bf85      	ittet	hi
 8012066:	238a      	movhi	r3, #138	; 0x8a
 8012068:	6003      	strhi	r3, [r0, #0]
 801206a:	700a      	strbls	r2, [r1, #0]
 801206c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012070:	bf98      	it	ls
 8012072:	2001      	movls	r0, #1
 8012074:	4770      	bx	lr
 8012076:	4608      	mov	r0, r1
 8012078:	4770      	bx	lr
	...

0801207c <fiprintf>:
 801207c:	b40e      	push	{r1, r2, r3}
 801207e:	b503      	push	{r0, r1, lr}
 8012080:	4601      	mov	r1, r0
 8012082:	ab03      	add	r3, sp, #12
 8012084:	4805      	ldr	r0, [pc, #20]	; (801209c <fiprintf+0x20>)
 8012086:	f853 2b04 	ldr.w	r2, [r3], #4
 801208a:	6800      	ldr	r0, [r0, #0]
 801208c:	9301      	str	r3, [sp, #4]
 801208e:	f000 f83f 	bl	8012110 <_vfiprintf_r>
 8012092:	b002      	add	sp, #8
 8012094:	f85d eb04 	ldr.w	lr, [sp], #4
 8012098:	b003      	add	sp, #12
 801209a:	4770      	bx	lr
 801209c:	200001f4 	.word	0x200001f4

080120a0 <abort>:
 80120a0:	b508      	push	{r3, lr}
 80120a2:	2006      	movs	r0, #6
 80120a4:	f000 fa0c 	bl	80124c0 <raise>
 80120a8:	2001      	movs	r0, #1
 80120aa:	f7f1 fa1f 	bl	80034ec <_exit>

080120ae <_malloc_usable_size_r>:
 80120ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120b2:	1f18      	subs	r0, r3, #4
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	bfbc      	itt	lt
 80120b8:	580b      	ldrlt	r3, [r1, r0]
 80120ba:	18c0      	addlt	r0, r0, r3
 80120bc:	4770      	bx	lr

080120be <__sfputc_r>:
 80120be:	6893      	ldr	r3, [r2, #8]
 80120c0:	3b01      	subs	r3, #1
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	b410      	push	{r4}
 80120c6:	6093      	str	r3, [r2, #8]
 80120c8:	da08      	bge.n	80120dc <__sfputc_r+0x1e>
 80120ca:	6994      	ldr	r4, [r2, #24]
 80120cc:	42a3      	cmp	r3, r4
 80120ce:	db01      	blt.n	80120d4 <__sfputc_r+0x16>
 80120d0:	290a      	cmp	r1, #10
 80120d2:	d103      	bne.n	80120dc <__sfputc_r+0x1e>
 80120d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d8:	f000 b934 	b.w	8012344 <__swbuf_r>
 80120dc:	6813      	ldr	r3, [r2, #0]
 80120de:	1c58      	adds	r0, r3, #1
 80120e0:	6010      	str	r0, [r2, #0]
 80120e2:	7019      	strb	r1, [r3, #0]
 80120e4:	4608      	mov	r0, r1
 80120e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120ea:	4770      	bx	lr

080120ec <__sfputs_r>:
 80120ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ee:	4606      	mov	r6, r0
 80120f0:	460f      	mov	r7, r1
 80120f2:	4614      	mov	r4, r2
 80120f4:	18d5      	adds	r5, r2, r3
 80120f6:	42ac      	cmp	r4, r5
 80120f8:	d101      	bne.n	80120fe <__sfputs_r+0x12>
 80120fa:	2000      	movs	r0, #0
 80120fc:	e007      	b.n	801210e <__sfputs_r+0x22>
 80120fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012102:	463a      	mov	r2, r7
 8012104:	4630      	mov	r0, r6
 8012106:	f7ff ffda 	bl	80120be <__sfputc_r>
 801210a:	1c43      	adds	r3, r0, #1
 801210c:	d1f3      	bne.n	80120f6 <__sfputs_r+0xa>
 801210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012110 <_vfiprintf_r>:
 8012110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	460d      	mov	r5, r1
 8012116:	b09d      	sub	sp, #116	; 0x74
 8012118:	4614      	mov	r4, r2
 801211a:	4698      	mov	r8, r3
 801211c:	4606      	mov	r6, r0
 801211e:	b118      	cbz	r0, 8012128 <_vfiprintf_r+0x18>
 8012120:	6a03      	ldr	r3, [r0, #32]
 8012122:	b90b      	cbnz	r3, 8012128 <_vfiprintf_r+0x18>
 8012124:	f7fc fd96 	bl	800ec54 <__sinit>
 8012128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801212a:	07d9      	lsls	r1, r3, #31
 801212c:	d405      	bmi.n	801213a <_vfiprintf_r+0x2a>
 801212e:	89ab      	ldrh	r3, [r5, #12]
 8012130:	059a      	lsls	r2, r3, #22
 8012132:	d402      	bmi.n	801213a <_vfiprintf_r+0x2a>
 8012134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012136:	f7fc fea4 	bl	800ee82 <__retarget_lock_acquire_recursive>
 801213a:	89ab      	ldrh	r3, [r5, #12]
 801213c:	071b      	lsls	r3, r3, #28
 801213e:	d501      	bpl.n	8012144 <_vfiprintf_r+0x34>
 8012140:	692b      	ldr	r3, [r5, #16]
 8012142:	b99b      	cbnz	r3, 801216c <_vfiprintf_r+0x5c>
 8012144:	4629      	mov	r1, r5
 8012146:	4630      	mov	r0, r6
 8012148:	f000 f93a 	bl	80123c0 <__swsetup_r>
 801214c:	b170      	cbz	r0, 801216c <_vfiprintf_r+0x5c>
 801214e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012150:	07dc      	lsls	r4, r3, #31
 8012152:	d504      	bpl.n	801215e <_vfiprintf_r+0x4e>
 8012154:	f04f 30ff 	mov.w	r0, #4294967295
 8012158:	b01d      	add	sp, #116	; 0x74
 801215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215e:	89ab      	ldrh	r3, [r5, #12]
 8012160:	0598      	lsls	r0, r3, #22
 8012162:	d4f7      	bmi.n	8012154 <_vfiprintf_r+0x44>
 8012164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012166:	f7fc fe8d 	bl	800ee84 <__retarget_lock_release_recursive>
 801216a:	e7f3      	b.n	8012154 <_vfiprintf_r+0x44>
 801216c:	2300      	movs	r3, #0
 801216e:	9309      	str	r3, [sp, #36]	; 0x24
 8012170:	2320      	movs	r3, #32
 8012172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012176:	f8cd 800c 	str.w	r8, [sp, #12]
 801217a:	2330      	movs	r3, #48	; 0x30
 801217c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012330 <_vfiprintf_r+0x220>
 8012180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012184:	f04f 0901 	mov.w	r9, #1
 8012188:	4623      	mov	r3, r4
 801218a:	469a      	mov	sl, r3
 801218c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012190:	b10a      	cbz	r2, 8012196 <_vfiprintf_r+0x86>
 8012192:	2a25      	cmp	r2, #37	; 0x25
 8012194:	d1f9      	bne.n	801218a <_vfiprintf_r+0x7a>
 8012196:	ebba 0b04 	subs.w	fp, sl, r4
 801219a:	d00b      	beq.n	80121b4 <_vfiprintf_r+0xa4>
 801219c:	465b      	mov	r3, fp
 801219e:	4622      	mov	r2, r4
 80121a0:	4629      	mov	r1, r5
 80121a2:	4630      	mov	r0, r6
 80121a4:	f7ff ffa2 	bl	80120ec <__sfputs_r>
 80121a8:	3001      	adds	r0, #1
 80121aa:	f000 80a9 	beq.w	8012300 <_vfiprintf_r+0x1f0>
 80121ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121b0:	445a      	add	r2, fp
 80121b2:	9209      	str	r2, [sp, #36]	; 0x24
 80121b4:	f89a 3000 	ldrb.w	r3, [sl]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f000 80a1 	beq.w	8012300 <_vfiprintf_r+0x1f0>
 80121be:	2300      	movs	r3, #0
 80121c0:	f04f 32ff 	mov.w	r2, #4294967295
 80121c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121c8:	f10a 0a01 	add.w	sl, sl, #1
 80121cc:	9304      	str	r3, [sp, #16]
 80121ce:	9307      	str	r3, [sp, #28]
 80121d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121d4:	931a      	str	r3, [sp, #104]	; 0x68
 80121d6:	4654      	mov	r4, sl
 80121d8:	2205      	movs	r2, #5
 80121da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121de:	4854      	ldr	r0, [pc, #336]	; (8012330 <_vfiprintf_r+0x220>)
 80121e0:	f7ed fff6 	bl	80001d0 <memchr>
 80121e4:	9a04      	ldr	r2, [sp, #16]
 80121e6:	b9d8      	cbnz	r0, 8012220 <_vfiprintf_r+0x110>
 80121e8:	06d1      	lsls	r1, r2, #27
 80121ea:	bf44      	itt	mi
 80121ec:	2320      	movmi	r3, #32
 80121ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121f2:	0713      	lsls	r3, r2, #28
 80121f4:	bf44      	itt	mi
 80121f6:	232b      	movmi	r3, #43	; 0x2b
 80121f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012200:	2b2a      	cmp	r3, #42	; 0x2a
 8012202:	d015      	beq.n	8012230 <_vfiprintf_r+0x120>
 8012204:	9a07      	ldr	r2, [sp, #28]
 8012206:	4654      	mov	r4, sl
 8012208:	2000      	movs	r0, #0
 801220a:	f04f 0c0a 	mov.w	ip, #10
 801220e:	4621      	mov	r1, r4
 8012210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012214:	3b30      	subs	r3, #48	; 0x30
 8012216:	2b09      	cmp	r3, #9
 8012218:	d94d      	bls.n	80122b6 <_vfiprintf_r+0x1a6>
 801221a:	b1b0      	cbz	r0, 801224a <_vfiprintf_r+0x13a>
 801221c:	9207      	str	r2, [sp, #28]
 801221e:	e014      	b.n	801224a <_vfiprintf_r+0x13a>
 8012220:	eba0 0308 	sub.w	r3, r0, r8
 8012224:	fa09 f303 	lsl.w	r3, r9, r3
 8012228:	4313      	orrs	r3, r2
 801222a:	9304      	str	r3, [sp, #16]
 801222c:	46a2      	mov	sl, r4
 801222e:	e7d2      	b.n	80121d6 <_vfiprintf_r+0xc6>
 8012230:	9b03      	ldr	r3, [sp, #12]
 8012232:	1d19      	adds	r1, r3, #4
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	9103      	str	r1, [sp, #12]
 8012238:	2b00      	cmp	r3, #0
 801223a:	bfbb      	ittet	lt
 801223c:	425b      	neglt	r3, r3
 801223e:	f042 0202 	orrlt.w	r2, r2, #2
 8012242:	9307      	strge	r3, [sp, #28]
 8012244:	9307      	strlt	r3, [sp, #28]
 8012246:	bfb8      	it	lt
 8012248:	9204      	strlt	r2, [sp, #16]
 801224a:	7823      	ldrb	r3, [r4, #0]
 801224c:	2b2e      	cmp	r3, #46	; 0x2e
 801224e:	d10c      	bne.n	801226a <_vfiprintf_r+0x15a>
 8012250:	7863      	ldrb	r3, [r4, #1]
 8012252:	2b2a      	cmp	r3, #42	; 0x2a
 8012254:	d134      	bne.n	80122c0 <_vfiprintf_r+0x1b0>
 8012256:	9b03      	ldr	r3, [sp, #12]
 8012258:	1d1a      	adds	r2, r3, #4
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	9203      	str	r2, [sp, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	bfb8      	it	lt
 8012262:	f04f 33ff 	movlt.w	r3, #4294967295
 8012266:	3402      	adds	r4, #2
 8012268:	9305      	str	r3, [sp, #20]
 801226a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012340 <_vfiprintf_r+0x230>
 801226e:	7821      	ldrb	r1, [r4, #0]
 8012270:	2203      	movs	r2, #3
 8012272:	4650      	mov	r0, sl
 8012274:	f7ed ffac 	bl	80001d0 <memchr>
 8012278:	b138      	cbz	r0, 801228a <_vfiprintf_r+0x17a>
 801227a:	9b04      	ldr	r3, [sp, #16]
 801227c:	eba0 000a 	sub.w	r0, r0, sl
 8012280:	2240      	movs	r2, #64	; 0x40
 8012282:	4082      	lsls	r2, r0
 8012284:	4313      	orrs	r3, r2
 8012286:	3401      	adds	r4, #1
 8012288:	9304      	str	r3, [sp, #16]
 801228a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801228e:	4829      	ldr	r0, [pc, #164]	; (8012334 <_vfiprintf_r+0x224>)
 8012290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012294:	2206      	movs	r2, #6
 8012296:	f7ed ff9b 	bl	80001d0 <memchr>
 801229a:	2800      	cmp	r0, #0
 801229c:	d03f      	beq.n	801231e <_vfiprintf_r+0x20e>
 801229e:	4b26      	ldr	r3, [pc, #152]	; (8012338 <_vfiprintf_r+0x228>)
 80122a0:	bb1b      	cbnz	r3, 80122ea <_vfiprintf_r+0x1da>
 80122a2:	9b03      	ldr	r3, [sp, #12]
 80122a4:	3307      	adds	r3, #7
 80122a6:	f023 0307 	bic.w	r3, r3, #7
 80122aa:	3308      	adds	r3, #8
 80122ac:	9303      	str	r3, [sp, #12]
 80122ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b0:	443b      	add	r3, r7
 80122b2:	9309      	str	r3, [sp, #36]	; 0x24
 80122b4:	e768      	b.n	8012188 <_vfiprintf_r+0x78>
 80122b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80122ba:	460c      	mov	r4, r1
 80122bc:	2001      	movs	r0, #1
 80122be:	e7a6      	b.n	801220e <_vfiprintf_r+0xfe>
 80122c0:	2300      	movs	r3, #0
 80122c2:	3401      	adds	r4, #1
 80122c4:	9305      	str	r3, [sp, #20]
 80122c6:	4619      	mov	r1, r3
 80122c8:	f04f 0c0a 	mov.w	ip, #10
 80122cc:	4620      	mov	r0, r4
 80122ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122d2:	3a30      	subs	r2, #48	; 0x30
 80122d4:	2a09      	cmp	r2, #9
 80122d6:	d903      	bls.n	80122e0 <_vfiprintf_r+0x1d0>
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d0c6      	beq.n	801226a <_vfiprintf_r+0x15a>
 80122dc:	9105      	str	r1, [sp, #20]
 80122de:	e7c4      	b.n	801226a <_vfiprintf_r+0x15a>
 80122e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80122e4:	4604      	mov	r4, r0
 80122e6:	2301      	movs	r3, #1
 80122e8:	e7f0      	b.n	80122cc <_vfiprintf_r+0x1bc>
 80122ea:	ab03      	add	r3, sp, #12
 80122ec:	9300      	str	r3, [sp, #0]
 80122ee:	462a      	mov	r2, r5
 80122f0:	4b12      	ldr	r3, [pc, #72]	; (801233c <_vfiprintf_r+0x22c>)
 80122f2:	a904      	add	r1, sp, #16
 80122f4:	4630      	mov	r0, r6
 80122f6:	f7fb fe4b 	bl	800df90 <_printf_float>
 80122fa:	4607      	mov	r7, r0
 80122fc:	1c78      	adds	r0, r7, #1
 80122fe:	d1d6      	bne.n	80122ae <_vfiprintf_r+0x19e>
 8012300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012302:	07d9      	lsls	r1, r3, #31
 8012304:	d405      	bmi.n	8012312 <_vfiprintf_r+0x202>
 8012306:	89ab      	ldrh	r3, [r5, #12]
 8012308:	059a      	lsls	r2, r3, #22
 801230a:	d402      	bmi.n	8012312 <_vfiprintf_r+0x202>
 801230c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801230e:	f7fc fdb9 	bl	800ee84 <__retarget_lock_release_recursive>
 8012312:	89ab      	ldrh	r3, [r5, #12]
 8012314:	065b      	lsls	r3, r3, #25
 8012316:	f53f af1d 	bmi.w	8012154 <_vfiprintf_r+0x44>
 801231a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801231c:	e71c      	b.n	8012158 <_vfiprintf_r+0x48>
 801231e:	ab03      	add	r3, sp, #12
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	462a      	mov	r2, r5
 8012324:	4b05      	ldr	r3, [pc, #20]	; (801233c <_vfiprintf_r+0x22c>)
 8012326:	a904      	add	r1, sp, #16
 8012328:	4630      	mov	r0, r6
 801232a:	f7fc f8d5 	bl	800e4d8 <_printf_i>
 801232e:	e7e4      	b.n	80122fa <_vfiprintf_r+0x1ea>
 8012330:	080141b1 	.word	0x080141b1
 8012334:	080141bb 	.word	0x080141bb
 8012338:	0800df91 	.word	0x0800df91
 801233c:	080120ed 	.word	0x080120ed
 8012340:	080141b7 	.word	0x080141b7

08012344 <__swbuf_r>:
 8012344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012346:	460e      	mov	r6, r1
 8012348:	4614      	mov	r4, r2
 801234a:	4605      	mov	r5, r0
 801234c:	b118      	cbz	r0, 8012356 <__swbuf_r+0x12>
 801234e:	6a03      	ldr	r3, [r0, #32]
 8012350:	b90b      	cbnz	r3, 8012356 <__swbuf_r+0x12>
 8012352:	f7fc fc7f 	bl	800ec54 <__sinit>
 8012356:	69a3      	ldr	r3, [r4, #24]
 8012358:	60a3      	str	r3, [r4, #8]
 801235a:	89a3      	ldrh	r3, [r4, #12]
 801235c:	071a      	lsls	r2, r3, #28
 801235e:	d525      	bpl.n	80123ac <__swbuf_r+0x68>
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	b31b      	cbz	r3, 80123ac <__swbuf_r+0x68>
 8012364:	6823      	ldr	r3, [r4, #0]
 8012366:	6922      	ldr	r2, [r4, #16]
 8012368:	1a98      	subs	r0, r3, r2
 801236a:	6963      	ldr	r3, [r4, #20]
 801236c:	b2f6      	uxtb	r6, r6
 801236e:	4283      	cmp	r3, r0
 8012370:	4637      	mov	r7, r6
 8012372:	dc04      	bgt.n	801237e <__swbuf_r+0x3a>
 8012374:	4621      	mov	r1, r4
 8012376:	4628      	mov	r0, r5
 8012378:	f7ff fa2a 	bl	80117d0 <_fflush_r>
 801237c:	b9e0      	cbnz	r0, 80123b8 <__swbuf_r+0x74>
 801237e:	68a3      	ldr	r3, [r4, #8]
 8012380:	3b01      	subs	r3, #1
 8012382:	60a3      	str	r3, [r4, #8]
 8012384:	6823      	ldr	r3, [r4, #0]
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	6022      	str	r2, [r4, #0]
 801238a:	701e      	strb	r6, [r3, #0]
 801238c:	6962      	ldr	r2, [r4, #20]
 801238e:	1c43      	adds	r3, r0, #1
 8012390:	429a      	cmp	r2, r3
 8012392:	d004      	beq.n	801239e <__swbuf_r+0x5a>
 8012394:	89a3      	ldrh	r3, [r4, #12]
 8012396:	07db      	lsls	r3, r3, #31
 8012398:	d506      	bpl.n	80123a8 <__swbuf_r+0x64>
 801239a:	2e0a      	cmp	r6, #10
 801239c:	d104      	bne.n	80123a8 <__swbuf_r+0x64>
 801239e:	4621      	mov	r1, r4
 80123a0:	4628      	mov	r0, r5
 80123a2:	f7ff fa15 	bl	80117d0 <_fflush_r>
 80123a6:	b938      	cbnz	r0, 80123b8 <__swbuf_r+0x74>
 80123a8:	4638      	mov	r0, r7
 80123aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123ac:	4621      	mov	r1, r4
 80123ae:	4628      	mov	r0, r5
 80123b0:	f000 f806 	bl	80123c0 <__swsetup_r>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d0d5      	beq.n	8012364 <__swbuf_r+0x20>
 80123b8:	f04f 37ff 	mov.w	r7, #4294967295
 80123bc:	e7f4      	b.n	80123a8 <__swbuf_r+0x64>
	...

080123c0 <__swsetup_r>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4b2a      	ldr	r3, [pc, #168]	; (801246c <__swsetup_r+0xac>)
 80123c4:	4605      	mov	r5, r0
 80123c6:	6818      	ldr	r0, [r3, #0]
 80123c8:	460c      	mov	r4, r1
 80123ca:	b118      	cbz	r0, 80123d4 <__swsetup_r+0x14>
 80123cc:	6a03      	ldr	r3, [r0, #32]
 80123ce:	b90b      	cbnz	r3, 80123d4 <__swsetup_r+0x14>
 80123d0:	f7fc fc40 	bl	800ec54 <__sinit>
 80123d4:	89a3      	ldrh	r3, [r4, #12]
 80123d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123da:	0718      	lsls	r0, r3, #28
 80123dc:	d422      	bmi.n	8012424 <__swsetup_r+0x64>
 80123de:	06d9      	lsls	r1, r3, #27
 80123e0:	d407      	bmi.n	80123f2 <__swsetup_r+0x32>
 80123e2:	2309      	movs	r3, #9
 80123e4:	602b      	str	r3, [r5, #0]
 80123e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80123ea:	81a3      	strh	r3, [r4, #12]
 80123ec:	f04f 30ff 	mov.w	r0, #4294967295
 80123f0:	e034      	b.n	801245c <__swsetup_r+0x9c>
 80123f2:	0758      	lsls	r0, r3, #29
 80123f4:	d512      	bpl.n	801241c <__swsetup_r+0x5c>
 80123f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123f8:	b141      	cbz	r1, 801240c <__swsetup_r+0x4c>
 80123fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123fe:	4299      	cmp	r1, r3
 8012400:	d002      	beq.n	8012408 <__swsetup_r+0x48>
 8012402:	4628      	mov	r0, r5
 8012404:	f7fd fbc2 	bl	800fb8c <_free_r>
 8012408:	2300      	movs	r3, #0
 801240a:	6363      	str	r3, [r4, #52]	; 0x34
 801240c:	89a3      	ldrh	r3, [r4, #12]
 801240e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012412:	81a3      	strh	r3, [r4, #12]
 8012414:	2300      	movs	r3, #0
 8012416:	6063      	str	r3, [r4, #4]
 8012418:	6923      	ldr	r3, [r4, #16]
 801241a:	6023      	str	r3, [r4, #0]
 801241c:	89a3      	ldrh	r3, [r4, #12]
 801241e:	f043 0308 	orr.w	r3, r3, #8
 8012422:	81a3      	strh	r3, [r4, #12]
 8012424:	6923      	ldr	r3, [r4, #16]
 8012426:	b94b      	cbnz	r3, 801243c <__swsetup_r+0x7c>
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801242e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012432:	d003      	beq.n	801243c <__swsetup_r+0x7c>
 8012434:	4621      	mov	r1, r4
 8012436:	4628      	mov	r0, r5
 8012438:	f000 f884 	bl	8012544 <__smakebuf_r>
 801243c:	89a0      	ldrh	r0, [r4, #12]
 801243e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012442:	f010 0301 	ands.w	r3, r0, #1
 8012446:	d00a      	beq.n	801245e <__swsetup_r+0x9e>
 8012448:	2300      	movs	r3, #0
 801244a:	60a3      	str	r3, [r4, #8]
 801244c:	6963      	ldr	r3, [r4, #20]
 801244e:	425b      	negs	r3, r3
 8012450:	61a3      	str	r3, [r4, #24]
 8012452:	6923      	ldr	r3, [r4, #16]
 8012454:	b943      	cbnz	r3, 8012468 <__swsetup_r+0xa8>
 8012456:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801245a:	d1c4      	bne.n	80123e6 <__swsetup_r+0x26>
 801245c:	bd38      	pop	{r3, r4, r5, pc}
 801245e:	0781      	lsls	r1, r0, #30
 8012460:	bf58      	it	pl
 8012462:	6963      	ldrpl	r3, [r4, #20]
 8012464:	60a3      	str	r3, [r4, #8]
 8012466:	e7f4      	b.n	8012452 <__swsetup_r+0x92>
 8012468:	2000      	movs	r0, #0
 801246a:	e7f7      	b.n	801245c <__swsetup_r+0x9c>
 801246c:	200001f4 	.word	0x200001f4

08012470 <_raise_r>:
 8012470:	291f      	cmp	r1, #31
 8012472:	b538      	push	{r3, r4, r5, lr}
 8012474:	4604      	mov	r4, r0
 8012476:	460d      	mov	r5, r1
 8012478:	d904      	bls.n	8012484 <_raise_r+0x14>
 801247a:	2316      	movs	r3, #22
 801247c:	6003      	str	r3, [r0, #0]
 801247e:	f04f 30ff 	mov.w	r0, #4294967295
 8012482:	bd38      	pop	{r3, r4, r5, pc}
 8012484:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012486:	b112      	cbz	r2, 801248e <_raise_r+0x1e>
 8012488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801248c:	b94b      	cbnz	r3, 80124a2 <_raise_r+0x32>
 801248e:	4620      	mov	r0, r4
 8012490:	f000 f830 	bl	80124f4 <_getpid_r>
 8012494:	462a      	mov	r2, r5
 8012496:	4601      	mov	r1, r0
 8012498:	4620      	mov	r0, r4
 801249a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801249e:	f000 b817 	b.w	80124d0 <_kill_r>
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d00a      	beq.n	80124bc <_raise_r+0x4c>
 80124a6:	1c59      	adds	r1, r3, #1
 80124a8:	d103      	bne.n	80124b2 <_raise_r+0x42>
 80124aa:	2316      	movs	r3, #22
 80124ac:	6003      	str	r3, [r0, #0]
 80124ae:	2001      	movs	r0, #1
 80124b0:	e7e7      	b.n	8012482 <_raise_r+0x12>
 80124b2:	2400      	movs	r4, #0
 80124b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124b8:	4628      	mov	r0, r5
 80124ba:	4798      	blx	r3
 80124bc:	2000      	movs	r0, #0
 80124be:	e7e0      	b.n	8012482 <_raise_r+0x12>

080124c0 <raise>:
 80124c0:	4b02      	ldr	r3, [pc, #8]	; (80124cc <raise+0xc>)
 80124c2:	4601      	mov	r1, r0
 80124c4:	6818      	ldr	r0, [r3, #0]
 80124c6:	f7ff bfd3 	b.w	8012470 <_raise_r>
 80124ca:	bf00      	nop
 80124cc:	200001f4 	.word	0x200001f4

080124d0 <_kill_r>:
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	4d07      	ldr	r5, [pc, #28]	; (80124f0 <_kill_r+0x20>)
 80124d4:	2300      	movs	r3, #0
 80124d6:	4604      	mov	r4, r0
 80124d8:	4608      	mov	r0, r1
 80124da:	4611      	mov	r1, r2
 80124dc:	602b      	str	r3, [r5, #0]
 80124de:	f7f0 fff5 	bl	80034cc <_kill>
 80124e2:	1c43      	adds	r3, r0, #1
 80124e4:	d102      	bne.n	80124ec <_kill_r+0x1c>
 80124e6:	682b      	ldr	r3, [r5, #0]
 80124e8:	b103      	cbz	r3, 80124ec <_kill_r+0x1c>
 80124ea:	6023      	str	r3, [r4, #0]
 80124ec:	bd38      	pop	{r3, r4, r5, pc}
 80124ee:	bf00      	nop
 80124f0:	20002350 	.word	0x20002350

080124f4 <_getpid_r>:
 80124f4:	f7f0 bfe2 	b.w	80034bc <_getpid>

080124f8 <__swhatbuf_r>:
 80124f8:	b570      	push	{r4, r5, r6, lr}
 80124fa:	460c      	mov	r4, r1
 80124fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012500:	2900      	cmp	r1, #0
 8012502:	b096      	sub	sp, #88	; 0x58
 8012504:	4615      	mov	r5, r2
 8012506:	461e      	mov	r6, r3
 8012508:	da0d      	bge.n	8012526 <__swhatbuf_r+0x2e>
 801250a:	89a3      	ldrh	r3, [r4, #12]
 801250c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012510:	f04f 0100 	mov.w	r1, #0
 8012514:	bf0c      	ite	eq
 8012516:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801251a:	2340      	movne	r3, #64	; 0x40
 801251c:	2000      	movs	r0, #0
 801251e:	6031      	str	r1, [r6, #0]
 8012520:	602b      	str	r3, [r5, #0]
 8012522:	b016      	add	sp, #88	; 0x58
 8012524:	bd70      	pop	{r4, r5, r6, pc}
 8012526:	466a      	mov	r2, sp
 8012528:	f000 f848 	bl	80125bc <_fstat_r>
 801252c:	2800      	cmp	r0, #0
 801252e:	dbec      	blt.n	801250a <__swhatbuf_r+0x12>
 8012530:	9901      	ldr	r1, [sp, #4]
 8012532:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012536:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801253a:	4259      	negs	r1, r3
 801253c:	4159      	adcs	r1, r3
 801253e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012542:	e7eb      	b.n	801251c <__swhatbuf_r+0x24>

08012544 <__smakebuf_r>:
 8012544:	898b      	ldrh	r3, [r1, #12]
 8012546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012548:	079d      	lsls	r5, r3, #30
 801254a:	4606      	mov	r6, r0
 801254c:	460c      	mov	r4, r1
 801254e:	d507      	bpl.n	8012560 <__smakebuf_r+0x1c>
 8012550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012554:	6023      	str	r3, [r4, #0]
 8012556:	6123      	str	r3, [r4, #16]
 8012558:	2301      	movs	r3, #1
 801255a:	6163      	str	r3, [r4, #20]
 801255c:	b002      	add	sp, #8
 801255e:	bd70      	pop	{r4, r5, r6, pc}
 8012560:	ab01      	add	r3, sp, #4
 8012562:	466a      	mov	r2, sp
 8012564:	f7ff ffc8 	bl	80124f8 <__swhatbuf_r>
 8012568:	9900      	ldr	r1, [sp, #0]
 801256a:	4605      	mov	r5, r0
 801256c:	4630      	mov	r0, r6
 801256e:	f7fd fb81 	bl	800fc74 <_malloc_r>
 8012572:	b948      	cbnz	r0, 8012588 <__smakebuf_r+0x44>
 8012574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012578:	059a      	lsls	r2, r3, #22
 801257a:	d4ef      	bmi.n	801255c <__smakebuf_r+0x18>
 801257c:	f023 0303 	bic.w	r3, r3, #3
 8012580:	f043 0302 	orr.w	r3, r3, #2
 8012584:	81a3      	strh	r3, [r4, #12]
 8012586:	e7e3      	b.n	8012550 <__smakebuf_r+0xc>
 8012588:	89a3      	ldrh	r3, [r4, #12]
 801258a:	6020      	str	r0, [r4, #0]
 801258c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012590:	81a3      	strh	r3, [r4, #12]
 8012592:	9b00      	ldr	r3, [sp, #0]
 8012594:	6163      	str	r3, [r4, #20]
 8012596:	9b01      	ldr	r3, [sp, #4]
 8012598:	6120      	str	r0, [r4, #16]
 801259a:	b15b      	cbz	r3, 80125b4 <__smakebuf_r+0x70>
 801259c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125a0:	4630      	mov	r0, r6
 80125a2:	f000 f81d 	bl	80125e0 <_isatty_r>
 80125a6:	b128      	cbz	r0, 80125b4 <__smakebuf_r+0x70>
 80125a8:	89a3      	ldrh	r3, [r4, #12]
 80125aa:	f023 0303 	bic.w	r3, r3, #3
 80125ae:	f043 0301 	orr.w	r3, r3, #1
 80125b2:	81a3      	strh	r3, [r4, #12]
 80125b4:	89a3      	ldrh	r3, [r4, #12]
 80125b6:	431d      	orrs	r5, r3
 80125b8:	81a5      	strh	r5, [r4, #12]
 80125ba:	e7cf      	b.n	801255c <__smakebuf_r+0x18>

080125bc <_fstat_r>:
 80125bc:	b538      	push	{r3, r4, r5, lr}
 80125be:	4d07      	ldr	r5, [pc, #28]	; (80125dc <_fstat_r+0x20>)
 80125c0:	2300      	movs	r3, #0
 80125c2:	4604      	mov	r4, r0
 80125c4:	4608      	mov	r0, r1
 80125c6:	4611      	mov	r1, r2
 80125c8:	602b      	str	r3, [r5, #0]
 80125ca:	f7f0 ffde 	bl	800358a <_fstat>
 80125ce:	1c43      	adds	r3, r0, #1
 80125d0:	d102      	bne.n	80125d8 <_fstat_r+0x1c>
 80125d2:	682b      	ldr	r3, [r5, #0]
 80125d4:	b103      	cbz	r3, 80125d8 <_fstat_r+0x1c>
 80125d6:	6023      	str	r3, [r4, #0]
 80125d8:	bd38      	pop	{r3, r4, r5, pc}
 80125da:	bf00      	nop
 80125dc:	20002350 	.word	0x20002350

080125e0 <_isatty_r>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	4d06      	ldr	r5, [pc, #24]	; (80125fc <_isatty_r+0x1c>)
 80125e4:	2300      	movs	r3, #0
 80125e6:	4604      	mov	r4, r0
 80125e8:	4608      	mov	r0, r1
 80125ea:	602b      	str	r3, [r5, #0]
 80125ec:	f7f0 ffdd 	bl	80035aa <_isatty>
 80125f0:	1c43      	adds	r3, r0, #1
 80125f2:	d102      	bne.n	80125fa <_isatty_r+0x1a>
 80125f4:	682b      	ldr	r3, [r5, #0]
 80125f6:	b103      	cbz	r3, 80125fa <_isatty_r+0x1a>
 80125f8:	6023      	str	r3, [r4, #0]
 80125fa:	bd38      	pop	{r3, r4, r5, pc}
 80125fc:	20002350 	.word	0x20002350

08012600 <asin>:
 8012600:	b538      	push	{r3, r4, r5, lr}
 8012602:	ed2d 8b02 	vpush	{d8}
 8012606:	ec55 4b10 	vmov	r4, r5, d0
 801260a:	f000 fb21 	bl	8012c50 <__ieee754_asin>
 801260e:	4622      	mov	r2, r4
 8012610:	462b      	mov	r3, r5
 8012612:	4620      	mov	r0, r4
 8012614:	4629      	mov	r1, r5
 8012616:	eeb0 8a40 	vmov.f32	s16, s0
 801261a:	eef0 8a60 	vmov.f32	s17, s1
 801261e:	f7ee fa85 	bl	8000b2c <__aeabi_dcmpun>
 8012622:	b9a8      	cbnz	r0, 8012650 <asin+0x50>
 8012624:	ec45 4b10 	vmov	d0, r4, r5
 8012628:	f000 f84a 	bl	80126c0 <fabs>
 801262c:	4b0c      	ldr	r3, [pc, #48]	; (8012660 <asin+0x60>)
 801262e:	ec51 0b10 	vmov	r0, r1, d0
 8012632:	2200      	movs	r2, #0
 8012634:	f7ee fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8012638:	b150      	cbz	r0, 8012650 <asin+0x50>
 801263a:	f7fc fbf7 	bl	800ee2c <__errno>
 801263e:	ecbd 8b02 	vpop	{d8}
 8012642:	2321      	movs	r3, #33	; 0x21
 8012644:	6003      	str	r3, [r0, #0]
 8012646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801264a:	4806      	ldr	r0, [pc, #24]	; (8012664 <asin+0x64>)
 801264c:	f7ff b934 	b.w	80118b8 <nan>
 8012650:	eeb0 0a48 	vmov.f32	s0, s16
 8012654:	eef0 0a68 	vmov.f32	s1, s17
 8012658:	ecbd 8b02 	vpop	{d8}
 801265c:	bd38      	pop	{r3, r4, r5, pc}
 801265e:	bf00      	nop
 8012660:	3ff00000 	.word	0x3ff00000
 8012664:	08014205 	.word	0x08014205

08012668 <sqrt>:
 8012668:	b538      	push	{r3, r4, r5, lr}
 801266a:	ed2d 8b02 	vpush	{d8}
 801266e:	ec55 4b10 	vmov	r4, r5, d0
 8012672:	f000 f889 	bl	8012788 <__ieee754_sqrt>
 8012676:	4622      	mov	r2, r4
 8012678:	462b      	mov	r3, r5
 801267a:	4620      	mov	r0, r4
 801267c:	4629      	mov	r1, r5
 801267e:	eeb0 8a40 	vmov.f32	s16, s0
 8012682:	eef0 8a60 	vmov.f32	s17, s1
 8012686:	f7ee fa51 	bl	8000b2c <__aeabi_dcmpun>
 801268a:	b990      	cbnz	r0, 80126b2 <sqrt+0x4a>
 801268c:	2200      	movs	r2, #0
 801268e:	2300      	movs	r3, #0
 8012690:	4620      	mov	r0, r4
 8012692:	4629      	mov	r1, r5
 8012694:	f7ee fa22 	bl	8000adc <__aeabi_dcmplt>
 8012698:	b158      	cbz	r0, 80126b2 <sqrt+0x4a>
 801269a:	f7fc fbc7 	bl	800ee2c <__errno>
 801269e:	2321      	movs	r3, #33	; 0x21
 80126a0:	6003      	str	r3, [r0, #0]
 80126a2:	2200      	movs	r2, #0
 80126a4:	2300      	movs	r3, #0
 80126a6:	4610      	mov	r0, r2
 80126a8:	4619      	mov	r1, r3
 80126aa:	f7ee f8cf 	bl	800084c <__aeabi_ddiv>
 80126ae:	ec41 0b18 	vmov	d8, r0, r1
 80126b2:	eeb0 0a48 	vmov.f32	s0, s16
 80126b6:	eef0 0a68 	vmov.f32	s1, s17
 80126ba:	ecbd 8b02 	vpop	{d8}
 80126be:	bd38      	pop	{r3, r4, r5, pc}

080126c0 <fabs>:
 80126c0:	ec51 0b10 	vmov	r0, r1, d0
 80126c4:	ee10 2a10 	vmov	r2, s0
 80126c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80126cc:	ec43 2b10 	vmov	d0, r2, r3
 80126d0:	4770      	bx	lr
 80126d2:	0000      	movs	r0, r0
 80126d4:	0000      	movs	r0, r0
	...

080126d8 <sin>:
 80126d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126da:	ec53 2b10 	vmov	r2, r3, d0
 80126de:	4828      	ldr	r0, [pc, #160]	; (8012780 <sin+0xa8>)
 80126e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80126e4:	4281      	cmp	r1, r0
 80126e6:	dc07      	bgt.n	80126f8 <sin+0x20>
 80126e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012778 <sin+0xa0>
 80126ec:	2000      	movs	r0, #0
 80126ee:	b005      	add	sp, #20
 80126f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80126f4:	f000 b9ec 	b.w	8012ad0 <__kernel_sin>
 80126f8:	4822      	ldr	r0, [pc, #136]	; (8012784 <sin+0xac>)
 80126fa:	4281      	cmp	r1, r0
 80126fc:	dd09      	ble.n	8012712 <sin+0x3a>
 80126fe:	ee10 0a10 	vmov	r0, s0
 8012702:	4619      	mov	r1, r3
 8012704:	f7ed fdc0 	bl	8000288 <__aeabi_dsub>
 8012708:	ec41 0b10 	vmov	d0, r0, r1
 801270c:	b005      	add	sp, #20
 801270e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012712:	4668      	mov	r0, sp
 8012714:	f000 fcb0 	bl	8013078 <__ieee754_rem_pio2>
 8012718:	f000 0003 	and.w	r0, r0, #3
 801271c:	2801      	cmp	r0, #1
 801271e:	d00c      	beq.n	801273a <sin+0x62>
 8012720:	2802      	cmp	r0, #2
 8012722:	d011      	beq.n	8012748 <sin+0x70>
 8012724:	b9f0      	cbnz	r0, 8012764 <sin+0x8c>
 8012726:	ed9d 1b02 	vldr	d1, [sp, #8]
 801272a:	ed9d 0b00 	vldr	d0, [sp]
 801272e:	2001      	movs	r0, #1
 8012730:	f000 f9ce 	bl	8012ad0 <__kernel_sin>
 8012734:	ec51 0b10 	vmov	r0, r1, d0
 8012738:	e7e6      	b.n	8012708 <sin+0x30>
 801273a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801273e:	ed9d 0b00 	vldr	d0, [sp]
 8012742:	f000 f8fd 	bl	8012940 <__kernel_cos>
 8012746:	e7f5      	b.n	8012734 <sin+0x5c>
 8012748:	ed9d 1b02 	vldr	d1, [sp, #8]
 801274c:	ed9d 0b00 	vldr	d0, [sp]
 8012750:	2001      	movs	r0, #1
 8012752:	f000 f9bd 	bl	8012ad0 <__kernel_sin>
 8012756:	ec53 2b10 	vmov	r2, r3, d0
 801275a:	ee10 0a10 	vmov	r0, s0
 801275e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012762:	e7d1      	b.n	8012708 <sin+0x30>
 8012764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012768:	ed9d 0b00 	vldr	d0, [sp]
 801276c:	f000 f8e8 	bl	8012940 <__kernel_cos>
 8012770:	e7f1      	b.n	8012756 <sin+0x7e>
 8012772:	bf00      	nop
 8012774:	f3af 8000 	nop.w
	...
 8012780:	3fe921fb 	.word	0x3fe921fb
 8012784:	7fefffff 	.word	0x7fefffff

08012788 <__ieee754_sqrt>:
 8012788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278c:	ec55 4b10 	vmov	r4, r5, d0
 8012790:	4e67      	ldr	r6, [pc, #412]	; (8012930 <__ieee754_sqrt+0x1a8>)
 8012792:	43ae      	bics	r6, r5
 8012794:	ee10 0a10 	vmov	r0, s0
 8012798:	ee10 2a10 	vmov	r2, s0
 801279c:	4629      	mov	r1, r5
 801279e:	462b      	mov	r3, r5
 80127a0:	d10d      	bne.n	80127be <__ieee754_sqrt+0x36>
 80127a2:	f7ed ff29 	bl	80005f8 <__aeabi_dmul>
 80127a6:	4602      	mov	r2, r0
 80127a8:	460b      	mov	r3, r1
 80127aa:	4620      	mov	r0, r4
 80127ac:	4629      	mov	r1, r5
 80127ae:	f7ed fd6d 	bl	800028c <__adddf3>
 80127b2:	4604      	mov	r4, r0
 80127b4:	460d      	mov	r5, r1
 80127b6:	ec45 4b10 	vmov	d0, r4, r5
 80127ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127be:	2d00      	cmp	r5, #0
 80127c0:	dc0b      	bgt.n	80127da <__ieee754_sqrt+0x52>
 80127c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80127c6:	4326      	orrs	r6, r4
 80127c8:	d0f5      	beq.n	80127b6 <__ieee754_sqrt+0x2e>
 80127ca:	b135      	cbz	r5, 80127da <__ieee754_sqrt+0x52>
 80127cc:	f7ed fd5c 	bl	8000288 <__aeabi_dsub>
 80127d0:	4602      	mov	r2, r0
 80127d2:	460b      	mov	r3, r1
 80127d4:	f7ee f83a 	bl	800084c <__aeabi_ddiv>
 80127d8:	e7eb      	b.n	80127b2 <__ieee754_sqrt+0x2a>
 80127da:	1509      	asrs	r1, r1, #20
 80127dc:	f000 808d 	beq.w	80128fa <__ieee754_sqrt+0x172>
 80127e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127e4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80127e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127ec:	07c9      	lsls	r1, r1, #31
 80127ee:	bf5c      	itt	pl
 80127f0:	005b      	lslpl	r3, r3, #1
 80127f2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80127f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80127fa:	bf58      	it	pl
 80127fc:	0052      	lslpl	r2, r2, #1
 80127fe:	2500      	movs	r5, #0
 8012800:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012804:	1076      	asrs	r6, r6, #1
 8012806:	0052      	lsls	r2, r2, #1
 8012808:	f04f 0e16 	mov.w	lr, #22
 801280c:	46ac      	mov	ip, r5
 801280e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012812:	eb0c 0001 	add.w	r0, ip, r1
 8012816:	4298      	cmp	r0, r3
 8012818:	bfde      	ittt	le
 801281a:	1a1b      	suble	r3, r3, r0
 801281c:	eb00 0c01 	addle.w	ip, r0, r1
 8012820:	186d      	addle	r5, r5, r1
 8012822:	005b      	lsls	r3, r3, #1
 8012824:	f1be 0e01 	subs.w	lr, lr, #1
 8012828:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801282c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012830:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012834:	d1ed      	bne.n	8012812 <__ieee754_sqrt+0x8a>
 8012836:	4674      	mov	r4, lr
 8012838:	2720      	movs	r7, #32
 801283a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801283e:	4563      	cmp	r3, ip
 8012840:	eb01 000e 	add.w	r0, r1, lr
 8012844:	dc02      	bgt.n	801284c <__ieee754_sqrt+0xc4>
 8012846:	d113      	bne.n	8012870 <__ieee754_sqrt+0xe8>
 8012848:	4290      	cmp	r0, r2
 801284a:	d811      	bhi.n	8012870 <__ieee754_sqrt+0xe8>
 801284c:	2800      	cmp	r0, #0
 801284e:	eb00 0e01 	add.w	lr, r0, r1
 8012852:	da57      	bge.n	8012904 <__ieee754_sqrt+0x17c>
 8012854:	f1be 0f00 	cmp.w	lr, #0
 8012858:	db54      	blt.n	8012904 <__ieee754_sqrt+0x17c>
 801285a:	f10c 0801 	add.w	r8, ip, #1
 801285e:	eba3 030c 	sub.w	r3, r3, ip
 8012862:	4290      	cmp	r0, r2
 8012864:	bf88      	it	hi
 8012866:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801286a:	1a12      	subs	r2, r2, r0
 801286c:	440c      	add	r4, r1
 801286e:	46c4      	mov	ip, r8
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	3f01      	subs	r7, #1
 8012874:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012878:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801287c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012880:	d1dd      	bne.n	801283e <__ieee754_sqrt+0xb6>
 8012882:	4313      	orrs	r3, r2
 8012884:	d01b      	beq.n	80128be <__ieee754_sqrt+0x136>
 8012886:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012934 <__ieee754_sqrt+0x1ac>
 801288a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012938 <__ieee754_sqrt+0x1b0>
 801288e:	e9da 0100 	ldrd	r0, r1, [sl]
 8012892:	e9db 2300 	ldrd	r2, r3, [fp]
 8012896:	f7ed fcf7 	bl	8000288 <__aeabi_dsub>
 801289a:	e9da 8900 	ldrd	r8, r9, [sl]
 801289e:	4602      	mov	r2, r0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4640      	mov	r0, r8
 80128a4:	4649      	mov	r1, r9
 80128a6:	f7ee f923 	bl	8000af0 <__aeabi_dcmple>
 80128aa:	b140      	cbz	r0, 80128be <__ieee754_sqrt+0x136>
 80128ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80128b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80128b4:	e9db 2300 	ldrd	r2, r3, [fp]
 80128b8:	d126      	bne.n	8012908 <__ieee754_sqrt+0x180>
 80128ba:	3501      	adds	r5, #1
 80128bc:	463c      	mov	r4, r7
 80128be:	106a      	asrs	r2, r5, #1
 80128c0:	0863      	lsrs	r3, r4, #1
 80128c2:	07e9      	lsls	r1, r5, #31
 80128c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80128c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80128cc:	bf48      	it	mi
 80128ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80128d2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80128d6:	461c      	mov	r4, r3
 80128d8:	e76d      	b.n	80127b6 <__ieee754_sqrt+0x2e>
 80128da:	0ad3      	lsrs	r3, r2, #11
 80128dc:	3815      	subs	r0, #21
 80128de:	0552      	lsls	r2, r2, #21
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d0fa      	beq.n	80128da <__ieee754_sqrt+0x152>
 80128e4:	02dc      	lsls	r4, r3, #11
 80128e6:	d50a      	bpl.n	80128fe <__ieee754_sqrt+0x176>
 80128e8:	f1c1 0420 	rsb	r4, r1, #32
 80128ec:	fa22 f404 	lsr.w	r4, r2, r4
 80128f0:	1e4d      	subs	r5, r1, #1
 80128f2:	408a      	lsls	r2, r1
 80128f4:	4323      	orrs	r3, r4
 80128f6:	1b41      	subs	r1, r0, r5
 80128f8:	e772      	b.n	80127e0 <__ieee754_sqrt+0x58>
 80128fa:	4608      	mov	r0, r1
 80128fc:	e7f0      	b.n	80128e0 <__ieee754_sqrt+0x158>
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	3101      	adds	r1, #1
 8012902:	e7ef      	b.n	80128e4 <__ieee754_sqrt+0x15c>
 8012904:	46e0      	mov	r8, ip
 8012906:	e7aa      	b.n	801285e <__ieee754_sqrt+0xd6>
 8012908:	f7ed fcc0 	bl	800028c <__adddf3>
 801290c:	e9da 8900 	ldrd	r8, r9, [sl]
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	4640      	mov	r0, r8
 8012916:	4649      	mov	r1, r9
 8012918:	f7ee f8e0 	bl	8000adc <__aeabi_dcmplt>
 801291c:	b120      	cbz	r0, 8012928 <__ieee754_sqrt+0x1a0>
 801291e:	1ca0      	adds	r0, r4, #2
 8012920:	bf08      	it	eq
 8012922:	3501      	addeq	r5, #1
 8012924:	3402      	adds	r4, #2
 8012926:	e7ca      	b.n	80128be <__ieee754_sqrt+0x136>
 8012928:	3401      	adds	r4, #1
 801292a:	f024 0401 	bic.w	r4, r4, #1
 801292e:	e7c6      	b.n	80128be <__ieee754_sqrt+0x136>
 8012930:	7ff00000 	.word	0x7ff00000
 8012934:	20000368 	.word	0x20000368
 8012938:	20000370 	.word	0x20000370
 801293c:	00000000 	.word	0x00000000

08012940 <__kernel_cos>:
 8012940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	ec57 6b10 	vmov	r6, r7, d0
 8012948:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801294c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012950:	ed8d 1b00 	vstr	d1, [sp]
 8012954:	da07      	bge.n	8012966 <__kernel_cos+0x26>
 8012956:	ee10 0a10 	vmov	r0, s0
 801295a:	4639      	mov	r1, r7
 801295c:	f7ee f8fc 	bl	8000b58 <__aeabi_d2iz>
 8012960:	2800      	cmp	r0, #0
 8012962:	f000 8088 	beq.w	8012a76 <__kernel_cos+0x136>
 8012966:	4632      	mov	r2, r6
 8012968:	463b      	mov	r3, r7
 801296a:	4630      	mov	r0, r6
 801296c:	4639      	mov	r1, r7
 801296e:	f7ed fe43 	bl	80005f8 <__aeabi_dmul>
 8012972:	4b51      	ldr	r3, [pc, #324]	; (8012ab8 <__kernel_cos+0x178>)
 8012974:	2200      	movs	r2, #0
 8012976:	4604      	mov	r4, r0
 8012978:	460d      	mov	r5, r1
 801297a:	f7ed fe3d 	bl	80005f8 <__aeabi_dmul>
 801297e:	a340      	add	r3, pc, #256	; (adr r3, 8012a80 <__kernel_cos+0x140>)
 8012980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012984:	4682      	mov	sl, r0
 8012986:	468b      	mov	fp, r1
 8012988:	4620      	mov	r0, r4
 801298a:	4629      	mov	r1, r5
 801298c:	f7ed fe34 	bl	80005f8 <__aeabi_dmul>
 8012990:	a33d      	add	r3, pc, #244	; (adr r3, 8012a88 <__kernel_cos+0x148>)
 8012992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012996:	f7ed fc79 	bl	800028c <__adddf3>
 801299a:	4622      	mov	r2, r4
 801299c:	462b      	mov	r3, r5
 801299e:	f7ed fe2b 	bl	80005f8 <__aeabi_dmul>
 80129a2:	a33b      	add	r3, pc, #236	; (adr r3, 8012a90 <__kernel_cos+0x150>)
 80129a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a8:	f7ed fc6e 	bl	8000288 <__aeabi_dsub>
 80129ac:	4622      	mov	r2, r4
 80129ae:	462b      	mov	r3, r5
 80129b0:	f7ed fe22 	bl	80005f8 <__aeabi_dmul>
 80129b4:	a338      	add	r3, pc, #224	; (adr r3, 8012a98 <__kernel_cos+0x158>)
 80129b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ba:	f7ed fc67 	bl	800028c <__adddf3>
 80129be:	4622      	mov	r2, r4
 80129c0:	462b      	mov	r3, r5
 80129c2:	f7ed fe19 	bl	80005f8 <__aeabi_dmul>
 80129c6:	a336      	add	r3, pc, #216	; (adr r3, 8012aa0 <__kernel_cos+0x160>)
 80129c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129cc:	f7ed fc5c 	bl	8000288 <__aeabi_dsub>
 80129d0:	4622      	mov	r2, r4
 80129d2:	462b      	mov	r3, r5
 80129d4:	f7ed fe10 	bl	80005f8 <__aeabi_dmul>
 80129d8:	a333      	add	r3, pc, #204	; (adr r3, 8012aa8 <__kernel_cos+0x168>)
 80129da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129de:	f7ed fc55 	bl	800028c <__adddf3>
 80129e2:	4622      	mov	r2, r4
 80129e4:	462b      	mov	r3, r5
 80129e6:	f7ed fe07 	bl	80005f8 <__aeabi_dmul>
 80129ea:	4622      	mov	r2, r4
 80129ec:	462b      	mov	r3, r5
 80129ee:	f7ed fe03 	bl	80005f8 <__aeabi_dmul>
 80129f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129f6:	4604      	mov	r4, r0
 80129f8:	460d      	mov	r5, r1
 80129fa:	4630      	mov	r0, r6
 80129fc:	4639      	mov	r1, r7
 80129fe:	f7ed fdfb 	bl	80005f8 <__aeabi_dmul>
 8012a02:	460b      	mov	r3, r1
 8012a04:	4602      	mov	r2, r0
 8012a06:	4629      	mov	r1, r5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7ed fc3d 	bl	8000288 <__aeabi_dsub>
 8012a0e:	4b2b      	ldr	r3, [pc, #172]	; (8012abc <__kernel_cos+0x17c>)
 8012a10:	4598      	cmp	r8, r3
 8012a12:	4606      	mov	r6, r0
 8012a14:	460f      	mov	r7, r1
 8012a16:	dc10      	bgt.n	8012a3a <__kernel_cos+0xfa>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	4650      	mov	r0, sl
 8012a1e:	4659      	mov	r1, fp
 8012a20:	f7ed fc32 	bl	8000288 <__aeabi_dsub>
 8012a24:	460b      	mov	r3, r1
 8012a26:	4926      	ldr	r1, [pc, #152]	; (8012ac0 <__kernel_cos+0x180>)
 8012a28:	4602      	mov	r2, r0
 8012a2a:	2000      	movs	r0, #0
 8012a2c:	f7ed fc2c 	bl	8000288 <__aeabi_dsub>
 8012a30:	ec41 0b10 	vmov	d0, r0, r1
 8012a34:	b003      	add	sp, #12
 8012a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a3a:	4b22      	ldr	r3, [pc, #136]	; (8012ac4 <__kernel_cos+0x184>)
 8012a3c:	4920      	ldr	r1, [pc, #128]	; (8012ac0 <__kernel_cos+0x180>)
 8012a3e:	4598      	cmp	r8, r3
 8012a40:	bfcc      	ite	gt
 8012a42:	4d21      	ldrgt	r5, [pc, #132]	; (8012ac8 <__kernel_cos+0x188>)
 8012a44:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012a48:	2400      	movs	r4, #0
 8012a4a:	4622      	mov	r2, r4
 8012a4c:	462b      	mov	r3, r5
 8012a4e:	2000      	movs	r0, #0
 8012a50:	f7ed fc1a 	bl	8000288 <__aeabi_dsub>
 8012a54:	4622      	mov	r2, r4
 8012a56:	4680      	mov	r8, r0
 8012a58:	4689      	mov	r9, r1
 8012a5a:	462b      	mov	r3, r5
 8012a5c:	4650      	mov	r0, sl
 8012a5e:	4659      	mov	r1, fp
 8012a60:	f7ed fc12 	bl	8000288 <__aeabi_dsub>
 8012a64:	4632      	mov	r2, r6
 8012a66:	463b      	mov	r3, r7
 8012a68:	f7ed fc0e 	bl	8000288 <__aeabi_dsub>
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	4640      	mov	r0, r8
 8012a72:	4649      	mov	r1, r9
 8012a74:	e7da      	b.n	8012a2c <__kernel_cos+0xec>
 8012a76:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012ab0 <__kernel_cos+0x170>
 8012a7a:	e7db      	b.n	8012a34 <__kernel_cos+0xf4>
 8012a7c:	f3af 8000 	nop.w
 8012a80:	be8838d4 	.word	0xbe8838d4
 8012a84:	bda8fae9 	.word	0xbda8fae9
 8012a88:	bdb4b1c4 	.word	0xbdb4b1c4
 8012a8c:	3e21ee9e 	.word	0x3e21ee9e
 8012a90:	809c52ad 	.word	0x809c52ad
 8012a94:	3e927e4f 	.word	0x3e927e4f
 8012a98:	19cb1590 	.word	0x19cb1590
 8012a9c:	3efa01a0 	.word	0x3efa01a0
 8012aa0:	16c15177 	.word	0x16c15177
 8012aa4:	3f56c16c 	.word	0x3f56c16c
 8012aa8:	5555554c 	.word	0x5555554c
 8012aac:	3fa55555 	.word	0x3fa55555
 8012ab0:	00000000 	.word	0x00000000
 8012ab4:	3ff00000 	.word	0x3ff00000
 8012ab8:	3fe00000 	.word	0x3fe00000
 8012abc:	3fd33332 	.word	0x3fd33332
 8012ac0:	3ff00000 	.word	0x3ff00000
 8012ac4:	3fe90000 	.word	0x3fe90000
 8012ac8:	3fd20000 	.word	0x3fd20000
 8012acc:	00000000 	.word	0x00000000

08012ad0 <__kernel_sin>:
 8012ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	ed2d 8b04 	vpush	{d8-d9}
 8012ad8:	eeb0 8a41 	vmov.f32	s16, s2
 8012adc:	eef0 8a61 	vmov.f32	s17, s3
 8012ae0:	ec55 4b10 	vmov	r4, r5, d0
 8012ae4:	b083      	sub	sp, #12
 8012ae6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012aea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012aee:	9001      	str	r0, [sp, #4]
 8012af0:	da06      	bge.n	8012b00 <__kernel_sin+0x30>
 8012af2:	ee10 0a10 	vmov	r0, s0
 8012af6:	4629      	mov	r1, r5
 8012af8:	f7ee f82e 	bl	8000b58 <__aeabi_d2iz>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d051      	beq.n	8012ba4 <__kernel_sin+0xd4>
 8012b00:	4622      	mov	r2, r4
 8012b02:	462b      	mov	r3, r5
 8012b04:	4620      	mov	r0, r4
 8012b06:	4629      	mov	r1, r5
 8012b08:	f7ed fd76 	bl	80005f8 <__aeabi_dmul>
 8012b0c:	4682      	mov	sl, r0
 8012b0e:	468b      	mov	fp, r1
 8012b10:	4602      	mov	r2, r0
 8012b12:	460b      	mov	r3, r1
 8012b14:	4620      	mov	r0, r4
 8012b16:	4629      	mov	r1, r5
 8012b18:	f7ed fd6e 	bl	80005f8 <__aeabi_dmul>
 8012b1c:	a341      	add	r3, pc, #260	; (adr r3, 8012c24 <__kernel_sin+0x154>)
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	4680      	mov	r8, r0
 8012b24:	4689      	mov	r9, r1
 8012b26:	4650      	mov	r0, sl
 8012b28:	4659      	mov	r1, fp
 8012b2a:	f7ed fd65 	bl	80005f8 <__aeabi_dmul>
 8012b2e:	a33f      	add	r3, pc, #252	; (adr r3, 8012c2c <__kernel_sin+0x15c>)
 8012b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b34:	f7ed fba8 	bl	8000288 <__aeabi_dsub>
 8012b38:	4652      	mov	r2, sl
 8012b3a:	465b      	mov	r3, fp
 8012b3c:	f7ed fd5c 	bl	80005f8 <__aeabi_dmul>
 8012b40:	a33c      	add	r3, pc, #240	; (adr r3, 8012c34 <__kernel_sin+0x164>)
 8012b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b46:	f7ed fba1 	bl	800028c <__adddf3>
 8012b4a:	4652      	mov	r2, sl
 8012b4c:	465b      	mov	r3, fp
 8012b4e:	f7ed fd53 	bl	80005f8 <__aeabi_dmul>
 8012b52:	a33a      	add	r3, pc, #232	; (adr r3, 8012c3c <__kernel_sin+0x16c>)
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	f7ed fb96 	bl	8000288 <__aeabi_dsub>
 8012b5c:	4652      	mov	r2, sl
 8012b5e:	465b      	mov	r3, fp
 8012b60:	f7ed fd4a 	bl	80005f8 <__aeabi_dmul>
 8012b64:	a337      	add	r3, pc, #220	; (adr r3, 8012c44 <__kernel_sin+0x174>)
 8012b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6a:	f7ed fb8f 	bl	800028c <__adddf3>
 8012b6e:	9b01      	ldr	r3, [sp, #4]
 8012b70:	4606      	mov	r6, r0
 8012b72:	460f      	mov	r7, r1
 8012b74:	b9eb      	cbnz	r3, 8012bb2 <__kernel_sin+0xe2>
 8012b76:	4602      	mov	r2, r0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	4650      	mov	r0, sl
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	f7ed fd3b 	bl	80005f8 <__aeabi_dmul>
 8012b82:	a325      	add	r3, pc, #148	; (adr r3, 8012c18 <__kernel_sin+0x148>)
 8012b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b88:	f7ed fb7e 	bl	8000288 <__aeabi_dsub>
 8012b8c:	4642      	mov	r2, r8
 8012b8e:	464b      	mov	r3, r9
 8012b90:	f7ed fd32 	bl	80005f8 <__aeabi_dmul>
 8012b94:	4602      	mov	r2, r0
 8012b96:	460b      	mov	r3, r1
 8012b98:	4620      	mov	r0, r4
 8012b9a:	4629      	mov	r1, r5
 8012b9c:	f7ed fb76 	bl	800028c <__adddf3>
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	460d      	mov	r5, r1
 8012ba4:	ec45 4b10 	vmov	d0, r4, r5
 8012ba8:	b003      	add	sp, #12
 8012baa:	ecbd 8b04 	vpop	{d8-d9}
 8012bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb2:	4b1b      	ldr	r3, [pc, #108]	; (8012c20 <__kernel_sin+0x150>)
 8012bb4:	ec51 0b18 	vmov	r0, r1, d8
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f7ed fd1d 	bl	80005f8 <__aeabi_dmul>
 8012bbe:	4632      	mov	r2, r6
 8012bc0:	ec41 0b19 	vmov	d9, r0, r1
 8012bc4:	463b      	mov	r3, r7
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	4649      	mov	r1, r9
 8012bca:	f7ed fd15 	bl	80005f8 <__aeabi_dmul>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	ec51 0b19 	vmov	r0, r1, d9
 8012bd6:	f7ed fb57 	bl	8000288 <__aeabi_dsub>
 8012bda:	4652      	mov	r2, sl
 8012bdc:	465b      	mov	r3, fp
 8012bde:	f7ed fd0b 	bl	80005f8 <__aeabi_dmul>
 8012be2:	ec53 2b18 	vmov	r2, r3, d8
 8012be6:	f7ed fb4f 	bl	8000288 <__aeabi_dsub>
 8012bea:	a30b      	add	r3, pc, #44	; (adr r3, 8012c18 <__kernel_sin+0x148>)
 8012bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf0:	4606      	mov	r6, r0
 8012bf2:	460f      	mov	r7, r1
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	4649      	mov	r1, r9
 8012bf8:	f7ed fcfe 	bl	80005f8 <__aeabi_dmul>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	460b      	mov	r3, r1
 8012c00:	4630      	mov	r0, r6
 8012c02:	4639      	mov	r1, r7
 8012c04:	f7ed fb42 	bl	800028c <__adddf3>
 8012c08:	4602      	mov	r2, r0
 8012c0a:	460b      	mov	r3, r1
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	4629      	mov	r1, r5
 8012c10:	f7ed fb3a 	bl	8000288 <__aeabi_dsub>
 8012c14:	e7c4      	b.n	8012ba0 <__kernel_sin+0xd0>
 8012c16:	bf00      	nop
 8012c18:	55555549 	.word	0x55555549
 8012c1c:	3fc55555 	.word	0x3fc55555
 8012c20:	3fe00000 	.word	0x3fe00000
 8012c24:	5acfd57c 	.word	0x5acfd57c
 8012c28:	3de5d93a 	.word	0x3de5d93a
 8012c2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012c30:	3e5ae5e6 	.word	0x3e5ae5e6
 8012c34:	57b1fe7d 	.word	0x57b1fe7d
 8012c38:	3ec71de3 	.word	0x3ec71de3
 8012c3c:	19c161d5 	.word	0x19c161d5
 8012c40:	3f2a01a0 	.word	0x3f2a01a0
 8012c44:	1110f8a6 	.word	0x1110f8a6
 8012c48:	3f811111 	.word	0x3f811111
 8012c4c:	00000000 	.word	0x00000000

08012c50 <__ieee754_asin>:
 8012c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c54:	ed2d 8b04 	vpush	{d8-d9}
 8012c58:	ec55 4b10 	vmov	r4, r5, d0
 8012c5c:	4bcc      	ldr	r3, [pc, #816]	; (8012f90 <__ieee754_asin+0x340>)
 8012c5e:	b083      	sub	sp, #12
 8012c60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012c64:	4598      	cmp	r8, r3
 8012c66:	9501      	str	r5, [sp, #4]
 8012c68:	dd33      	ble.n	8012cd2 <__ieee754_asin+0x82>
 8012c6a:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8012c6e:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8012c72:	ea58 0804 	orrs.w	r8, r8, r4
 8012c76:	d117      	bne.n	8012ca8 <__ieee754_asin+0x58>
 8012c78:	a3ab      	add	r3, pc, #684	; (adr r3, 8012f28 <__ieee754_asin+0x2d8>)
 8012c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7e:	ee10 0a10 	vmov	r0, s0
 8012c82:	4629      	mov	r1, r5
 8012c84:	f7ed fcb8 	bl	80005f8 <__aeabi_dmul>
 8012c88:	a3a9      	add	r3, pc, #676	; (adr r3, 8012f30 <__ieee754_asin+0x2e0>)
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	4606      	mov	r6, r0
 8012c90:	460f      	mov	r7, r1
 8012c92:	4620      	mov	r0, r4
 8012c94:	4629      	mov	r1, r5
 8012c96:	f7ed fcaf 	bl	80005f8 <__aeabi_dmul>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	460b      	mov	r3, r1
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	4639      	mov	r1, r7
 8012ca2:	f7ed faf3 	bl	800028c <__adddf3>
 8012ca6:	e00b      	b.n	8012cc0 <__ieee754_asin+0x70>
 8012ca8:	ee10 2a10 	vmov	r2, s0
 8012cac:	462b      	mov	r3, r5
 8012cae:	ee10 0a10 	vmov	r0, s0
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	f7ed fae8 	bl	8000288 <__aeabi_dsub>
 8012cb8:	4602      	mov	r2, r0
 8012cba:	460b      	mov	r3, r1
 8012cbc:	f7ed fdc6 	bl	800084c <__aeabi_ddiv>
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	460d      	mov	r5, r1
 8012cc4:	ec45 4b10 	vmov	d0, r4, r5
 8012cc8:	b003      	add	sp, #12
 8012cca:	ecbd 8b04 	vpop	{d8-d9}
 8012cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd2:	4bb0      	ldr	r3, [pc, #704]	; (8012f94 <__ieee754_asin+0x344>)
 8012cd4:	4598      	cmp	r8, r3
 8012cd6:	dc11      	bgt.n	8012cfc <__ieee754_asin+0xac>
 8012cd8:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012cdc:	f280 80ae 	bge.w	8012e3c <__ieee754_asin+0x1ec>
 8012ce0:	a395      	add	r3, pc, #596	; (adr r3, 8012f38 <__ieee754_asin+0x2e8>)
 8012ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce6:	ee10 0a10 	vmov	r0, s0
 8012cea:	4629      	mov	r1, r5
 8012cec:	f7ed face 	bl	800028c <__adddf3>
 8012cf0:	4ba9      	ldr	r3, [pc, #676]	; (8012f98 <__ieee754_asin+0x348>)
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f7ed ff10 	bl	8000b18 <__aeabi_dcmpgt>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d1e3      	bne.n	8012cc4 <__ieee754_asin+0x74>
 8012cfc:	ec45 4b10 	vmov	d0, r4, r5
 8012d00:	f7ff fcde 	bl	80126c0 <fabs>
 8012d04:	49a4      	ldr	r1, [pc, #656]	; (8012f98 <__ieee754_asin+0x348>)
 8012d06:	ec53 2b10 	vmov	r2, r3, d0
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	f7ed fabc 	bl	8000288 <__aeabi_dsub>
 8012d10:	4ba2      	ldr	r3, [pc, #648]	; (8012f9c <__ieee754_asin+0x34c>)
 8012d12:	2200      	movs	r2, #0
 8012d14:	f7ed fc70 	bl	80005f8 <__aeabi_dmul>
 8012d18:	a389      	add	r3, pc, #548	; (adr r3, 8012f40 <__ieee754_asin+0x2f0>)
 8012d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1e:	4604      	mov	r4, r0
 8012d20:	460d      	mov	r5, r1
 8012d22:	f7ed fc69 	bl	80005f8 <__aeabi_dmul>
 8012d26:	a388      	add	r3, pc, #544	; (adr r3, 8012f48 <__ieee754_asin+0x2f8>)
 8012d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2c:	f7ed faae 	bl	800028c <__adddf3>
 8012d30:	4622      	mov	r2, r4
 8012d32:	462b      	mov	r3, r5
 8012d34:	f7ed fc60 	bl	80005f8 <__aeabi_dmul>
 8012d38:	a385      	add	r3, pc, #532	; (adr r3, 8012f50 <__ieee754_asin+0x300>)
 8012d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3e:	f7ed faa3 	bl	8000288 <__aeabi_dsub>
 8012d42:	4622      	mov	r2, r4
 8012d44:	462b      	mov	r3, r5
 8012d46:	f7ed fc57 	bl	80005f8 <__aeabi_dmul>
 8012d4a:	a383      	add	r3, pc, #524	; (adr r3, 8012f58 <__ieee754_asin+0x308>)
 8012d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d50:	f7ed fa9c 	bl	800028c <__adddf3>
 8012d54:	4622      	mov	r2, r4
 8012d56:	462b      	mov	r3, r5
 8012d58:	f7ed fc4e 	bl	80005f8 <__aeabi_dmul>
 8012d5c:	a380      	add	r3, pc, #512	; (adr r3, 8012f60 <__ieee754_asin+0x310>)
 8012d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d62:	f7ed fa91 	bl	8000288 <__aeabi_dsub>
 8012d66:	4622      	mov	r2, r4
 8012d68:	462b      	mov	r3, r5
 8012d6a:	f7ed fc45 	bl	80005f8 <__aeabi_dmul>
 8012d6e:	a37e      	add	r3, pc, #504	; (adr r3, 8012f68 <__ieee754_asin+0x318>)
 8012d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d74:	f7ed fa8a 	bl	800028c <__adddf3>
 8012d78:	4622      	mov	r2, r4
 8012d7a:	462b      	mov	r3, r5
 8012d7c:	f7ed fc3c 	bl	80005f8 <__aeabi_dmul>
 8012d80:	a37b      	add	r3, pc, #492	; (adr r3, 8012f70 <__ieee754_asin+0x320>)
 8012d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d86:	ec41 0b18 	vmov	d8, r0, r1
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	f7ed fc33 	bl	80005f8 <__aeabi_dmul>
 8012d92:	a379      	add	r3, pc, #484	; (adr r3, 8012f78 <__ieee754_asin+0x328>)
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	f7ed fa76 	bl	8000288 <__aeabi_dsub>
 8012d9c:	4622      	mov	r2, r4
 8012d9e:	462b      	mov	r3, r5
 8012da0:	f7ed fc2a 	bl	80005f8 <__aeabi_dmul>
 8012da4:	a376      	add	r3, pc, #472	; (adr r3, 8012f80 <__ieee754_asin+0x330>)
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	f7ed fa6f 	bl	800028c <__adddf3>
 8012dae:	4622      	mov	r2, r4
 8012db0:	462b      	mov	r3, r5
 8012db2:	f7ed fc21 	bl	80005f8 <__aeabi_dmul>
 8012db6:	a374      	add	r3, pc, #464	; (adr r3, 8012f88 <__ieee754_asin+0x338>)
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	f7ed fa64 	bl	8000288 <__aeabi_dsub>
 8012dc0:	4622      	mov	r2, r4
 8012dc2:	462b      	mov	r3, r5
 8012dc4:	f7ed fc18 	bl	80005f8 <__aeabi_dmul>
 8012dc8:	4b73      	ldr	r3, [pc, #460]	; (8012f98 <__ieee754_asin+0x348>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	f7ed fa5e 	bl	800028c <__adddf3>
 8012dd0:	ec45 4b10 	vmov	d0, r4, r5
 8012dd4:	4606      	mov	r6, r0
 8012dd6:	460f      	mov	r7, r1
 8012dd8:	f7ff fcd6 	bl	8012788 <__ieee754_sqrt>
 8012ddc:	4b70      	ldr	r3, [pc, #448]	; (8012fa0 <__ieee754_asin+0x350>)
 8012dde:	4598      	cmp	r8, r3
 8012de0:	ec5b ab10 	vmov	sl, fp, d0
 8012de4:	f340 80de 	ble.w	8012fa4 <__ieee754_asin+0x354>
 8012de8:	4632      	mov	r2, r6
 8012dea:	463b      	mov	r3, r7
 8012dec:	ec51 0b18 	vmov	r0, r1, d8
 8012df0:	f7ed fd2c 	bl	800084c <__aeabi_ddiv>
 8012df4:	4652      	mov	r2, sl
 8012df6:	465b      	mov	r3, fp
 8012df8:	f7ed fbfe 	bl	80005f8 <__aeabi_dmul>
 8012dfc:	4652      	mov	r2, sl
 8012dfe:	465b      	mov	r3, fp
 8012e00:	f7ed fa44 	bl	800028c <__adddf3>
 8012e04:	4602      	mov	r2, r0
 8012e06:	460b      	mov	r3, r1
 8012e08:	f7ed fa40 	bl	800028c <__adddf3>
 8012e0c:	a348      	add	r3, pc, #288	; (adr r3, 8012f30 <__ieee754_asin+0x2e0>)
 8012e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e12:	f7ed fa39 	bl	8000288 <__aeabi_dsub>
 8012e16:	4602      	mov	r2, r0
 8012e18:	460b      	mov	r3, r1
 8012e1a:	a143      	add	r1, pc, #268	; (adr r1, 8012f28 <__ieee754_asin+0x2d8>)
 8012e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e20:	f7ed fa32 	bl	8000288 <__aeabi_dsub>
 8012e24:	9b01      	ldr	r3, [sp, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	bfdc      	itt	le
 8012e2a:	4602      	movle	r2, r0
 8012e2c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8012e30:	4604      	mov	r4, r0
 8012e32:	460d      	mov	r5, r1
 8012e34:	bfdc      	itt	le
 8012e36:	4614      	movle	r4, r2
 8012e38:	461d      	movle	r5, r3
 8012e3a:	e743      	b.n	8012cc4 <__ieee754_asin+0x74>
 8012e3c:	ee10 2a10 	vmov	r2, s0
 8012e40:	ee10 0a10 	vmov	r0, s0
 8012e44:	462b      	mov	r3, r5
 8012e46:	4629      	mov	r1, r5
 8012e48:	f7ed fbd6 	bl	80005f8 <__aeabi_dmul>
 8012e4c:	a33c      	add	r3, pc, #240	; (adr r3, 8012f40 <__ieee754_asin+0x2f0>)
 8012e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e52:	4606      	mov	r6, r0
 8012e54:	460f      	mov	r7, r1
 8012e56:	f7ed fbcf 	bl	80005f8 <__aeabi_dmul>
 8012e5a:	a33b      	add	r3, pc, #236	; (adr r3, 8012f48 <__ieee754_asin+0x2f8>)
 8012e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e60:	f7ed fa14 	bl	800028c <__adddf3>
 8012e64:	4632      	mov	r2, r6
 8012e66:	463b      	mov	r3, r7
 8012e68:	f7ed fbc6 	bl	80005f8 <__aeabi_dmul>
 8012e6c:	a338      	add	r3, pc, #224	; (adr r3, 8012f50 <__ieee754_asin+0x300>)
 8012e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e72:	f7ed fa09 	bl	8000288 <__aeabi_dsub>
 8012e76:	4632      	mov	r2, r6
 8012e78:	463b      	mov	r3, r7
 8012e7a:	f7ed fbbd 	bl	80005f8 <__aeabi_dmul>
 8012e7e:	a336      	add	r3, pc, #216	; (adr r3, 8012f58 <__ieee754_asin+0x308>)
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	f7ed fa02 	bl	800028c <__adddf3>
 8012e88:	4632      	mov	r2, r6
 8012e8a:	463b      	mov	r3, r7
 8012e8c:	f7ed fbb4 	bl	80005f8 <__aeabi_dmul>
 8012e90:	a333      	add	r3, pc, #204	; (adr r3, 8012f60 <__ieee754_asin+0x310>)
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	f7ed f9f7 	bl	8000288 <__aeabi_dsub>
 8012e9a:	4632      	mov	r2, r6
 8012e9c:	463b      	mov	r3, r7
 8012e9e:	f7ed fbab 	bl	80005f8 <__aeabi_dmul>
 8012ea2:	a331      	add	r3, pc, #196	; (adr r3, 8012f68 <__ieee754_asin+0x318>)
 8012ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea8:	f7ed f9f0 	bl	800028c <__adddf3>
 8012eac:	4632      	mov	r2, r6
 8012eae:	463b      	mov	r3, r7
 8012eb0:	f7ed fba2 	bl	80005f8 <__aeabi_dmul>
 8012eb4:	a32e      	add	r3, pc, #184	; (adr r3, 8012f70 <__ieee754_asin+0x320>)
 8012eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eba:	4680      	mov	r8, r0
 8012ebc:	4689      	mov	r9, r1
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	4639      	mov	r1, r7
 8012ec2:	f7ed fb99 	bl	80005f8 <__aeabi_dmul>
 8012ec6:	a32c      	add	r3, pc, #176	; (adr r3, 8012f78 <__ieee754_asin+0x328>)
 8012ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ecc:	f7ed f9dc 	bl	8000288 <__aeabi_dsub>
 8012ed0:	4632      	mov	r2, r6
 8012ed2:	463b      	mov	r3, r7
 8012ed4:	f7ed fb90 	bl	80005f8 <__aeabi_dmul>
 8012ed8:	a329      	add	r3, pc, #164	; (adr r3, 8012f80 <__ieee754_asin+0x330>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	f7ed f9d5 	bl	800028c <__adddf3>
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	463b      	mov	r3, r7
 8012ee6:	f7ed fb87 	bl	80005f8 <__aeabi_dmul>
 8012eea:	a327      	add	r3, pc, #156	; (adr r3, 8012f88 <__ieee754_asin+0x338>)
 8012eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef0:	f7ed f9ca 	bl	8000288 <__aeabi_dsub>
 8012ef4:	4632      	mov	r2, r6
 8012ef6:	463b      	mov	r3, r7
 8012ef8:	f7ed fb7e 	bl	80005f8 <__aeabi_dmul>
 8012efc:	4b26      	ldr	r3, [pc, #152]	; (8012f98 <__ieee754_asin+0x348>)
 8012efe:	2200      	movs	r2, #0
 8012f00:	f7ed f9c4 	bl	800028c <__adddf3>
 8012f04:	4602      	mov	r2, r0
 8012f06:	460b      	mov	r3, r1
 8012f08:	4640      	mov	r0, r8
 8012f0a:	4649      	mov	r1, r9
 8012f0c:	f7ed fc9e 	bl	800084c <__aeabi_ddiv>
 8012f10:	4622      	mov	r2, r4
 8012f12:	462b      	mov	r3, r5
 8012f14:	f7ed fb70 	bl	80005f8 <__aeabi_dmul>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	4629      	mov	r1, r5
 8012f20:	e6bf      	b.n	8012ca2 <__ieee754_asin+0x52>
 8012f22:	bf00      	nop
 8012f24:	f3af 8000 	nop.w
 8012f28:	54442d18 	.word	0x54442d18
 8012f2c:	3ff921fb 	.word	0x3ff921fb
 8012f30:	33145c07 	.word	0x33145c07
 8012f34:	3c91a626 	.word	0x3c91a626
 8012f38:	8800759c 	.word	0x8800759c
 8012f3c:	7e37e43c 	.word	0x7e37e43c
 8012f40:	0dfdf709 	.word	0x0dfdf709
 8012f44:	3f023de1 	.word	0x3f023de1
 8012f48:	7501b288 	.word	0x7501b288
 8012f4c:	3f49efe0 	.word	0x3f49efe0
 8012f50:	b5688f3b 	.word	0xb5688f3b
 8012f54:	3fa48228 	.word	0x3fa48228
 8012f58:	0e884455 	.word	0x0e884455
 8012f5c:	3fc9c155 	.word	0x3fc9c155
 8012f60:	03eb6f7d 	.word	0x03eb6f7d
 8012f64:	3fd4d612 	.word	0x3fd4d612
 8012f68:	55555555 	.word	0x55555555
 8012f6c:	3fc55555 	.word	0x3fc55555
 8012f70:	b12e9282 	.word	0xb12e9282
 8012f74:	3fb3b8c5 	.word	0x3fb3b8c5
 8012f78:	1b8d0159 	.word	0x1b8d0159
 8012f7c:	3fe6066c 	.word	0x3fe6066c
 8012f80:	9c598ac8 	.word	0x9c598ac8
 8012f84:	40002ae5 	.word	0x40002ae5
 8012f88:	1c8a2d4b 	.word	0x1c8a2d4b
 8012f8c:	40033a27 	.word	0x40033a27
 8012f90:	3fefffff 	.word	0x3fefffff
 8012f94:	3fdfffff 	.word	0x3fdfffff
 8012f98:	3ff00000 	.word	0x3ff00000
 8012f9c:	3fe00000 	.word	0x3fe00000
 8012fa0:	3fef3332 	.word	0x3fef3332
 8012fa4:	ee10 2a10 	vmov	r2, s0
 8012fa8:	ee10 0a10 	vmov	r0, s0
 8012fac:	465b      	mov	r3, fp
 8012fae:	4659      	mov	r1, fp
 8012fb0:	f7ed f96c 	bl	800028c <__adddf3>
 8012fb4:	4632      	mov	r2, r6
 8012fb6:	463b      	mov	r3, r7
 8012fb8:	ec41 0b19 	vmov	d9, r0, r1
 8012fbc:	ec51 0b18 	vmov	r0, r1, d8
 8012fc0:	f7ed fc44 	bl	800084c <__aeabi_ddiv>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	ec51 0b19 	vmov	r0, r1, d9
 8012fcc:	f7ed fb14 	bl	80005f8 <__aeabi_dmul>
 8012fd0:	f04f 0800 	mov.w	r8, #0
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	460f      	mov	r7, r1
 8012fd8:	4642      	mov	r2, r8
 8012fda:	465b      	mov	r3, fp
 8012fdc:	4640      	mov	r0, r8
 8012fde:	4659      	mov	r1, fp
 8012fe0:	f7ed fb0a 	bl	80005f8 <__aeabi_dmul>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	460b      	mov	r3, r1
 8012fe8:	4620      	mov	r0, r4
 8012fea:	4629      	mov	r1, r5
 8012fec:	f7ed f94c 	bl	8000288 <__aeabi_dsub>
 8012ff0:	4642      	mov	r2, r8
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	460d      	mov	r5, r1
 8012ff6:	465b      	mov	r3, fp
 8012ff8:	4650      	mov	r0, sl
 8012ffa:	4659      	mov	r1, fp
 8012ffc:	f7ed f946 	bl	800028c <__adddf3>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	4620      	mov	r0, r4
 8013006:	4629      	mov	r1, r5
 8013008:	f7ed fc20 	bl	800084c <__aeabi_ddiv>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	f7ed f93c 	bl	800028c <__adddf3>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	a113      	add	r1, pc, #76	; (adr r1, 8013068 <__ieee754_asin+0x418>)
 801301a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801301e:	f7ed f933 	bl	8000288 <__aeabi_dsub>
 8013022:	4602      	mov	r2, r0
 8013024:	460b      	mov	r3, r1
 8013026:	4630      	mov	r0, r6
 8013028:	4639      	mov	r1, r7
 801302a:	f7ed f92d 	bl	8000288 <__aeabi_dsub>
 801302e:	4642      	mov	r2, r8
 8013030:	4604      	mov	r4, r0
 8013032:	460d      	mov	r5, r1
 8013034:	465b      	mov	r3, fp
 8013036:	4640      	mov	r0, r8
 8013038:	4659      	mov	r1, fp
 801303a:	f7ed f927 	bl	800028c <__adddf3>
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	a10b      	add	r1, pc, #44	; (adr r1, 8013070 <__ieee754_asin+0x420>)
 8013044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013048:	f7ed f91e 	bl	8000288 <__aeabi_dsub>
 801304c:	4602      	mov	r2, r0
 801304e:	460b      	mov	r3, r1
 8013050:	4620      	mov	r0, r4
 8013052:	4629      	mov	r1, r5
 8013054:	f7ed f918 	bl	8000288 <__aeabi_dsub>
 8013058:	4602      	mov	r2, r0
 801305a:	460b      	mov	r3, r1
 801305c:	a104      	add	r1, pc, #16	; (adr r1, 8013070 <__ieee754_asin+0x420>)
 801305e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013062:	e6dd      	b.n	8012e20 <__ieee754_asin+0x1d0>
 8013064:	f3af 8000 	nop.w
 8013068:	33145c07 	.word	0x33145c07
 801306c:	3c91a626 	.word	0x3c91a626
 8013070:	54442d18 	.word	0x54442d18
 8013074:	3fe921fb 	.word	0x3fe921fb

08013078 <__ieee754_rem_pio2>:
 8013078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307c:	ed2d 8b02 	vpush	{d8}
 8013080:	ec55 4b10 	vmov	r4, r5, d0
 8013084:	4bca      	ldr	r3, [pc, #808]	; (80133b0 <__ieee754_rem_pio2+0x338>)
 8013086:	b08b      	sub	sp, #44	; 0x2c
 8013088:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801308c:	4598      	cmp	r8, r3
 801308e:	4682      	mov	sl, r0
 8013090:	9502      	str	r5, [sp, #8]
 8013092:	dc08      	bgt.n	80130a6 <__ieee754_rem_pio2+0x2e>
 8013094:	2200      	movs	r2, #0
 8013096:	2300      	movs	r3, #0
 8013098:	ed80 0b00 	vstr	d0, [r0]
 801309c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80130a0:	f04f 0b00 	mov.w	fp, #0
 80130a4:	e028      	b.n	80130f8 <__ieee754_rem_pio2+0x80>
 80130a6:	4bc3      	ldr	r3, [pc, #780]	; (80133b4 <__ieee754_rem_pio2+0x33c>)
 80130a8:	4598      	cmp	r8, r3
 80130aa:	dc78      	bgt.n	801319e <__ieee754_rem_pio2+0x126>
 80130ac:	9b02      	ldr	r3, [sp, #8]
 80130ae:	4ec2      	ldr	r6, [pc, #776]	; (80133b8 <__ieee754_rem_pio2+0x340>)
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	ee10 0a10 	vmov	r0, s0
 80130b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8013378 <__ieee754_rem_pio2+0x300>)
 80130b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130bc:	4629      	mov	r1, r5
 80130be:	dd39      	ble.n	8013134 <__ieee754_rem_pio2+0xbc>
 80130c0:	f7ed f8e2 	bl	8000288 <__aeabi_dsub>
 80130c4:	45b0      	cmp	r8, r6
 80130c6:	4604      	mov	r4, r0
 80130c8:	460d      	mov	r5, r1
 80130ca:	d01b      	beq.n	8013104 <__ieee754_rem_pio2+0x8c>
 80130cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8013380 <__ieee754_rem_pio2+0x308>)
 80130ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d2:	f7ed f8d9 	bl	8000288 <__aeabi_dsub>
 80130d6:	4602      	mov	r2, r0
 80130d8:	460b      	mov	r3, r1
 80130da:	e9ca 2300 	strd	r2, r3, [sl]
 80130de:	4620      	mov	r0, r4
 80130e0:	4629      	mov	r1, r5
 80130e2:	f7ed f8d1 	bl	8000288 <__aeabi_dsub>
 80130e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8013380 <__ieee754_rem_pio2+0x308>)
 80130e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ec:	f7ed f8cc 	bl	8000288 <__aeabi_dsub>
 80130f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80130f4:	f04f 0b01 	mov.w	fp, #1
 80130f8:	4658      	mov	r0, fp
 80130fa:	b00b      	add	sp, #44	; 0x2c
 80130fc:	ecbd 8b02 	vpop	{d8}
 8013100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013104:	a3a0      	add	r3, pc, #640	; (adr r3, 8013388 <__ieee754_rem_pio2+0x310>)
 8013106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310a:	f7ed f8bd 	bl	8000288 <__aeabi_dsub>
 801310e:	a3a0      	add	r3, pc, #640	; (adr r3, 8013390 <__ieee754_rem_pio2+0x318>)
 8013110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013114:	4604      	mov	r4, r0
 8013116:	460d      	mov	r5, r1
 8013118:	f7ed f8b6 	bl	8000288 <__aeabi_dsub>
 801311c:	4602      	mov	r2, r0
 801311e:	460b      	mov	r3, r1
 8013120:	e9ca 2300 	strd	r2, r3, [sl]
 8013124:	4620      	mov	r0, r4
 8013126:	4629      	mov	r1, r5
 8013128:	f7ed f8ae 	bl	8000288 <__aeabi_dsub>
 801312c:	a398      	add	r3, pc, #608	; (adr r3, 8013390 <__ieee754_rem_pio2+0x318>)
 801312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013132:	e7db      	b.n	80130ec <__ieee754_rem_pio2+0x74>
 8013134:	f7ed f8aa 	bl	800028c <__adddf3>
 8013138:	45b0      	cmp	r8, r6
 801313a:	4604      	mov	r4, r0
 801313c:	460d      	mov	r5, r1
 801313e:	d016      	beq.n	801316e <__ieee754_rem_pio2+0xf6>
 8013140:	a38f      	add	r3, pc, #572	; (adr r3, 8013380 <__ieee754_rem_pio2+0x308>)
 8013142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013146:	f7ed f8a1 	bl	800028c <__adddf3>
 801314a:	4602      	mov	r2, r0
 801314c:	460b      	mov	r3, r1
 801314e:	e9ca 2300 	strd	r2, r3, [sl]
 8013152:	4620      	mov	r0, r4
 8013154:	4629      	mov	r1, r5
 8013156:	f7ed f897 	bl	8000288 <__aeabi_dsub>
 801315a:	a389      	add	r3, pc, #548	; (adr r3, 8013380 <__ieee754_rem_pio2+0x308>)
 801315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013160:	f7ed f894 	bl	800028c <__adddf3>
 8013164:	f04f 3bff 	mov.w	fp, #4294967295
 8013168:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801316c:	e7c4      	b.n	80130f8 <__ieee754_rem_pio2+0x80>
 801316e:	a386      	add	r3, pc, #536	; (adr r3, 8013388 <__ieee754_rem_pio2+0x310>)
 8013170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013174:	f7ed f88a 	bl	800028c <__adddf3>
 8013178:	a385      	add	r3, pc, #532	; (adr r3, 8013390 <__ieee754_rem_pio2+0x318>)
 801317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317e:	4604      	mov	r4, r0
 8013180:	460d      	mov	r5, r1
 8013182:	f7ed f883 	bl	800028c <__adddf3>
 8013186:	4602      	mov	r2, r0
 8013188:	460b      	mov	r3, r1
 801318a:	e9ca 2300 	strd	r2, r3, [sl]
 801318e:	4620      	mov	r0, r4
 8013190:	4629      	mov	r1, r5
 8013192:	f7ed f879 	bl	8000288 <__aeabi_dsub>
 8013196:	a37e      	add	r3, pc, #504	; (adr r3, 8013390 <__ieee754_rem_pio2+0x318>)
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	e7e0      	b.n	8013160 <__ieee754_rem_pio2+0xe8>
 801319e:	4b87      	ldr	r3, [pc, #540]	; (80133bc <__ieee754_rem_pio2+0x344>)
 80131a0:	4598      	cmp	r8, r3
 80131a2:	f300 80d8 	bgt.w	8013356 <__ieee754_rem_pio2+0x2de>
 80131a6:	f7ff fa8b 	bl	80126c0 <fabs>
 80131aa:	ec55 4b10 	vmov	r4, r5, d0
 80131ae:	ee10 0a10 	vmov	r0, s0
 80131b2:	a379      	add	r3, pc, #484	; (adr r3, 8013398 <__ieee754_rem_pio2+0x320>)
 80131b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b8:	4629      	mov	r1, r5
 80131ba:	f7ed fa1d 	bl	80005f8 <__aeabi_dmul>
 80131be:	4b80      	ldr	r3, [pc, #512]	; (80133c0 <__ieee754_rem_pio2+0x348>)
 80131c0:	2200      	movs	r2, #0
 80131c2:	f7ed f863 	bl	800028c <__adddf3>
 80131c6:	f7ed fcc7 	bl	8000b58 <__aeabi_d2iz>
 80131ca:	4683      	mov	fp, r0
 80131cc:	f7ed f9aa 	bl	8000524 <__aeabi_i2d>
 80131d0:	4602      	mov	r2, r0
 80131d2:	460b      	mov	r3, r1
 80131d4:	ec43 2b18 	vmov	d8, r2, r3
 80131d8:	a367      	add	r3, pc, #412	; (adr r3, 8013378 <__ieee754_rem_pio2+0x300>)
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	f7ed fa0b 	bl	80005f8 <__aeabi_dmul>
 80131e2:	4602      	mov	r2, r0
 80131e4:	460b      	mov	r3, r1
 80131e6:	4620      	mov	r0, r4
 80131e8:	4629      	mov	r1, r5
 80131ea:	f7ed f84d 	bl	8000288 <__aeabi_dsub>
 80131ee:	a364      	add	r3, pc, #400	; (adr r3, 8013380 <__ieee754_rem_pio2+0x308>)
 80131f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f4:	4606      	mov	r6, r0
 80131f6:	460f      	mov	r7, r1
 80131f8:	ec51 0b18 	vmov	r0, r1, d8
 80131fc:	f7ed f9fc 	bl	80005f8 <__aeabi_dmul>
 8013200:	f1bb 0f1f 	cmp.w	fp, #31
 8013204:	4604      	mov	r4, r0
 8013206:	460d      	mov	r5, r1
 8013208:	dc0d      	bgt.n	8013226 <__ieee754_rem_pio2+0x1ae>
 801320a:	4b6e      	ldr	r3, [pc, #440]	; (80133c4 <__ieee754_rem_pio2+0x34c>)
 801320c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013214:	4543      	cmp	r3, r8
 8013216:	d006      	beq.n	8013226 <__ieee754_rem_pio2+0x1ae>
 8013218:	4622      	mov	r2, r4
 801321a:	462b      	mov	r3, r5
 801321c:	4630      	mov	r0, r6
 801321e:	4639      	mov	r1, r7
 8013220:	f7ed f832 	bl	8000288 <__aeabi_dsub>
 8013224:	e00e      	b.n	8013244 <__ieee754_rem_pio2+0x1cc>
 8013226:	462b      	mov	r3, r5
 8013228:	4622      	mov	r2, r4
 801322a:	4630      	mov	r0, r6
 801322c:	4639      	mov	r1, r7
 801322e:	f7ed f82b 	bl	8000288 <__aeabi_dsub>
 8013232:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013236:	9303      	str	r3, [sp, #12]
 8013238:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801323c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013240:	2b10      	cmp	r3, #16
 8013242:	dc02      	bgt.n	801324a <__ieee754_rem_pio2+0x1d2>
 8013244:	e9ca 0100 	strd	r0, r1, [sl]
 8013248:	e039      	b.n	80132be <__ieee754_rem_pio2+0x246>
 801324a:	a34f      	add	r3, pc, #316	; (adr r3, 8013388 <__ieee754_rem_pio2+0x310>)
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	ec51 0b18 	vmov	r0, r1, d8
 8013254:	f7ed f9d0 	bl	80005f8 <__aeabi_dmul>
 8013258:	4604      	mov	r4, r0
 801325a:	460d      	mov	r5, r1
 801325c:	4602      	mov	r2, r0
 801325e:	460b      	mov	r3, r1
 8013260:	4630      	mov	r0, r6
 8013262:	4639      	mov	r1, r7
 8013264:	f7ed f810 	bl	8000288 <__aeabi_dsub>
 8013268:	4602      	mov	r2, r0
 801326a:	460b      	mov	r3, r1
 801326c:	4680      	mov	r8, r0
 801326e:	4689      	mov	r9, r1
 8013270:	4630      	mov	r0, r6
 8013272:	4639      	mov	r1, r7
 8013274:	f7ed f808 	bl	8000288 <__aeabi_dsub>
 8013278:	4622      	mov	r2, r4
 801327a:	462b      	mov	r3, r5
 801327c:	f7ed f804 	bl	8000288 <__aeabi_dsub>
 8013280:	a343      	add	r3, pc, #268	; (adr r3, 8013390 <__ieee754_rem_pio2+0x318>)
 8013282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013286:	4604      	mov	r4, r0
 8013288:	460d      	mov	r5, r1
 801328a:	ec51 0b18 	vmov	r0, r1, d8
 801328e:	f7ed f9b3 	bl	80005f8 <__aeabi_dmul>
 8013292:	4622      	mov	r2, r4
 8013294:	462b      	mov	r3, r5
 8013296:	f7ec fff7 	bl	8000288 <__aeabi_dsub>
 801329a:	4602      	mov	r2, r0
 801329c:	460b      	mov	r3, r1
 801329e:	4604      	mov	r4, r0
 80132a0:	460d      	mov	r5, r1
 80132a2:	4640      	mov	r0, r8
 80132a4:	4649      	mov	r1, r9
 80132a6:	f7ec ffef 	bl	8000288 <__aeabi_dsub>
 80132aa:	9a03      	ldr	r2, [sp, #12]
 80132ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80132b0:	1ad3      	subs	r3, r2, r3
 80132b2:	2b31      	cmp	r3, #49	; 0x31
 80132b4:	dc24      	bgt.n	8013300 <__ieee754_rem_pio2+0x288>
 80132b6:	e9ca 0100 	strd	r0, r1, [sl]
 80132ba:	4646      	mov	r6, r8
 80132bc:	464f      	mov	r7, r9
 80132be:	e9da 8900 	ldrd	r8, r9, [sl]
 80132c2:	4630      	mov	r0, r6
 80132c4:	4642      	mov	r2, r8
 80132c6:	464b      	mov	r3, r9
 80132c8:	4639      	mov	r1, r7
 80132ca:	f7ec ffdd 	bl	8000288 <__aeabi_dsub>
 80132ce:	462b      	mov	r3, r5
 80132d0:	4622      	mov	r2, r4
 80132d2:	f7ec ffd9 	bl	8000288 <__aeabi_dsub>
 80132d6:	9b02      	ldr	r3, [sp, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80132de:	f6bf af0b 	bge.w	80130f8 <__ieee754_rem_pio2+0x80>
 80132e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80132e6:	f8ca 3004 	str.w	r3, [sl, #4]
 80132ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132ee:	f8ca 8000 	str.w	r8, [sl]
 80132f2:	f8ca 0008 	str.w	r0, [sl, #8]
 80132f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80132fa:	f1cb 0b00 	rsb	fp, fp, #0
 80132fe:	e6fb      	b.n	80130f8 <__ieee754_rem_pio2+0x80>
 8013300:	a327      	add	r3, pc, #156	; (adr r3, 80133a0 <__ieee754_rem_pio2+0x328>)
 8013302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013306:	ec51 0b18 	vmov	r0, r1, d8
 801330a:	f7ed f975 	bl	80005f8 <__aeabi_dmul>
 801330e:	4604      	mov	r4, r0
 8013310:	460d      	mov	r5, r1
 8013312:	4602      	mov	r2, r0
 8013314:	460b      	mov	r3, r1
 8013316:	4640      	mov	r0, r8
 8013318:	4649      	mov	r1, r9
 801331a:	f7ec ffb5 	bl	8000288 <__aeabi_dsub>
 801331e:	4602      	mov	r2, r0
 8013320:	460b      	mov	r3, r1
 8013322:	4606      	mov	r6, r0
 8013324:	460f      	mov	r7, r1
 8013326:	4640      	mov	r0, r8
 8013328:	4649      	mov	r1, r9
 801332a:	f7ec ffad 	bl	8000288 <__aeabi_dsub>
 801332e:	4622      	mov	r2, r4
 8013330:	462b      	mov	r3, r5
 8013332:	f7ec ffa9 	bl	8000288 <__aeabi_dsub>
 8013336:	a31c      	add	r3, pc, #112	; (adr r3, 80133a8 <__ieee754_rem_pio2+0x330>)
 8013338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333c:	4604      	mov	r4, r0
 801333e:	460d      	mov	r5, r1
 8013340:	ec51 0b18 	vmov	r0, r1, d8
 8013344:	f7ed f958 	bl	80005f8 <__aeabi_dmul>
 8013348:	4622      	mov	r2, r4
 801334a:	462b      	mov	r3, r5
 801334c:	f7ec ff9c 	bl	8000288 <__aeabi_dsub>
 8013350:	4604      	mov	r4, r0
 8013352:	460d      	mov	r5, r1
 8013354:	e760      	b.n	8013218 <__ieee754_rem_pio2+0x1a0>
 8013356:	4b1c      	ldr	r3, [pc, #112]	; (80133c8 <__ieee754_rem_pio2+0x350>)
 8013358:	4598      	cmp	r8, r3
 801335a:	dd37      	ble.n	80133cc <__ieee754_rem_pio2+0x354>
 801335c:	ee10 2a10 	vmov	r2, s0
 8013360:	462b      	mov	r3, r5
 8013362:	4620      	mov	r0, r4
 8013364:	4629      	mov	r1, r5
 8013366:	f7ec ff8f 	bl	8000288 <__aeabi_dsub>
 801336a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801336e:	e9ca 0100 	strd	r0, r1, [sl]
 8013372:	e695      	b.n	80130a0 <__ieee754_rem_pio2+0x28>
 8013374:	f3af 8000 	nop.w
 8013378:	54400000 	.word	0x54400000
 801337c:	3ff921fb 	.word	0x3ff921fb
 8013380:	1a626331 	.word	0x1a626331
 8013384:	3dd0b461 	.word	0x3dd0b461
 8013388:	1a600000 	.word	0x1a600000
 801338c:	3dd0b461 	.word	0x3dd0b461
 8013390:	2e037073 	.word	0x2e037073
 8013394:	3ba3198a 	.word	0x3ba3198a
 8013398:	6dc9c883 	.word	0x6dc9c883
 801339c:	3fe45f30 	.word	0x3fe45f30
 80133a0:	2e000000 	.word	0x2e000000
 80133a4:	3ba3198a 	.word	0x3ba3198a
 80133a8:	252049c1 	.word	0x252049c1
 80133ac:	397b839a 	.word	0x397b839a
 80133b0:	3fe921fb 	.word	0x3fe921fb
 80133b4:	4002d97b 	.word	0x4002d97b
 80133b8:	3ff921fb 	.word	0x3ff921fb
 80133bc:	413921fb 	.word	0x413921fb
 80133c0:	3fe00000 	.word	0x3fe00000
 80133c4:	08014268 	.word	0x08014268
 80133c8:	7fefffff 	.word	0x7fefffff
 80133cc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80133d0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80133d4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80133d8:	4620      	mov	r0, r4
 80133da:	460d      	mov	r5, r1
 80133dc:	f7ed fbbc 	bl	8000b58 <__aeabi_d2iz>
 80133e0:	f7ed f8a0 	bl	8000524 <__aeabi_i2d>
 80133e4:	4602      	mov	r2, r0
 80133e6:	460b      	mov	r3, r1
 80133e8:	4620      	mov	r0, r4
 80133ea:	4629      	mov	r1, r5
 80133ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80133f0:	f7ec ff4a 	bl	8000288 <__aeabi_dsub>
 80133f4:	4b21      	ldr	r3, [pc, #132]	; (801347c <__ieee754_rem_pio2+0x404>)
 80133f6:	2200      	movs	r2, #0
 80133f8:	f7ed f8fe 	bl	80005f8 <__aeabi_dmul>
 80133fc:	460d      	mov	r5, r1
 80133fe:	4604      	mov	r4, r0
 8013400:	f7ed fbaa 	bl	8000b58 <__aeabi_d2iz>
 8013404:	f7ed f88e 	bl	8000524 <__aeabi_i2d>
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	4620      	mov	r0, r4
 801340e:	4629      	mov	r1, r5
 8013410:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013414:	f7ec ff38 	bl	8000288 <__aeabi_dsub>
 8013418:	4b18      	ldr	r3, [pc, #96]	; (801347c <__ieee754_rem_pio2+0x404>)
 801341a:	2200      	movs	r2, #0
 801341c:	f7ed f8ec 	bl	80005f8 <__aeabi_dmul>
 8013420:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013424:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8013428:	2703      	movs	r7, #3
 801342a:	2400      	movs	r4, #0
 801342c:	2500      	movs	r5, #0
 801342e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8013432:	4622      	mov	r2, r4
 8013434:	462b      	mov	r3, r5
 8013436:	46b9      	mov	r9, r7
 8013438:	3f01      	subs	r7, #1
 801343a:	f7ed fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 801343e:	2800      	cmp	r0, #0
 8013440:	d1f5      	bne.n	801342e <__ieee754_rem_pio2+0x3b6>
 8013442:	4b0f      	ldr	r3, [pc, #60]	; (8013480 <__ieee754_rem_pio2+0x408>)
 8013444:	9301      	str	r3, [sp, #4]
 8013446:	2302      	movs	r3, #2
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	4632      	mov	r2, r6
 801344c:	464b      	mov	r3, r9
 801344e:	4651      	mov	r1, sl
 8013450:	a804      	add	r0, sp, #16
 8013452:	f000 f819 	bl	8013488 <__kernel_rem_pio2>
 8013456:	9b02      	ldr	r3, [sp, #8]
 8013458:	2b00      	cmp	r3, #0
 801345a:	4683      	mov	fp, r0
 801345c:	f6bf ae4c 	bge.w	80130f8 <__ieee754_rem_pio2+0x80>
 8013460:	e9da 2100 	ldrd	r2, r1, [sl]
 8013464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013468:	e9ca 2300 	strd	r2, r3, [sl]
 801346c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013470:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013474:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013478:	e73f      	b.n	80132fa <__ieee754_rem_pio2+0x282>
 801347a:	bf00      	nop
 801347c:	41700000 	.word	0x41700000
 8013480:	080142e8 	.word	0x080142e8
 8013484:	00000000 	.word	0x00000000

08013488 <__kernel_rem_pio2>:
 8013488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801348c:	ed2d 8b02 	vpush	{d8}
 8013490:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8013494:	f112 0f14 	cmn.w	r2, #20
 8013498:	9306      	str	r3, [sp, #24]
 801349a:	9104      	str	r1, [sp, #16]
 801349c:	4bc2      	ldr	r3, [pc, #776]	; (80137a8 <__kernel_rem_pio2+0x320>)
 801349e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80134a0:	9009      	str	r0, [sp, #36]	; 0x24
 80134a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	9b06      	ldr	r3, [sp, #24]
 80134aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80134ae:	bfa8      	it	ge
 80134b0:	1ed4      	subge	r4, r2, #3
 80134b2:	9305      	str	r3, [sp, #20]
 80134b4:	bfb2      	itee	lt
 80134b6:	2400      	movlt	r4, #0
 80134b8:	2318      	movge	r3, #24
 80134ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80134be:	f06f 0317 	mvn.w	r3, #23
 80134c2:	fb04 3303 	mla	r3, r4, r3, r3
 80134c6:	eb03 0a02 	add.w	sl, r3, r2
 80134ca:	9b00      	ldr	r3, [sp, #0]
 80134cc:	9a05      	ldr	r2, [sp, #20]
 80134ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8013798 <__kernel_rem_pio2+0x310>
 80134d2:	eb03 0802 	add.w	r8, r3, r2
 80134d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80134d8:	1aa7      	subs	r7, r4, r2
 80134da:	ae20      	add	r6, sp, #128	; 0x80
 80134dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80134e0:	2500      	movs	r5, #0
 80134e2:	4545      	cmp	r5, r8
 80134e4:	dd13      	ble.n	801350e <__kernel_rem_pio2+0x86>
 80134e6:	9b06      	ldr	r3, [sp, #24]
 80134e8:	aa20      	add	r2, sp, #128	; 0x80
 80134ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80134ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80134f2:	f04f 0800 	mov.w	r8, #0
 80134f6:	9b00      	ldr	r3, [sp, #0]
 80134f8:	4598      	cmp	r8, r3
 80134fa:	dc31      	bgt.n	8013560 <__kernel_rem_pio2+0xd8>
 80134fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8013798 <__kernel_rem_pio2+0x310>
 8013500:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013504:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013508:	462f      	mov	r7, r5
 801350a:	2600      	movs	r6, #0
 801350c:	e01b      	b.n	8013546 <__kernel_rem_pio2+0xbe>
 801350e:	42ef      	cmn	r7, r5
 8013510:	d407      	bmi.n	8013522 <__kernel_rem_pio2+0x9a>
 8013512:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013516:	f7ed f805 	bl	8000524 <__aeabi_i2d>
 801351a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801351e:	3501      	adds	r5, #1
 8013520:	e7df      	b.n	80134e2 <__kernel_rem_pio2+0x5a>
 8013522:	ec51 0b18 	vmov	r0, r1, d8
 8013526:	e7f8      	b.n	801351a <__kernel_rem_pio2+0x92>
 8013528:	e9d7 2300 	ldrd	r2, r3, [r7]
 801352c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013530:	f7ed f862 	bl	80005f8 <__aeabi_dmul>
 8013534:	4602      	mov	r2, r0
 8013536:	460b      	mov	r3, r1
 8013538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801353c:	f7ec fea6 	bl	800028c <__adddf3>
 8013540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013544:	3601      	adds	r6, #1
 8013546:	9b05      	ldr	r3, [sp, #20]
 8013548:	429e      	cmp	r6, r3
 801354a:	f1a7 0708 	sub.w	r7, r7, #8
 801354e:	ddeb      	ble.n	8013528 <__kernel_rem_pio2+0xa0>
 8013550:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013554:	f108 0801 	add.w	r8, r8, #1
 8013558:	ecab 7b02 	vstmia	fp!, {d7}
 801355c:	3508      	adds	r5, #8
 801355e:	e7ca      	b.n	80134f6 <__kernel_rem_pio2+0x6e>
 8013560:	9b00      	ldr	r3, [sp, #0]
 8013562:	aa0c      	add	r2, sp, #48	; 0x30
 8013564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013568:	930b      	str	r3, [sp, #44]	; 0x2c
 801356a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801356c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013570:	9c00      	ldr	r4, [sp, #0]
 8013572:	930a      	str	r3, [sp, #40]	; 0x28
 8013574:	00e3      	lsls	r3, r4, #3
 8013576:	9308      	str	r3, [sp, #32]
 8013578:	ab98      	add	r3, sp, #608	; 0x260
 801357a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801357e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013582:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8013586:	ab70      	add	r3, sp, #448	; 0x1c0
 8013588:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801358c:	46c3      	mov	fp, r8
 801358e:	46a1      	mov	r9, r4
 8013590:	f1b9 0f00 	cmp.w	r9, #0
 8013594:	f1a5 0508 	sub.w	r5, r5, #8
 8013598:	dc77      	bgt.n	801368a <__kernel_rem_pio2+0x202>
 801359a:	ec47 6b10 	vmov	d0, r6, r7
 801359e:	4650      	mov	r0, sl
 80135a0:	f000 fac2 	bl	8013b28 <scalbn>
 80135a4:	ec57 6b10 	vmov	r6, r7, d0
 80135a8:	2200      	movs	r2, #0
 80135aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80135ae:	ee10 0a10 	vmov	r0, s0
 80135b2:	4639      	mov	r1, r7
 80135b4:	f7ed f820 	bl	80005f8 <__aeabi_dmul>
 80135b8:	ec41 0b10 	vmov	d0, r0, r1
 80135bc:	f000 fb34 	bl	8013c28 <floor>
 80135c0:	4b7a      	ldr	r3, [pc, #488]	; (80137ac <__kernel_rem_pio2+0x324>)
 80135c2:	ec51 0b10 	vmov	r0, r1, d0
 80135c6:	2200      	movs	r2, #0
 80135c8:	f7ed f816 	bl	80005f8 <__aeabi_dmul>
 80135cc:	4602      	mov	r2, r0
 80135ce:	460b      	mov	r3, r1
 80135d0:	4630      	mov	r0, r6
 80135d2:	4639      	mov	r1, r7
 80135d4:	f7ec fe58 	bl	8000288 <__aeabi_dsub>
 80135d8:	460f      	mov	r7, r1
 80135da:	4606      	mov	r6, r0
 80135dc:	f7ed fabc 	bl	8000b58 <__aeabi_d2iz>
 80135e0:	9002      	str	r0, [sp, #8]
 80135e2:	f7ec ff9f 	bl	8000524 <__aeabi_i2d>
 80135e6:	4602      	mov	r2, r0
 80135e8:	460b      	mov	r3, r1
 80135ea:	4630      	mov	r0, r6
 80135ec:	4639      	mov	r1, r7
 80135ee:	f7ec fe4b 	bl	8000288 <__aeabi_dsub>
 80135f2:	f1ba 0f00 	cmp.w	sl, #0
 80135f6:	4606      	mov	r6, r0
 80135f8:	460f      	mov	r7, r1
 80135fa:	dd6d      	ble.n	80136d8 <__kernel_rem_pio2+0x250>
 80135fc:	1e61      	subs	r1, r4, #1
 80135fe:	ab0c      	add	r3, sp, #48	; 0x30
 8013600:	9d02      	ldr	r5, [sp, #8]
 8013602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013606:	f1ca 0018 	rsb	r0, sl, #24
 801360a:	fa43 f200 	asr.w	r2, r3, r0
 801360e:	4415      	add	r5, r2
 8013610:	4082      	lsls	r2, r0
 8013612:	1a9b      	subs	r3, r3, r2
 8013614:	aa0c      	add	r2, sp, #48	; 0x30
 8013616:	9502      	str	r5, [sp, #8]
 8013618:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801361c:	f1ca 0217 	rsb	r2, sl, #23
 8013620:	fa43 fb02 	asr.w	fp, r3, r2
 8013624:	f1bb 0f00 	cmp.w	fp, #0
 8013628:	dd65      	ble.n	80136f6 <__kernel_rem_pio2+0x26e>
 801362a:	9b02      	ldr	r3, [sp, #8]
 801362c:	2200      	movs	r2, #0
 801362e:	3301      	adds	r3, #1
 8013630:	9302      	str	r3, [sp, #8]
 8013632:	4615      	mov	r5, r2
 8013634:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013638:	4294      	cmp	r4, r2
 801363a:	f300 809f 	bgt.w	801377c <__kernel_rem_pio2+0x2f4>
 801363e:	f1ba 0f00 	cmp.w	sl, #0
 8013642:	dd07      	ble.n	8013654 <__kernel_rem_pio2+0x1cc>
 8013644:	f1ba 0f01 	cmp.w	sl, #1
 8013648:	f000 80c1 	beq.w	80137ce <__kernel_rem_pio2+0x346>
 801364c:	f1ba 0f02 	cmp.w	sl, #2
 8013650:	f000 80c7 	beq.w	80137e2 <__kernel_rem_pio2+0x35a>
 8013654:	f1bb 0f02 	cmp.w	fp, #2
 8013658:	d14d      	bne.n	80136f6 <__kernel_rem_pio2+0x26e>
 801365a:	4632      	mov	r2, r6
 801365c:	463b      	mov	r3, r7
 801365e:	4954      	ldr	r1, [pc, #336]	; (80137b0 <__kernel_rem_pio2+0x328>)
 8013660:	2000      	movs	r0, #0
 8013662:	f7ec fe11 	bl	8000288 <__aeabi_dsub>
 8013666:	4606      	mov	r6, r0
 8013668:	460f      	mov	r7, r1
 801366a:	2d00      	cmp	r5, #0
 801366c:	d043      	beq.n	80136f6 <__kernel_rem_pio2+0x26e>
 801366e:	4650      	mov	r0, sl
 8013670:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80137a0 <__kernel_rem_pio2+0x318>
 8013674:	f000 fa58 	bl	8013b28 <scalbn>
 8013678:	4630      	mov	r0, r6
 801367a:	4639      	mov	r1, r7
 801367c:	ec53 2b10 	vmov	r2, r3, d0
 8013680:	f7ec fe02 	bl	8000288 <__aeabi_dsub>
 8013684:	4606      	mov	r6, r0
 8013686:	460f      	mov	r7, r1
 8013688:	e035      	b.n	80136f6 <__kernel_rem_pio2+0x26e>
 801368a:	4b4a      	ldr	r3, [pc, #296]	; (80137b4 <__kernel_rem_pio2+0x32c>)
 801368c:	2200      	movs	r2, #0
 801368e:	4630      	mov	r0, r6
 8013690:	4639      	mov	r1, r7
 8013692:	f7ec ffb1 	bl	80005f8 <__aeabi_dmul>
 8013696:	f7ed fa5f 	bl	8000b58 <__aeabi_d2iz>
 801369a:	f7ec ff43 	bl	8000524 <__aeabi_i2d>
 801369e:	4602      	mov	r2, r0
 80136a0:	460b      	mov	r3, r1
 80136a2:	ec43 2b18 	vmov	d8, r2, r3
 80136a6:	4b44      	ldr	r3, [pc, #272]	; (80137b8 <__kernel_rem_pio2+0x330>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	f7ec ffa5 	bl	80005f8 <__aeabi_dmul>
 80136ae:	4602      	mov	r2, r0
 80136b0:	460b      	mov	r3, r1
 80136b2:	4630      	mov	r0, r6
 80136b4:	4639      	mov	r1, r7
 80136b6:	f7ec fde7 	bl	8000288 <__aeabi_dsub>
 80136ba:	f7ed fa4d 	bl	8000b58 <__aeabi_d2iz>
 80136be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80136c2:	f84b 0b04 	str.w	r0, [fp], #4
 80136c6:	ec51 0b18 	vmov	r0, r1, d8
 80136ca:	f7ec fddf 	bl	800028c <__adddf3>
 80136ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80136d2:	4606      	mov	r6, r0
 80136d4:	460f      	mov	r7, r1
 80136d6:	e75b      	b.n	8013590 <__kernel_rem_pio2+0x108>
 80136d8:	d106      	bne.n	80136e8 <__kernel_rem_pio2+0x260>
 80136da:	1e63      	subs	r3, r4, #1
 80136dc:	aa0c      	add	r2, sp, #48	; 0x30
 80136de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80136e6:	e79d      	b.n	8013624 <__kernel_rem_pio2+0x19c>
 80136e8:	4b34      	ldr	r3, [pc, #208]	; (80137bc <__kernel_rem_pio2+0x334>)
 80136ea:	2200      	movs	r2, #0
 80136ec:	f7ed fa0a 	bl	8000b04 <__aeabi_dcmpge>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	d140      	bne.n	8013776 <__kernel_rem_pio2+0x2ee>
 80136f4:	4683      	mov	fp, r0
 80136f6:	2200      	movs	r2, #0
 80136f8:	2300      	movs	r3, #0
 80136fa:	4630      	mov	r0, r6
 80136fc:	4639      	mov	r1, r7
 80136fe:	f7ed f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8013702:	2800      	cmp	r0, #0
 8013704:	f000 80c1 	beq.w	801388a <__kernel_rem_pio2+0x402>
 8013708:	1e65      	subs	r5, r4, #1
 801370a:	462b      	mov	r3, r5
 801370c:	2200      	movs	r2, #0
 801370e:	9900      	ldr	r1, [sp, #0]
 8013710:	428b      	cmp	r3, r1
 8013712:	da6d      	bge.n	80137f0 <__kernel_rem_pio2+0x368>
 8013714:	2a00      	cmp	r2, #0
 8013716:	f000 808a 	beq.w	801382e <__kernel_rem_pio2+0x3a6>
 801371a:	ab0c      	add	r3, sp, #48	; 0x30
 801371c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013720:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013724:	2b00      	cmp	r3, #0
 8013726:	f000 80ae 	beq.w	8013886 <__kernel_rem_pio2+0x3fe>
 801372a:	4650      	mov	r0, sl
 801372c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80137a0 <__kernel_rem_pio2+0x318>
 8013730:	f000 f9fa 	bl	8013b28 <scalbn>
 8013734:	1c6b      	adds	r3, r5, #1
 8013736:	00da      	lsls	r2, r3, #3
 8013738:	9205      	str	r2, [sp, #20]
 801373a:	ec57 6b10 	vmov	r6, r7, d0
 801373e:	aa70      	add	r2, sp, #448	; 0x1c0
 8013740:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80137b4 <__kernel_rem_pio2+0x32c>
 8013744:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8013748:	462c      	mov	r4, r5
 801374a:	f04f 0800 	mov.w	r8, #0
 801374e:	2c00      	cmp	r4, #0
 8013750:	f280 80d4 	bge.w	80138fc <__kernel_rem_pio2+0x474>
 8013754:	462c      	mov	r4, r5
 8013756:	2c00      	cmp	r4, #0
 8013758:	f2c0 8102 	blt.w	8013960 <__kernel_rem_pio2+0x4d8>
 801375c:	4b18      	ldr	r3, [pc, #96]	; (80137c0 <__kernel_rem_pio2+0x338>)
 801375e:	461e      	mov	r6, r3
 8013760:	ab70      	add	r3, sp, #448	; 0x1c0
 8013762:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8013766:	1b2b      	subs	r3, r5, r4
 8013768:	f04f 0900 	mov.w	r9, #0
 801376c:	f04f 0a00 	mov.w	sl, #0
 8013770:	2700      	movs	r7, #0
 8013772:	9306      	str	r3, [sp, #24]
 8013774:	e0e6      	b.n	8013944 <__kernel_rem_pio2+0x4bc>
 8013776:	f04f 0b02 	mov.w	fp, #2
 801377a:	e756      	b.n	801362a <__kernel_rem_pio2+0x1a2>
 801377c:	f8d8 3000 	ldr.w	r3, [r8]
 8013780:	bb05      	cbnz	r5, 80137c4 <__kernel_rem_pio2+0x33c>
 8013782:	b123      	cbz	r3, 801378e <__kernel_rem_pio2+0x306>
 8013784:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013788:	f8c8 3000 	str.w	r3, [r8]
 801378c:	2301      	movs	r3, #1
 801378e:	3201      	adds	r2, #1
 8013790:	f108 0804 	add.w	r8, r8, #4
 8013794:	461d      	mov	r5, r3
 8013796:	e74f      	b.n	8013638 <__kernel_rem_pio2+0x1b0>
	...
 80137a4:	3ff00000 	.word	0x3ff00000
 80137a8:	08014430 	.word	0x08014430
 80137ac:	40200000 	.word	0x40200000
 80137b0:	3ff00000 	.word	0x3ff00000
 80137b4:	3e700000 	.word	0x3e700000
 80137b8:	41700000 	.word	0x41700000
 80137bc:	3fe00000 	.word	0x3fe00000
 80137c0:	080143f0 	.word	0x080143f0
 80137c4:	1acb      	subs	r3, r1, r3
 80137c6:	f8c8 3000 	str.w	r3, [r8]
 80137ca:	462b      	mov	r3, r5
 80137cc:	e7df      	b.n	801378e <__kernel_rem_pio2+0x306>
 80137ce:	1e62      	subs	r2, r4, #1
 80137d0:	ab0c      	add	r3, sp, #48	; 0x30
 80137d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80137da:	a90c      	add	r1, sp, #48	; 0x30
 80137dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80137e0:	e738      	b.n	8013654 <__kernel_rem_pio2+0x1cc>
 80137e2:	1e62      	subs	r2, r4, #1
 80137e4:	ab0c      	add	r3, sp, #48	; 0x30
 80137e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80137ee:	e7f4      	b.n	80137da <__kernel_rem_pio2+0x352>
 80137f0:	a90c      	add	r1, sp, #48	; 0x30
 80137f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80137f6:	3b01      	subs	r3, #1
 80137f8:	430a      	orrs	r2, r1
 80137fa:	e788      	b.n	801370e <__kernel_rem_pio2+0x286>
 80137fc:	3301      	adds	r3, #1
 80137fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013802:	2900      	cmp	r1, #0
 8013804:	d0fa      	beq.n	80137fc <__kernel_rem_pio2+0x374>
 8013806:	9a08      	ldr	r2, [sp, #32]
 8013808:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801380c:	446a      	add	r2, sp
 801380e:	3a98      	subs	r2, #152	; 0x98
 8013810:	9208      	str	r2, [sp, #32]
 8013812:	9a06      	ldr	r2, [sp, #24]
 8013814:	a920      	add	r1, sp, #128	; 0x80
 8013816:	18a2      	adds	r2, r4, r2
 8013818:	18e3      	adds	r3, r4, r3
 801381a:	f104 0801 	add.w	r8, r4, #1
 801381e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013822:	9302      	str	r3, [sp, #8]
 8013824:	9b02      	ldr	r3, [sp, #8]
 8013826:	4543      	cmp	r3, r8
 8013828:	da04      	bge.n	8013834 <__kernel_rem_pio2+0x3ac>
 801382a:	461c      	mov	r4, r3
 801382c:	e6a2      	b.n	8013574 <__kernel_rem_pio2+0xec>
 801382e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013830:	2301      	movs	r3, #1
 8013832:	e7e4      	b.n	80137fe <__kernel_rem_pio2+0x376>
 8013834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013836:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801383a:	f7ec fe73 	bl	8000524 <__aeabi_i2d>
 801383e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013844:	46ab      	mov	fp, r5
 8013846:	461c      	mov	r4, r3
 8013848:	f04f 0900 	mov.w	r9, #0
 801384c:	2600      	movs	r6, #0
 801384e:	2700      	movs	r7, #0
 8013850:	9b05      	ldr	r3, [sp, #20]
 8013852:	4599      	cmp	r9, r3
 8013854:	dd06      	ble.n	8013864 <__kernel_rem_pio2+0x3dc>
 8013856:	9b08      	ldr	r3, [sp, #32]
 8013858:	e8e3 6702 	strd	r6, r7, [r3], #8
 801385c:	f108 0801 	add.w	r8, r8, #1
 8013860:	9308      	str	r3, [sp, #32]
 8013862:	e7df      	b.n	8013824 <__kernel_rem_pio2+0x39c>
 8013864:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013868:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801386c:	f7ec fec4 	bl	80005f8 <__aeabi_dmul>
 8013870:	4602      	mov	r2, r0
 8013872:	460b      	mov	r3, r1
 8013874:	4630      	mov	r0, r6
 8013876:	4639      	mov	r1, r7
 8013878:	f7ec fd08 	bl	800028c <__adddf3>
 801387c:	f109 0901 	add.w	r9, r9, #1
 8013880:	4606      	mov	r6, r0
 8013882:	460f      	mov	r7, r1
 8013884:	e7e4      	b.n	8013850 <__kernel_rem_pio2+0x3c8>
 8013886:	3d01      	subs	r5, #1
 8013888:	e747      	b.n	801371a <__kernel_rem_pio2+0x292>
 801388a:	ec47 6b10 	vmov	d0, r6, r7
 801388e:	f1ca 0000 	rsb	r0, sl, #0
 8013892:	f000 f949 	bl	8013b28 <scalbn>
 8013896:	ec57 6b10 	vmov	r6, r7, d0
 801389a:	4ba0      	ldr	r3, [pc, #640]	; (8013b1c <__kernel_rem_pio2+0x694>)
 801389c:	ee10 0a10 	vmov	r0, s0
 80138a0:	2200      	movs	r2, #0
 80138a2:	4639      	mov	r1, r7
 80138a4:	f7ed f92e 	bl	8000b04 <__aeabi_dcmpge>
 80138a8:	b1f8      	cbz	r0, 80138ea <__kernel_rem_pio2+0x462>
 80138aa:	4b9d      	ldr	r3, [pc, #628]	; (8013b20 <__kernel_rem_pio2+0x698>)
 80138ac:	2200      	movs	r2, #0
 80138ae:	4630      	mov	r0, r6
 80138b0:	4639      	mov	r1, r7
 80138b2:	f7ec fea1 	bl	80005f8 <__aeabi_dmul>
 80138b6:	f7ed f94f 	bl	8000b58 <__aeabi_d2iz>
 80138ba:	4680      	mov	r8, r0
 80138bc:	f7ec fe32 	bl	8000524 <__aeabi_i2d>
 80138c0:	4b96      	ldr	r3, [pc, #600]	; (8013b1c <__kernel_rem_pio2+0x694>)
 80138c2:	2200      	movs	r2, #0
 80138c4:	f7ec fe98 	bl	80005f8 <__aeabi_dmul>
 80138c8:	460b      	mov	r3, r1
 80138ca:	4602      	mov	r2, r0
 80138cc:	4639      	mov	r1, r7
 80138ce:	4630      	mov	r0, r6
 80138d0:	f7ec fcda 	bl	8000288 <__aeabi_dsub>
 80138d4:	f7ed f940 	bl	8000b58 <__aeabi_d2iz>
 80138d8:	1c65      	adds	r5, r4, #1
 80138da:	ab0c      	add	r3, sp, #48	; 0x30
 80138dc:	f10a 0a18 	add.w	sl, sl, #24
 80138e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80138e4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80138e8:	e71f      	b.n	801372a <__kernel_rem_pio2+0x2a2>
 80138ea:	4630      	mov	r0, r6
 80138ec:	4639      	mov	r1, r7
 80138ee:	f7ed f933 	bl	8000b58 <__aeabi_d2iz>
 80138f2:	ab0c      	add	r3, sp, #48	; 0x30
 80138f4:	4625      	mov	r5, r4
 80138f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80138fa:	e716      	b.n	801372a <__kernel_rem_pio2+0x2a2>
 80138fc:	ab0c      	add	r3, sp, #48	; 0x30
 80138fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013902:	f7ec fe0f 	bl	8000524 <__aeabi_i2d>
 8013906:	4632      	mov	r2, r6
 8013908:	463b      	mov	r3, r7
 801390a:	f7ec fe75 	bl	80005f8 <__aeabi_dmul>
 801390e:	4642      	mov	r2, r8
 8013910:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013914:	464b      	mov	r3, r9
 8013916:	4630      	mov	r0, r6
 8013918:	4639      	mov	r1, r7
 801391a:	f7ec fe6d 	bl	80005f8 <__aeabi_dmul>
 801391e:	3c01      	subs	r4, #1
 8013920:	4606      	mov	r6, r0
 8013922:	460f      	mov	r7, r1
 8013924:	e713      	b.n	801374e <__kernel_rem_pio2+0x2c6>
 8013926:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801392a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801392e:	f7ec fe63 	bl	80005f8 <__aeabi_dmul>
 8013932:	4602      	mov	r2, r0
 8013934:	460b      	mov	r3, r1
 8013936:	4648      	mov	r0, r9
 8013938:	4651      	mov	r1, sl
 801393a:	f7ec fca7 	bl	800028c <__adddf3>
 801393e:	3701      	adds	r7, #1
 8013940:	4681      	mov	r9, r0
 8013942:	468a      	mov	sl, r1
 8013944:	9b00      	ldr	r3, [sp, #0]
 8013946:	429f      	cmp	r7, r3
 8013948:	dc02      	bgt.n	8013950 <__kernel_rem_pio2+0x4c8>
 801394a:	9b06      	ldr	r3, [sp, #24]
 801394c:	429f      	cmp	r7, r3
 801394e:	ddea      	ble.n	8013926 <__kernel_rem_pio2+0x49e>
 8013950:	9a06      	ldr	r2, [sp, #24]
 8013952:	ab48      	add	r3, sp, #288	; 0x120
 8013954:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8013958:	e9c6 9a00 	strd	r9, sl, [r6]
 801395c:	3c01      	subs	r4, #1
 801395e:	e6fa      	b.n	8013756 <__kernel_rem_pio2+0x2ce>
 8013960:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013962:	2b02      	cmp	r3, #2
 8013964:	dc0b      	bgt.n	801397e <__kernel_rem_pio2+0x4f6>
 8013966:	2b00      	cmp	r3, #0
 8013968:	dc39      	bgt.n	80139de <__kernel_rem_pio2+0x556>
 801396a:	d05d      	beq.n	8013a28 <__kernel_rem_pio2+0x5a0>
 801396c:	9b02      	ldr	r3, [sp, #8]
 801396e:	f003 0007 	and.w	r0, r3, #7
 8013972:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013976:	ecbd 8b02 	vpop	{d8}
 801397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801397e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013980:	2b03      	cmp	r3, #3
 8013982:	d1f3      	bne.n	801396c <__kernel_rem_pio2+0x4e4>
 8013984:	9b05      	ldr	r3, [sp, #20]
 8013986:	9500      	str	r5, [sp, #0]
 8013988:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801398c:	eb0d 0403 	add.w	r4, sp, r3
 8013990:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8013994:	46a2      	mov	sl, r4
 8013996:	9b00      	ldr	r3, [sp, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	f1aa 0a08 	sub.w	sl, sl, #8
 801399e:	dc69      	bgt.n	8013a74 <__kernel_rem_pio2+0x5ec>
 80139a0:	46aa      	mov	sl, r5
 80139a2:	f1ba 0f01 	cmp.w	sl, #1
 80139a6:	f1a4 0408 	sub.w	r4, r4, #8
 80139aa:	f300 8083 	bgt.w	8013ab4 <__kernel_rem_pio2+0x62c>
 80139ae:	9c05      	ldr	r4, [sp, #20]
 80139b0:	ab48      	add	r3, sp, #288	; 0x120
 80139b2:	441c      	add	r4, r3
 80139b4:	2000      	movs	r0, #0
 80139b6:	2100      	movs	r1, #0
 80139b8:	2d01      	cmp	r5, #1
 80139ba:	f300 809a 	bgt.w	8013af2 <__kernel_rem_pio2+0x66a>
 80139be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80139c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80139c6:	f1bb 0f00 	cmp.w	fp, #0
 80139ca:	f040 8098 	bne.w	8013afe <__kernel_rem_pio2+0x676>
 80139ce:	9b04      	ldr	r3, [sp, #16]
 80139d0:	e9c3 7800 	strd	r7, r8, [r3]
 80139d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80139d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80139dc:	e7c6      	b.n	801396c <__kernel_rem_pio2+0x4e4>
 80139de:	9e05      	ldr	r6, [sp, #20]
 80139e0:	ab48      	add	r3, sp, #288	; 0x120
 80139e2:	441e      	add	r6, r3
 80139e4:	462c      	mov	r4, r5
 80139e6:	2000      	movs	r0, #0
 80139e8:	2100      	movs	r1, #0
 80139ea:	2c00      	cmp	r4, #0
 80139ec:	da33      	bge.n	8013a56 <__kernel_rem_pio2+0x5ce>
 80139ee:	f1bb 0f00 	cmp.w	fp, #0
 80139f2:	d036      	beq.n	8013a62 <__kernel_rem_pio2+0x5da>
 80139f4:	4602      	mov	r2, r0
 80139f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139fa:	9c04      	ldr	r4, [sp, #16]
 80139fc:	e9c4 2300 	strd	r2, r3, [r4]
 8013a00:	4602      	mov	r2, r0
 8013a02:	460b      	mov	r3, r1
 8013a04:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013a08:	f7ec fc3e 	bl	8000288 <__aeabi_dsub>
 8013a0c:	ae4a      	add	r6, sp, #296	; 0x128
 8013a0e:	2401      	movs	r4, #1
 8013a10:	42a5      	cmp	r5, r4
 8013a12:	da29      	bge.n	8013a68 <__kernel_rem_pio2+0x5e0>
 8013a14:	f1bb 0f00 	cmp.w	fp, #0
 8013a18:	d002      	beq.n	8013a20 <__kernel_rem_pio2+0x598>
 8013a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a1e:	4619      	mov	r1, r3
 8013a20:	9b04      	ldr	r3, [sp, #16]
 8013a22:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013a26:	e7a1      	b.n	801396c <__kernel_rem_pio2+0x4e4>
 8013a28:	9c05      	ldr	r4, [sp, #20]
 8013a2a:	ab48      	add	r3, sp, #288	; 0x120
 8013a2c:	441c      	add	r4, r3
 8013a2e:	2000      	movs	r0, #0
 8013a30:	2100      	movs	r1, #0
 8013a32:	2d00      	cmp	r5, #0
 8013a34:	da09      	bge.n	8013a4a <__kernel_rem_pio2+0x5c2>
 8013a36:	f1bb 0f00 	cmp.w	fp, #0
 8013a3a:	d002      	beq.n	8013a42 <__kernel_rem_pio2+0x5ba>
 8013a3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a40:	4619      	mov	r1, r3
 8013a42:	9b04      	ldr	r3, [sp, #16]
 8013a44:	e9c3 0100 	strd	r0, r1, [r3]
 8013a48:	e790      	b.n	801396c <__kernel_rem_pio2+0x4e4>
 8013a4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a4e:	f7ec fc1d 	bl	800028c <__adddf3>
 8013a52:	3d01      	subs	r5, #1
 8013a54:	e7ed      	b.n	8013a32 <__kernel_rem_pio2+0x5aa>
 8013a56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013a5a:	f7ec fc17 	bl	800028c <__adddf3>
 8013a5e:	3c01      	subs	r4, #1
 8013a60:	e7c3      	b.n	80139ea <__kernel_rem_pio2+0x562>
 8013a62:	4602      	mov	r2, r0
 8013a64:	460b      	mov	r3, r1
 8013a66:	e7c8      	b.n	80139fa <__kernel_rem_pio2+0x572>
 8013a68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013a6c:	f7ec fc0e 	bl	800028c <__adddf3>
 8013a70:	3401      	adds	r4, #1
 8013a72:	e7cd      	b.n	8013a10 <__kernel_rem_pio2+0x588>
 8013a74:	e9da 8900 	ldrd	r8, r9, [sl]
 8013a78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013a7c:	9b00      	ldr	r3, [sp, #0]
 8013a7e:	3b01      	subs	r3, #1
 8013a80:	9300      	str	r3, [sp, #0]
 8013a82:	4632      	mov	r2, r6
 8013a84:	463b      	mov	r3, r7
 8013a86:	4640      	mov	r0, r8
 8013a88:	4649      	mov	r1, r9
 8013a8a:	f7ec fbff 	bl	800028c <__adddf3>
 8013a8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013a92:	4602      	mov	r2, r0
 8013a94:	460b      	mov	r3, r1
 8013a96:	4640      	mov	r0, r8
 8013a98:	4649      	mov	r1, r9
 8013a9a:	f7ec fbf5 	bl	8000288 <__aeabi_dsub>
 8013a9e:	4632      	mov	r2, r6
 8013aa0:	463b      	mov	r3, r7
 8013aa2:	f7ec fbf3 	bl	800028c <__adddf3>
 8013aa6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013aaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013aae:	ed8a 7b00 	vstr	d7, [sl]
 8013ab2:	e770      	b.n	8013996 <__kernel_rem_pio2+0x50e>
 8013ab4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013ab8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013abc:	4640      	mov	r0, r8
 8013abe:	4632      	mov	r2, r6
 8013ac0:	463b      	mov	r3, r7
 8013ac2:	4649      	mov	r1, r9
 8013ac4:	f7ec fbe2 	bl	800028c <__adddf3>
 8013ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8013acc:	4602      	mov	r2, r0
 8013ace:	460b      	mov	r3, r1
 8013ad0:	4640      	mov	r0, r8
 8013ad2:	4649      	mov	r1, r9
 8013ad4:	f7ec fbd8 	bl	8000288 <__aeabi_dsub>
 8013ad8:	4632      	mov	r2, r6
 8013ada:	463b      	mov	r3, r7
 8013adc:	f7ec fbd6 	bl	800028c <__adddf3>
 8013ae0:	ed9d 7b00 	vldr	d7, [sp]
 8013ae4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ae8:	ed84 7b00 	vstr	d7, [r4]
 8013aec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013af0:	e757      	b.n	80139a2 <__kernel_rem_pio2+0x51a>
 8013af2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013af6:	f7ec fbc9 	bl	800028c <__adddf3>
 8013afa:	3d01      	subs	r5, #1
 8013afc:	e75c      	b.n	80139b8 <__kernel_rem_pio2+0x530>
 8013afe:	9b04      	ldr	r3, [sp, #16]
 8013b00:	9a04      	ldr	r2, [sp, #16]
 8013b02:	601f      	str	r7, [r3, #0]
 8013b04:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013b08:	605c      	str	r4, [r3, #4]
 8013b0a:	609d      	str	r5, [r3, #8]
 8013b0c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013b10:	60d3      	str	r3, [r2, #12]
 8013b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b16:	6110      	str	r0, [r2, #16]
 8013b18:	6153      	str	r3, [r2, #20]
 8013b1a:	e727      	b.n	801396c <__kernel_rem_pio2+0x4e4>
 8013b1c:	41700000 	.word	0x41700000
 8013b20:	3e700000 	.word	0x3e700000
 8013b24:	00000000 	.word	0x00000000

08013b28 <scalbn>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	ec55 4b10 	vmov	r4, r5, d0
 8013b2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013b32:	4606      	mov	r6, r0
 8013b34:	462b      	mov	r3, r5
 8013b36:	b999      	cbnz	r1, 8013b60 <scalbn+0x38>
 8013b38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013b3c:	4323      	orrs	r3, r4
 8013b3e:	d03f      	beq.n	8013bc0 <scalbn+0x98>
 8013b40:	4b35      	ldr	r3, [pc, #212]	; (8013c18 <scalbn+0xf0>)
 8013b42:	4629      	mov	r1, r5
 8013b44:	ee10 0a10 	vmov	r0, s0
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f7ec fd55 	bl	80005f8 <__aeabi_dmul>
 8013b4e:	4b33      	ldr	r3, [pc, #204]	; (8013c1c <scalbn+0xf4>)
 8013b50:	429e      	cmp	r6, r3
 8013b52:	4604      	mov	r4, r0
 8013b54:	460d      	mov	r5, r1
 8013b56:	da10      	bge.n	8013b7a <scalbn+0x52>
 8013b58:	a327      	add	r3, pc, #156	; (adr r3, 8013bf8 <scalbn+0xd0>)
 8013b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5e:	e01f      	b.n	8013ba0 <scalbn+0x78>
 8013b60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013b64:	4291      	cmp	r1, r2
 8013b66:	d10c      	bne.n	8013b82 <scalbn+0x5a>
 8013b68:	ee10 2a10 	vmov	r2, s0
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	4629      	mov	r1, r5
 8013b70:	f7ec fb8c 	bl	800028c <__adddf3>
 8013b74:	4604      	mov	r4, r0
 8013b76:	460d      	mov	r5, r1
 8013b78:	e022      	b.n	8013bc0 <scalbn+0x98>
 8013b7a:	460b      	mov	r3, r1
 8013b7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013b80:	3936      	subs	r1, #54	; 0x36
 8013b82:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013b86:	4296      	cmp	r6, r2
 8013b88:	dd0d      	ble.n	8013ba6 <scalbn+0x7e>
 8013b8a:	2d00      	cmp	r5, #0
 8013b8c:	a11c      	add	r1, pc, #112	; (adr r1, 8013c00 <scalbn+0xd8>)
 8013b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b92:	da02      	bge.n	8013b9a <scalbn+0x72>
 8013b94:	a11c      	add	r1, pc, #112	; (adr r1, 8013c08 <scalbn+0xe0>)
 8013b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b9a:	a319      	add	r3, pc, #100	; (adr r3, 8013c00 <scalbn+0xd8>)
 8013b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba0:	f7ec fd2a 	bl	80005f8 <__aeabi_dmul>
 8013ba4:	e7e6      	b.n	8013b74 <scalbn+0x4c>
 8013ba6:	1872      	adds	r2, r6, r1
 8013ba8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013bac:	428a      	cmp	r2, r1
 8013bae:	dcec      	bgt.n	8013b8a <scalbn+0x62>
 8013bb0:	2a00      	cmp	r2, #0
 8013bb2:	dd08      	ble.n	8013bc6 <scalbn+0x9e>
 8013bb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013bb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013bbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013bc0:	ec45 4b10 	vmov	d0, r4, r5
 8013bc4:	bd70      	pop	{r4, r5, r6, pc}
 8013bc6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013bca:	da08      	bge.n	8013bde <scalbn+0xb6>
 8013bcc:	2d00      	cmp	r5, #0
 8013bce:	a10a      	add	r1, pc, #40	; (adr r1, 8013bf8 <scalbn+0xd0>)
 8013bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bd4:	dac0      	bge.n	8013b58 <scalbn+0x30>
 8013bd6:	a10e      	add	r1, pc, #56	; (adr r1, 8013c10 <scalbn+0xe8>)
 8013bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bdc:	e7bc      	b.n	8013b58 <scalbn+0x30>
 8013bde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013be2:	3236      	adds	r2, #54	; 0x36
 8013be4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013be8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013bec:	4620      	mov	r0, r4
 8013bee:	4b0c      	ldr	r3, [pc, #48]	; (8013c20 <scalbn+0xf8>)
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	e7d5      	b.n	8013ba0 <scalbn+0x78>
 8013bf4:	f3af 8000 	nop.w
 8013bf8:	c2f8f359 	.word	0xc2f8f359
 8013bfc:	01a56e1f 	.word	0x01a56e1f
 8013c00:	8800759c 	.word	0x8800759c
 8013c04:	7e37e43c 	.word	0x7e37e43c
 8013c08:	8800759c 	.word	0x8800759c
 8013c0c:	fe37e43c 	.word	0xfe37e43c
 8013c10:	c2f8f359 	.word	0xc2f8f359
 8013c14:	81a56e1f 	.word	0x81a56e1f
 8013c18:	43500000 	.word	0x43500000
 8013c1c:	ffff3cb0 	.word	0xffff3cb0
 8013c20:	3c900000 	.word	0x3c900000
 8013c24:	00000000 	.word	0x00000000

08013c28 <floor>:
 8013c28:	ec51 0b10 	vmov	r0, r1, d0
 8013c2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8013c38:	2e13      	cmp	r6, #19
 8013c3a:	ee10 5a10 	vmov	r5, s0
 8013c3e:	ee10 8a10 	vmov	r8, s0
 8013c42:	460c      	mov	r4, r1
 8013c44:	dc31      	bgt.n	8013caa <floor+0x82>
 8013c46:	2e00      	cmp	r6, #0
 8013c48:	da14      	bge.n	8013c74 <floor+0x4c>
 8013c4a:	a333      	add	r3, pc, #204	; (adr r3, 8013d18 <floor+0xf0>)
 8013c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c50:	f7ec fb1c 	bl	800028c <__adddf3>
 8013c54:	2200      	movs	r2, #0
 8013c56:	2300      	movs	r3, #0
 8013c58:	f7ec ff5e 	bl	8000b18 <__aeabi_dcmpgt>
 8013c5c:	b138      	cbz	r0, 8013c6e <floor+0x46>
 8013c5e:	2c00      	cmp	r4, #0
 8013c60:	da53      	bge.n	8013d0a <floor+0xe2>
 8013c62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013c66:	4325      	orrs	r5, r4
 8013c68:	d052      	beq.n	8013d10 <floor+0xe8>
 8013c6a:	4c2d      	ldr	r4, [pc, #180]	; (8013d20 <floor+0xf8>)
 8013c6c:	2500      	movs	r5, #0
 8013c6e:	4621      	mov	r1, r4
 8013c70:	4628      	mov	r0, r5
 8013c72:	e024      	b.n	8013cbe <floor+0x96>
 8013c74:	4f2b      	ldr	r7, [pc, #172]	; (8013d24 <floor+0xfc>)
 8013c76:	4137      	asrs	r7, r6
 8013c78:	ea01 0307 	and.w	r3, r1, r7
 8013c7c:	4303      	orrs	r3, r0
 8013c7e:	d01e      	beq.n	8013cbe <floor+0x96>
 8013c80:	a325      	add	r3, pc, #148	; (adr r3, 8013d18 <floor+0xf0>)
 8013c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c86:	f7ec fb01 	bl	800028c <__adddf3>
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	f7ec ff43 	bl	8000b18 <__aeabi_dcmpgt>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d0eb      	beq.n	8013c6e <floor+0x46>
 8013c96:	2c00      	cmp	r4, #0
 8013c98:	bfbe      	ittt	lt
 8013c9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013c9e:	4133      	asrlt	r3, r6
 8013ca0:	18e4      	addlt	r4, r4, r3
 8013ca2:	ea24 0407 	bic.w	r4, r4, r7
 8013ca6:	2500      	movs	r5, #0
 8013ca8:	e7e1      	b.n	8013c6e <floor+0x46>
 8013caa:	2e33      	cmp	r6, #51	; 0x33
 8013cac:	dd0b      	ble.n	8013cc6 <floor+0x9e>
 8013cae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013cb2:	d104      	bne.n	8013cbe <floor+0x96>
 8013cb4:	ee10 2a10 	vmov	r2, s0
 8013cb8:	460b      	mov	r3, r1
 8013cba:	f7ec fae7 	bl	800028c <__adddf3>
 8013cbe:	ec41 0b10 	vmov	d0, r0, r1
 8013cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cc6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8013cca:	f04f 37ff 	mov.w	r7, #4294967295
 8013cce:	40df      	lsrs	r7, r3
 8013cd0:	4238      	tst	r0, r7
 8013cd2:	d0f4      	beq.n	8013cbe <floor+0x96>
 8013cd4:	a310      	add	r3, pc, #64	; (adr r3, 8013d18 <floor+0xf0>)
 8013cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cda:	f7ec fad7 	bl	800028c <__adddf3>
 8013cde:	2200      	movs	r2, #0
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	f7ec ff19 	bl	8000b18 <__aeabi_dcmpgt>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d0c1      	beq.n	8013c6e <floor+0x46>
 8013cea:	2c00      	cmp	r4, #0
 8013cec:	da0a      	bge.n	8013d04 <floor+0xdc>
 8013cee:	2e14      	cmp	r6, #20
 8013cf0:	d101      	bne.n	8013cf6 <floor+0xce>
 8013cf2:	3401      	adds	r4, #1
 8013cf4:	e006      	b.n	8013d04 <floor+0xdc>
 8013cf6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	40b3      	lsls	r3, r6
 8013cfe:	441d      	add	r5, r3
 8013d00:	45a8      	cmp	r8, r5
 8013d02:	d8f6      	bhi.n	8013cf2 <floor+0xca>
 8013d04:	ea25 0507 	bic.w	r5, r5, r7
 8013d08:	e7b1      	b.n	8013c6e <floor+0x46>
 8013d0a:	2500      	movs	r5, #0
 8013d0c:	462c      	mov	r4, r5
 8013d0e:	e7ae      	b.n	8013c6e <floor+0x46>
 8013d10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013d14:	e7ab      	b.n	8013c6e <floor+0x46>
 8013d16:	bf00      	nop
 8013d18:	8800759c 	.word	0x8800759c
 8013d1c:	7e37e43c 	.word	0x7e37e43c
 8013d20:	bff00000 	.word	0xbff00000
 8013d24:	000fffff 	.word	0x000fffff

08013d28 <_init>:
 8013d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d2a:	bf00      	nop
 8013d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d2e:	bc08      	pop	{r3}
 8013d30:	469e      	mov	lr, r3
 8013d32:	4770      	bx	lr

08013d34 <_fini>:
 8013d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d36:	bf00      	nop
 8013d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d3a:	bc08      	pop	{r3}
 8013d3c:	469e      	mov	lr, r3
 8013d3e:	4770      	bx	lr
